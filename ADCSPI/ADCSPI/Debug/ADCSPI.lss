
ADCSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b88  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  20400000  00403b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000015c4  204000b4  00403c3c  000200b4  2**2
                  ALLOC
  3 .heap         00000200  20401678  00405200  000200b4  2**0
                  ALLOC
  4 .stack        00000400  20401878  00405400  000200b4  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016866  00000000  00000000  0002013b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000032e1  00000000  00000000  000369a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a271  00000000  00000000  00039c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c30  00000000  00000000  00043ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b50  00000000  00000000  00044b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003efd9  00000000  00000000  00045673  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012bf0  00000000  00000000  0008464c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001493ae  00000000  00000000  0009723c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002770  00000000  00000000  001e05ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 1c 40 20 b5 0c 40 00 b1 0c 40 00 b1 0c 40 00     x.@ ..@...@...@.
  400010:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 0c 40 00 b1 0c 40 00 00 00 00 00 b1 0c 40 00     ..@...@.......@.
  40003c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40004c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40005c:	b1 0c 40 00 b1 0c 40 00 00 00 00 00 b1 0c 40 00     ..@...@.......@.
  40006c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 8d 20 40 00     ..@...@...@.. @.
  40007c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40008c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40009c:	8d 1c 40 00 b1 0c 40 00 b1 0c 40 00 a1 1c 40 00     ..@...@...@...@.
  4000ac:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000bc:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000cc:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000dc:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000ec:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000fc:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40010c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ......@...@...@.
  40012c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40013c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40014c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40015c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204000b4 	.word	0x204000b4
  400184:	00000000 	.word	0x00000000
  400188:	00403b88 	.word	0x00403b88

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00403b88 	.word	0x00403b88
  4001c8:	204000b8 	.word	0x204000b8
  4001cc:	00403b88 	.word	0x00403b88
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400f11 	.word	0x00400f11

004001e0 <parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
  4001e0:	b410      	push	{r4}
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
  4001e2:	7804      	ldrb	r4, [r0, #0]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
  4001e4:	7843      	ldrb	r3, [r0, #1]
  4001e6:	011b      	lsls	r3, r3, #4
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
  4001e8:	7882      	ldrb	r2, [r0, #2]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
  4001ea:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
  4001ee:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
  4001f2:	600b      	str	r3, [r1, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
  4001f4:	78c4      	ldrb	r4, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
  4001f6:	7903      	ldrb	r3, [r0, #4]
  4001f8:	011b      	lsls	r3, r3, #4
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
  4001fa:	7942      	ldrb	r2, [r0, #5]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
  4001fc:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
  400200:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
  400204:	604b      	str	r3, [r1, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << BME280_8_BIT_SHIFT;
  400206:	7982      	ldrb	r2, [r0, #6]
    data_lsb = (uint32_t)reg_data[7];
  400208:	79c3      	ldrb	r3, [r0, #7]
    uncomp_data->humidity = data_msb | data_lsb;
  40020a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40020e:	608b      	str	r3, [r1, #8]
}
  400210:	f85d 4b04 	ldr.w	r4, [sp], #4
  400214:	4770      	bx	lr
	...

00400218 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
  400218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40021c:	b085      	sub	sp, #20
  40021e:	460d      	mov	r5, r1
    double var2;
    double temperature;
    double temperature_min = -40;
    double temperature_max = 85;

    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
  400220:	4e35      	ldr	r6, [pc, #212]	; (4002f8 <compensate_temperature+0xe0>)
  400222:	6840      	ldr	r0, [r0, #4]
  400224:	47b0      	blx	r6
  400226:	e9cd 0100 	strd	r0, r1, [sp]
  40022a:	4c34      	ldr	r4, [pc, #208]	; (4002fc <compensate_temperature+0xe4>)
  40022c:	2200      	movs	r2, #0
  40022e:	4b34      	ldr	r3, [pc, #208]	; (400300 <compensate_temperature+0xe8>)
  400230:	47a0      	blx	r4
  400232:	4680      	mov	r8, r0
  400234:	4689      	mov	r9, r1
  400236:	8828      	ldrh	r0, [r5, #0]
  400238:	47b0      	blx	r6
  40023a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40023e:	2200      	movs	r2, #0
  400240:	4b30      	ldr	r3, [pc, #192]	; (400304 <compensate_temperature+0xec>)
  400242:	47a0      	blx	r4
  400244:	4f30      	ldr	r7, [pc, #192]	; (400308 <compensate_temperature+0xf0>)
  400246:	4602      	mov	r2, r0
  400248:	460b      	mov	r3, r1
  40024a:	4640      	mov	r0, r8
  40024c:	4649      	mov	r1, r9
  40024e:	47b8      	blx	r7
  400250:	4680      	mov	r8, r0
  400252:	4689      	mov	r9, r1
    var1 = var1 * ((double)calib_data->dig_t2);
  400254:	4e2d      	ldr	r6, [pc, #180]	; (40030c <compensate_temperature+0xf4>)
  400256:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
  40025a:	47b0      	blx	r6
  40025c:	4602      	mov	r2, r0
  40025e:	460b      	mov	r3, r1
  400260:	4640      	mov	r0, r8
  400262:	4649      	mov	r1, r9
  400264:	47a0      	blx	r4
  400266:	4682      	mov	sl, r0
  400268:	468b      	mov	fp, r1
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
  40026a:	2200      	movs	r2, #0
  40026c:	4b28      	ldr	r3, [pc, #160]	; (400310 <compensate_temperature+0xf8>)
  40026e:	e9dd 0100 	ldrd	r0, r1, [sp]
  400272:	47a0      	blx	r4
  400274:	4680      	mov	r8, r0
  400276:	4689      	mov	r9, r1
  400278:	2200      	movs	r2, #0
  40027a:	4b26      	ldr	r3, [pc, #152]	; (400314 <compensate_temperature+0xfc>)
  40027c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400280:	47a0      	blx	r4
  400282:	4602      	mov	r2, r0
  400284:	460b      	mov	r3, r1
  400286:	4640      	mov	r0, r8
  400288:	4649      	mov	r1, r9
  40028a:	47b8      	blx	r7
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
  40028c:	4602      	mov	r2, r0
  40028e:	460b      	mov	r3, r1
  400290:	47a0      	blx	r4
  400292:	4680      	mov	r8, r0
  400294:	4689      	mov	r9, r1
  400296:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  40029a:	47b0      	blx	r6
  40029c:	4602      	mov	r2, r0
  40029e:	460b      	mov	r3, r1
  4002a0:	4640      	mov	r0, r8
  4002a2:	4649      	mov	r1, r9
  4002a4:	47a0      	blx	r4
    calib_data->t_fine = (int32_t)(var1 + var2);
  4002a6:	4602      	mov	r2, r0
  4002a8:	460b      	mov	r3, r1
  4002aa:	4650      	mov	r0, sl
  4002ac:	4659      	mov	r1, fp
  4002ae:	4c1a      	ldr	r4, [pc, #104]	; (400318 <compensate_temperature+0x100>)
  4002b0:	47a0      	blx	r4
  4002b2:	4606      	mov	r6, r0
  4002b4:	460f      	mov	r7, r1
  4002b6:	4b19      	ldr	r3, [pc, #100]	; (40031c <compensate_temperature+0x104>)
  4002b8:	4798      	blx	r3
  4002ba:	6268      	str	r0, [r5, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
  4002bc:	2200      	movs	r2, #0
  4002be:	4b18      	ldr	r3, [pc, #96]	; (400320 <compensate_temperature+0x108>)
  4002c0:	4630      	mov	r0, r6
  4002c2:	4639      	mov	r1, r7
  4002c4:	4c17      	ldr	r4, [pc, #92]	; (400324 <compensate_temperature+0x10c>)
  4002c6:	47a0      	blx	r4
  4002c8:	4604      	mov	r4, r0
  4002ca:	460d      	mov	r5, r1

    if (temperature < temperature_min)
  4002cc:	2200      	movs	r2, #0
  4002ce:	4b16      	ldr	r3, [pc, #88]	; (400328 <compensate_temperature+0x110>)
  4002d0:	4e16      	ldr	r6, [pc, #88]	; (40032c <compensate_temperature+0x114>)
  4002d2:	47b0      	blx	r6
  4002d4:	b948      	cbnz	r0, 4002ea <compensate_temperature+0xd2>
    {
        temperature = temperature_min;
    }
    else if (temperature > temperature_max)
  4002d6:	2200      	movs	r2, #0
  4002d8:	4b15      	ldr	r3, [pc, #84]	; (400330 <compensate_temperature+0x118>)
  4002da:	4620      	mov	r0, r4
  4002dc:	4629      	mov	r1, r5
  4002de:	4e15      	ldr	r6, [pc, #84]	; (400334 <compensate_temperature+0x11c>)
  4002e0:	47b0      	blx	r6
  4002e2:	b120      	cbz	r0, 4002ee <compensate_temperature+0xd6>
    {
        temperature = temperature_max;
  4002e4:	2400      	movs	r4, #0
  4002e6:	4d12      	ldr	r5, [pc, #72]	; (400330 <compensate_temperature+0x118>)
    }

    return temperature;
  4002e8:	e001      	b.n	4002ee <compensate_temperature+0xd6>
        temperature = temperature_min;
  4002ea:	2400      	movs	r4, #0
  4002ec:	4d0e      	ldr	r5, [pc, #56]	; (400328 <compensate_temperature+0x110>)
}
  4002ee:	4620      	mov	r0, r4
  4002f0:	4629      	mov	r1, r5
  4002f2:	b005      	add	sp, #20
  4002f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002f8:	00402945 	.word	0x00402945
  4002fc:	00402a31 	.word	0x00402a31
  400300:	3f100000 	.word	0x3f100000
  400304:	3f500000 	.word	0x3f500000
  400308:	004026c9 	.word	0x004026c9
  40030c:	00402965 	.word	0x00402965
  400310:	3ee00000 	.word	0x3ee00000
  400314:	3f200000 	.word	0x3f200000
  400318:	004026cd 	.word	0x004026cd
  40031c:	00402f65 	.word	0x00402f65
  400320:	40b40000 	.word	0x40b40000
  400324:	00402c85 	.word	0x00402c85
  400328:	c0440000 	.word	0xc0440000
  40032c:	00402f15 	.word	0x00402f15
  400330:	40554000 	.word	0x40554000
  400334:	00402f51 	.word	0x00402f51

00400338 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
  400338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40033c:	b085      	sub	sp, #20
  40033e:	4682      	mov	sl, r0
  400340:	460c      	mov	r4, r1
    double var3;
    double pressure;
    double pressure_min = 30000.0;
    double pressure_max = 110000.0;

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
  400342:	4f83      	ldr	r7, [pc, #524]	; (400550 <compensate_pressure+0x218>)
  400344:	6a48      	ldr	r0, [r1, #36]	; 0x24
  400346:	47b8      	blx	r7
  400348:	4d82      	ldr	r5, [pc, #520]	; (400554 <compensate_pressure+0x21c>)
  40034a:	2200      	movs	r2, #0
  40034c:	4b82      	ldr	r3, [pc, #520]	; (400558 <compensate_pressure+0x220>)
  40034e:	47a8      	blx	r5
  400350:	2200      	movs	r2, #0
  400352:	4b82      	ldr	r3, [pc, #520]	; (40055c <compensate_pressure+0x224>)
  400354:	4e82      	ldr	r6, [pc, #520]	; (400560 <compensate_pressure+0x228>)
  400356:	47b0      	blx	r6
  400358:	e9cd 0100 	strd	r0, r1, [sp]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
  40035c:	4602      	mov	r2, r0
  40035e:	460b      	mov	r3, r1
  400360:	47a8      	blx	r5
  400362:	4680      	mov	r8, r0
  400364:	4689      	mov	r9, r1
  400366:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  40036a:	47b8      	blx	r7
  40036c:	4602      	mov	r2, r0
  40036e:	460b      	mov	r3, r1
  400370:	4640      	mov	r0, r8
  400372:	4649      	mov	r1, r9
  400374:	47a8      	blx	r5
  400376:	2200      	movs	r2, #0
  400378:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  40037c:	47a8      	blx	r5
  40037e:	4680      	mov	r8, r0
  400380:	4689      	mov	r9, r1
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
  400382:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
  400386:	47b8      	blx	r7
  400388:	4602      	mov	r2, r0
  40038a:	460b      	mov	r3, r1
  40038c:	e9dd 0100 	ldrd	r0, r1, [sp]
  400390:	47a8      	blx	r5
  400392:	4e74      	ldr	r6, [pc, #464]	; (400564 <compensate_pressure+0x22c>)
  400394:	4602      	mov	r2, r0
  400396:	460b      	mov	r3, r1
  400398:	47b0      	blx	r6
  40039a:	4602      	mov	r2, r0
  40039c:	460b      	mov	r3, r1
  40039e:	4640      	mov	r0, r8
  4003a0:	4649      	mov	r1, r9
  4003a2:	47b0      	blx	r6
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
  4003a4:	2200      	movs	r2, #0
  4003a6:	4b70      	ldr	r3, [pc, #448]	; (400568 <compensate_pressure+0x230>)
  4003a8:	47a8      	blx	r5
  4003aa:	4680      	mov	r8, r0
  4003ac:	4689      	mov	r9, r1
  4003ae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4003b2:	47b8      	blx	r7
  4003b4:	2200      	movs	r2, #0
  4003b6:	4b6d      	ldr	r3, [pc, #436]	; (40056c <compensate_pressure+0x234>)
  4003b8:	47a8      	blx	r5
  4003ba:	4602      	mov	r2, r0
  4003bc:	460b      	mov	r3, r1
  4003be:	4640      	mov	r0, r8
  4003c0:	4649      	mov	r1, r9
  4003c2:	47b0      	blx	r6
  4003c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
  4003c8:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  4003cc:	47b8      	blx	r7
  4003ce:	4602      	mov	r2, r0
  4003d0:	460b      	mov	r3, r1
  4003d2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4003d6:	47a8      	blx	r5
  4003d8:	4602      	mov	r2, r0
  4003da:	460b      	mov	r3, r1
  4003dc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4003e0:	47a8      	blx	r5
  4003e2:	2200      	movs	r2, #0
  4003e4:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
  4003e8:	47a8      	blx	r5
  4003ea:	4680      	mov	r8, r0
  4003ec:	4689      	mov	r9, r1
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
  4003ee:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  4003f2:	47b8      	blx	r7
  4003f4:	4602      	mov	r2, r0
  4003f6:	460b      	mov	r3, r1
  4003f8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4003fc:	47a8      	blx	r5
  4003fe:	4602      	mov	r2, r0
  400400:	460b      	mov	r3, r1
  400402:	4640      	mov	r0, r8
  400404:	4649      	mov	r1, r9
  400406:	47b0      	blx	r6
  400408:	2200      	movs	r2, #0
  40040a:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
  40040e:	47a8      	blx	r5
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
  400410:	2200      	movs	r2, #0
  400412:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  400416:	47a8      	blx	r5
  400418:	2200      	movs	r2, #0
  40041a:	4b55      	ldr	r3, [pc, #340]	; (400570 <compensate_pressure+0x238>)
  40041c:	47b0      	blx	r6
  40041e:	4606      	mov	r6, r0
  400420:	460f      	mov	r7, r1
  400422:	88e0      	ldrh	r0, [r4, #6]
  400424:	4b53      	ldr	r3, [pc, #332]	; (400574 <compensate_pressure+0x23c>)
  400426:	4798      	blx	r3
  400428:	4602      	mov	r2, r0
  40042a:	460b      	mov	r3, r1
  40042c:	4630      	mov	r0, r6
  40042e:	4639      	mov	r1, r7
  400430:	47a8      	blx	r5
  400432:	4680      	mov	r8, r0
  400434:	4689      	mov	r9, r1

    /* Avoid exception caused by division by zero */
    if (var1 > (0.0))
  400436:	2200      	movs	r2, #0
  400438:	2300      	movs	r3, #0
  40043a:	4d4f      	ldr	r5, [pc, #316]	; (400578 <compensate_pressure+0x240>)
  40043c:	47a8      	blx	r5
  40043e:	2800      	cmp	r0, #0
  400440:	d06c      	beq.n	40051c <compensate_pressure+0x1e4>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
  400442:	f8da 0000 	ldr.w	r0, [sl]
  400446:	4b4b      	ldr	r3, [pc, #300]	; (400574 <compensate_pressure+0x23c>)
  400448:	4798      	blx	r3
  40044a:	4e45      	ldr	r6, [pc, #276]	; (400560 <compensate_pressure+0x228>)
  40044c:	4602      	mov	r2, r0
  40044e:	460b      	mov	r3, r1
  400450:	2000      	movs	r0, #0
  400452:	494a      	ldr	r1, [pc, #296]	; (40057c <compensate_pressure+0x244>)
  400454:	47b0      	blx	r6
  400456:	4682      	mov	sl, r0
  400458:	468b      	mov	fp, r1
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
  40045a:	4d3e      	ldr	r5, [pc, #248]	; (400554 <compensate_pressure+0x21c>)
  40045c:	2200      	movs	r2, #0
  40045e:	4b48      	ldr	r3, [pc, #288]	; (400580 <compensate_pressure+0x248>)
  400460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400464:	47a8      	blx	r5
  400466:	4602      	mov	r2, r0
  400468:	460b      	mov	r3, r1
  40046a:	4650      	mov	r0, sl
  40046c:	4659      	mov	r1, fp
  40046e:	47b0      	blx	r6
  400470:	a331      	add	r3, pc, #196	; (adr r3, 400538 <compensate_pressure+0x200>)
  400472:	e9d3 2300 	ldrd	r2, r3, [r3]
  400476:	47a8      	blx	r5
  400478:	4642      	mov	r2, r8
  40047a:	464b      	mov	r3, r9
  40047c:	4e41      	ldr	r6, [pc, #260]	; (400584 <compensate_pressure+0x24c>)
  40047e:	47b0      	blx	r6
  400480:	4680      	mov	r8, r0
  400482:	4689      	mov	r9, r1
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
  400484:	4f32      	ldr	r7, [pc, #200]	; (400550 <compensate_pressure+0x218>)
  400486:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
  40048a:	47b8      	blx	r7
  40048c:	4602      	mov	r2, r0
  40048e:	460b      	mov	r3, r1
  400490:	4640      	mov	r0, r8
  400492:	4649      	mov	r1, r9
  400494:	47a8      	blx	r5
  400496:	4602      	mov	r2, r0
  400498:	460b      	mov	r3, r1
  40049a:	4640      	mov	r0, r8
  40049c:	4649      	mov	r1, r9
  40049e:	47a8      	blx	r5
  4004a0:	2200      	movs	r2, #0
  4004a2:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
  4004a6:	47a8      	blx	r5
  4004a8:	4682      	mov	sl, r0
  4004aa:	468b      	mov	fp, r1
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
  4004ac:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
  4004b0:	47b8      	blx	r7
  4004b2:	4602      	mov	r2, r0
  4004b4:	460b      	mov	r3, r1
  4004b6:	4640      	mov	r0, r8
  4004b8:	4649      	mov	r1, r9
  4004ba:	47a8      	blx	r5
  4004bc:	2200      	movs	r2, #0
  4004be:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4004c2:	47a8      	blx	r5
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
  4004c4:	4e27      	ldr	r6, [pc, #156]	; (400564 <compensate_pressure+0x22c>)
  4004c6:	4602      	mov	r2, r0
  4004c8:	460b      	mov	r3, r1
  4004ca:	4650      	mov	r0, sl
  4004cc:	4659      	mov	r1, fp
  4004ce:	47b0      	blx	r6
  4004d0:	4682      	mov	sl, r0
  4004d2:	468b      	mov	fp, r1
  4004d4:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
  4004d8:	47b8      	blx	r7
  4004da:	4602      	mov	r2, r0
  4004dc:	460b      	mov	r3, r1
  4004de:	4650      	mov	r0, sl
  4004e0:	4659      	mov	r1, fp
  4004e2:	47b0      	blx	r6
  4004e4:	2200      	movs	r2, #0
  4004e6:	4b28      	ldr	r3, [pc, #160]	; (400588 <compensate_pressure+0x250>)
  4004e8:	47a8      	blx	r5
  4004ea:	4602      	mov	r2, r0
  4004ec:	460b      	mov	r3, r1
  4004ee:	4640      	mov	r0, r8
  4004f0:	4649      	mov	r1, r9
  4004f2:	47b0      	blx	r6
  4004f4:	4604      	mov	r4, r0
  4004f6:	460d      	mov	r5, r1

        if (pressure < pressure_min)
  4004f8:	a311      	add	r3, pc, #68	; (adr r3, 400540 <compensate_pressure+0x208>)
  4004fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004fe:	4e23      	ldr	r6, [pc, #140]	; (40058c <compensate_pressure+0x254>)
  400500:	47b0      	blx	r6
  400502:	b978      	cbnz	r0, 400524 <compensate_pressure+0x1ec>
        {
            pressure = pressure_min;
        }
        else if (pressure > pressure_max)
  400504:	a310      	add	r3, pc, #64	; (adr r3, 400548 <compensate_pressure+0x210>)
  400506:	e9d3 2300 	ldrd	r2, r3, [r3]
  40050a:	4620      	mov	r0, r4
  40050c:	4629      	mov	r1, r5
  40050e:	4e1a      	ldr	r6, [pc, #104]	; (400578 <compensate_pressure+0x240>)
  400510:	47b0      	blx	r6
  400512:	b150      	cbz	r0, 40052a <compensate_pressure+0x1f2>
        {
            pressure = pressure_max;
  400514:	a50c      	add	r5, pc, #48	; (adr r5, 400548 <compensate_pressure+0x210>)
  400516:	e9d5 4500 	ldrd	r4, r5, [r5]
    else /* Invalid case */
    {
        pressure = pressure_min;
    }

    return pressure;
  40051a:	e006      	b.n	40052a <compensate_pressure+0x1f2>
        pressure = pressure_min;
  40051c:	a508      	add	r5, pc, #32	; (adr r5, 400540 <compensate_pressure+0x208>)
  40051e:	e9d5 4500 	ldrd	r4, r5, [r5]
  400522:	e002      	b.n	40052a <compensate_pressure+0x1f2>
            pressure = pressure_min;
  400524:	a506      	add	r5, pc, #24	; (adr r5, 400540 <compensate_pressure+0x208>)
  400526:	e9d5 4500 	ldrd	r4, r5, [r5]
}
  40052a:	4620      	mov	r0, r4
  40052c:	4629      	mov	r1, r5
  40052e:	b005      	add	sp, #20
  400530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400534:	f3af 8000 	nop.w
  400538:	00000000 	.word	0x00000000
  40053c:	40b86a00 	.word	0x40b86a00
  400540:	00000000 	.word	0x00000000
  400544:	40dd4c00 	.word	0x40dd4c00
  400548:	00000000 	.word	0x00000000
  40054c:	40fadb00 	.word	0x40fadb00
  400550:	00402965 	.word	0x00402965
  400554:	00402a31 	.word	0x00402a31
  400558:	3fe00000 	.word	0x3fe00000
  40055c:	40ef4000 	.word	0x40ef4000
  400560:	004026c9 	.word	0x004026c9
  400564:	004026cd 	.word	0x004026cd
  400568:	3fd00000 	.word	0x3fd00000
  40056c:	40f00000 	.word	0x40f00000
  400570:	3ff00000 	.word	0x3ff00000
  400574:	00402945 	.word	0x00402945
  400578:	00402f51 	.word	0x00402f51
  40057c:	41300000 	.word	0x41300000
  400580:	3f300000 	.word	0x3f300000
  400584:	00402c85 	.word	0x00402c85
  400588:	3fb00000 	.word	0x3fb00000
  40058c:	00402f15 	.word	0x00402f15

00400590 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
  400590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400594:	b087      	sub	sp, #28
  400596:	4683      	mov	fp, r0
  400598:	460d      	mov	r5, r1
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
  40059a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 400704 <compensate_humidity+0x174>
  40059e:	6a48      	ldr	r0, [r1, #36]	; 0x24
  4005a0:	47c0      	blx	r8
  4005a2:	4e4c      	ldr	r6, [pc, #304]	; (4006d4 <compensate_humidity+0x144>)
  4005a4:	2200      	movs	r2, #0
  4005a6:	4b4c      	ldr	r3, [pc, #304]	; (4006d8 <compensate_humidity+0x148>)
  4005a8:	47b0      	blx	r6
  4005aa:	e9cd 0100 	strd	r0, r1, [sp]
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
  4005ae:	f9b5 001e 	ldrsh.w	r0, [r5, #30]
  4005b2:	47c0      	blx	r8
  4005b4:	4c49      	ldr	r4, [pc, #292]	; (4006dc <compensate_humidity+0x14c>)
  4005b6:	2200      	movs	r2, #0
  4005b8:	4b49      	ldr	r3, [pc, #292]	; (4006e0 <compensate_humidity+0x150>)
  4005ba:	47a0      	blx	r4
  4005bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4005c0:	f9b5 0020 	ldrsh.w	r0, [r5, #32]
  4005c4:	47c0      	blx	r8
  4005c6:	2200      	movs	r2, #0
  4005c8:	4b46      	ldr	r3, [pc, #280]	; (4006e4 <compensate_humidity+0x154>)
  4005ca:	47a0      	blx	r4
  4005cc:	4602      	mov	r2, r0
  4005ce:	460b      	mov	r3, r1
  4005d0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4005d4:	47a0      	blx	r4
  4005d6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 400708 <compensate_humidity+0x178>
  4005da:	4602      	mov	r2, r0
  4005dc:	460b      	mov	r3, r1
  4005de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4005e2:	47c8      	blx	r9
  4005e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    var3 = uncomp_data->humidity - var2;
  4005e8:	4f3f      	ldr	r7, [pc, #252]	; (4006e8 <compensate_humidity+0x158>)
  4005ea:	f8db 0008 	ldr.w	r0, [fp, #8]
  4005ee:	47b8      	blx	r7
  4005f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4005f4:	47b0      	blx	r6
  4005f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
  4005fa:	f9b5 001a 	ldrsh.w	r0, [r5, #26]
  4005fe:	47c0      	blx	r8
  400600:	2200      	movs	r2, #0
  400602:	4b3a      	ldr	r3, [pc, #232]	; (4006ec <compensate_humidity+0x15c>)
  400604:	47a0      	blx	r4
  400606:	e9cd 0104 	strd	r0, r1, [sp, #16]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
  40060a:	7f28      	ldrb	r0, [r5, #28]
  40060c:	47b8      	blx	r7
  40060e:	2200      	movs	r2, #0
  400610:	4b37      	ldr	r3, [pc, #220]	; (4006f0 <compensate_humidity+0x160>)
  400612:	47a0      	blx	r4
  400614:	4602      	mov	r2, r0
  400616:	460b      	mov	r3, r1
  400618:	e9dd 0100 	ldrd	r0, r1, [sp]
  40061c:	47a0      	blx	r4
  40061e:	2200      	movs	r2, #0
  400620:	4b34      	ldr	r3, [pc, #208]	; (4006f4 <compensate_humidity+0x164>)
  400622:	47c8      	blx	r9
  400624:	4682      	mov	sl, r0
  400626:	468b      	mov	fp, r1
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
  400628:	f995 0022 	ldrsb.w	r0, [r5, #34]	; 0x22
  40062c:	47c0      	blx	r8
  40062e:	2200      	movs	r2, #0
  400630:	4b2f      	ldr	r3, [pc, #188]	; (4006f0 <compensate_humidity+0x160>)
  400632:	47a0      	blx	r4
  400634:	4602      	mov	r2, r0
  400636:	460b      	mov	r3, r1
  400638:	e9dd 0100 	ldrd	r0, r1, [sp]
  40063c:	47a0      	blx	r4
  40063e:	4602      	mov	r2, r0
  400640:	460b      	mov	r3, r1
  400642:	4650      	mov	r0, sl
  400644:	4659      	mov	r1, fp
  400646:	47a0      	blx	r4
  400648:	2200      	movs	r2, #0
  40064a:	4b2a      	ldr	r3, [pc, #168]	; (4006f4 <compensate_humidity+0x164>)
  40064c:	47c8      	blx	r9
  40064e:	4680      	mov	r8, r0
  400650:	4689      	mov	r9, r1
    var6 = var3 * var4 * (var5 * var6);
  400652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40065a:	47a0      	blx	r4
  40065c:	e9cd 0100 	strd	r0, r1, [sp]
  400660:	4642      	mov	r2, r8
  400662:	464b      	mov	r3, r9
  400664:	4650      	mov	r0, sl
  400666:	4659      	mov	r1, fp
  400668:	47a0      	blx	r4
  40066a:	4602      	mov	r2, r0
  40066c:	460b      	mov	r3, r1
  40066e:	e9dd 0100 	ldrd	r0, r1, [sp]
  400672:	47a0      	blx	r4
  400674:	4680      	mov	r8, r0
  400676:	4689      	mov	r9, r1
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
  400678:	7e28      	ldrb	r0, [r5, #24]
  40067a:	47b8      	blx	r7
  40067c:	4602      	mov	r2, r0
  40067e:	460b      	mov	r3, r1
  400680:	4640      	mov	r0, r8
  400682:	4649      	mov	r1, r9
  400684:	47a0      	blx	r4
  400686:	2200      	movs	r2, #0
  400688:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
  40068c:	47a0      	blx	r4
  40068e:	4602      	mov	r2, r0
  400690:	460b      	mov	r3, r1
  400692:	2000      	movs	r0, #0
  400694:	4917      	ldr	r1, [pc, #92]	; (4006f4 <compensate_humidity+0x164>)
  400696:	47b0      	blx	r6
  400698:	4602      	mov	r2, r0
  40069a:	460b      	mov	r3, r1
  40069c:	4640      	mov	r0, r8
  40069e:	4649      	mov	r1, r9
  4006a0:	47a0      	blx	r4
  4006a2:	4604      	mov	r4, r0
  4006a4:	460d      	mov	r5, r1

    if (humidity > humidity_max)
  4006a6:	2200      	movs	r2, #0
  4006a8:	4b13      	ldr	r3, [pc, #76]	; (4006f8 <compensate_humidity+0x168>)
  4006aa:	4e14      	ldr	r6, [pc, #80]	; (4006fc <compensate_humidity+0x16c>)
  4006ac:	47b0      	blx	r6
  4006ae:	b948      	cbnz	r0, 4006c4 <compensate_humidity+0x134>
    {
        humidity = humidity_max;
    }
    else if (humidity < humidity_min)
  4006b0:	2200      	movs	r2, #0
  4006b2:	2300      	movs	r3, #0
  4006b4:	4620      	mov	r0, r4
  4006b6:	4629      	mov	r1, r5
  4006b8:	4e11      	ldr	r6, [pc, #68]	; (400700 <compensate_humidity+0x170>)
  4006ba:	47b0      	blx	r6
  4006bc:	b120      	cbz	r0, 4006c8 <compensate_humidity+0x138>
    {
        humidity = humidity_min;
  4006be:	2400      	movs	r4, #0
  4006c0:	2500      	movs	r5, #0
    }

    return humidity;
  4006c2:	e001      	b.n	4006c8 <compensate_humidity+0x138>
        humidity = humidity_max;
  4006c4:	2400      	movs	r4, #0
  4006c6:	4d0c      	ldr	r5, [pc, #48]	; (4006f8 <compensate_humidity+0x168>)
}
  4006c8:	4620      	mov	r0, r4
  4006ca:	4629      	mov	r1, r5
  4006cc:	b007      	add	sp, #28
  4006ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4006d2:	bf00      	nop
  4006d4:	004026c9 	.word	0x004026c9
  4006d8:	40f2c000 	.word	0x40f2c000
  4006dc:	00402a31 	.word	0x00402a31
  4006e0:	40500000 	.word	0x40500000
  4006e4:	3f100000 	.word	0x3f100000
  4006e8:	00402945 	.word	0x00402945
  4006ec:	3ef00000 	.word	0x3ef00000
  4006f0:	3e500000 	.word	0x3e500000
  4006f4:	3ff00000 	.word	0x3ff00000
  4006f8:	40590000 	.word	0x40590000
  4006fc:	00402f51 	.word	0x00402f51
  400700:	00402f15 	.word	0x00402f15
  400704:	00402965 	.word	0x00402965
  400708:	004026cd 	.word	0x004026cd

0040070c <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
  40070c:	b470      	push	{r4, r5, r6}
    uint32_t index;

    for (index = 1; index < len; index++)
  40070e:	2401      	movs	r4, #1
  400710:	e007      	b.n	400722 <interleave_reg_addr+0x16>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
  400712:	0065      	lsls	r5, r4, #1
  400714:	3d01      	subs	r5, #1
  400716:	5d06      	ldrb	r6, [r0, r4]
  400718:	554e      	strb	r6, [r1, r5]
        temp_buff[index * 2] = reg_data[index];
  40071a:	5d15      	ldrb	r5, [r2, r4]
  40071c:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
    for (index = 1; index < len; index++)
  400720:	3401      	adds	r4, #1
  400722:	429c      	cmp	r4, r3
  400724:	d3f5      	bcc.n	400712 <interleave_reg_addr+0x6>
    }
}
  400726:	bc70      	pop	{r4, r5, r6}
  400728:	4770      	bx	lr

0040072a <parse_temp_press_calib_data>:
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
    struct bme280_calib_data *calib_data = &dev->calib_data;

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
  40072a:	7842      	ldrb	r2, [r0, #1]
  40072c:	7803      	ldrb	r3, [r0, #0]
  40072e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400732:	830b      	strh	r3, [r1, #24]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
  400734:	78c2      	ldrb	r2, [r0, #3]
  400736:	7883      	ldrb	r3, [r0, #2]
  400738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40073c:	834b      	strh	r3, [r1, #26]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
  40073e:	7942      	ldrb	r2, [r0, #5]
  400740:	7903      	ldrb	r3, [r0, #4]
  400742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400746:	838b      	strh	r3, [r1, #28]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
  400748:	79c2      	ldrb	r2, [r0, #7]
  40074a:	7983      	ldrb	r3, [r0, #6]
  40074c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400750:	83cb      	strh	r3, [r1, #30]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
  400752:	7a42      	ldrb	r2, [r0, #9]
  400754:	7a03      	ldrb	r3, [r0, #8]
  400756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40075a:	840b      	strh	r3, [r1, #32]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
  40075c:	7ac2      	ldrb	r2, [r0, #11]
  40075e:	7a83      	ldrb	r3, [r0, #10]
  400760:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400764:	844b      	strh	r3, [r1, #34]	; 0x22
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
  400766:	7b42      	ldrb	r2, [r0, #13]
  400768:	7b03      	ldrb	r3, [r0, #12]
  40076a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40076e:	848b      	strh	r3, [r1, #36]	; 0x24
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
  400770:	7bc2      	ldrb	r2, [r0, #15]
  400772:	7b83      	ldrb	r3, [r0, #14]
  400774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400778:	84cb      	strh	r3, [r1, #38]	; 0x26
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
  40077a:	7c42      	ldrb	r2, [r0, #17]
  40077c:	7c03      	ldrb	r3, [r0, #16]
  40077e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400782:	850b      	strh	r3, [r1, #40]	; 0x28
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
  400784:	7cc2      	ldrb	r2, [r0, #19]
  400786:	7c83      	ldrb	r3, [r0, #18]
  400788:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40078c:	854b      	strh	r3, [r1, #42]	; 0x2a
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
  40078e:	7d42      	ldrb	r2, [r0, #21]
  400790:	7d03      	ldrb	r3, [r0, #20]
  400792:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400796:	858b      	strh	r3, [r1, #44]	; 0x2c
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
  400798:	7dc2      	ldrb	r2, [r0, #23]
  40079a:	7d83      	ldrb	r3, [r0, #22]
  40079c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007a0:	85cb      	strh	r3, [r1, #46]	; 0x2e
    calib_data->dig_h1 = reg_data[25];
  4007a2:	7e43      	ldrb	r3, [r0, #25]
  4007a4:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
  4007a8:	4770      	bx	lr

004007aa <parse_humidity_calib_data>:
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
  4007aa:	7842      	ldrb	r2, [r0, #1]
  4007ac:	7803      	ldrb	r3, [r0, #0]
  4007ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007b2:	864b      	strh	r3, [r1, #50]	; 0x32
    calib_data->dig_h3 = reg_data[2];
  4007b4:	7883      	ldrb	r3, [r0, #2]
  4007b6:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
  4007ba:	f990 3003 	ldrsb.w	r3, [r0, #3]
  4007be:	b29b      	uxth	r3, r3
  4007c0:	011b      	lsls	r3, r3, #4
  4007c2:	b21b      	sxth	r3, r3
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
  4007c4:	7902      	ldrb	r2, [r0, #4]
  4007c6:	f002 020f 	and.w	r2, r2, #15
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
  4007ca:	4313      	orrs	r3, r2
  4007cc:	86cb      	strh	r3, [r1, #54]	; 0x36
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
  4007ce:	f990 3005 	ldrsb.w	r3, [r0, #5]
  4007d2:	b29b      	uxth	r3, r3
  4007d4:	011b      	lsls	r3, r3, #4
  4007d6:	b21b      	sxth	r3, r3
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
  4007d8:	7902      	ldrb	r2, [r0, #4]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
  4007da:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
  4007de:	870b      	strh	r3, [r1, #56]	; 0x38
    calib_data->dig_h6 = (int8_t)reg_data[6];
  4007e0:	f990 3006 	ldrsb.w	r3, [r0, #6]
  4007e4:	f881 303a 	strb.w	r3, [r1, #58]	; 0x3a
  4007e8:	4770      	bx	lr

004007ea <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
  4007ea:	b150      	cbz	r0, 400802 <null_ptr_check+0x18>
  4007ec:	68c2      	ldr	r2, [r0, #12]
  4007ee:	b15a      	cbz	r2, 400808 <null_ptr_check+0x1e>
  4007f0:	6902      	ldr	r2, [r0, #16]
  4007f2:	b162      	cbz	r2, 40080e <null_ptr_check+0x24>
  4007f4:	6943      	ldr	r3, [r0, #20]
  4007f6:	b10b      	cbz	r3, 4007fc <null_ptr_check+0x12>
        rslt = BME280_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
  4007f8:	2000      	movs	r0, #0
    }

    return rslt;
}
  4007fa:	4770      	bx	lr
        rslt = BME280_E_NULL_PTR;
  4007fc:	f04f 30ff 	mov.w	r0, #4294967295
  400800:	4770      	bx	lr
  400802:	f04f 30ff 	mov.w	r0, #4294967295
  400806:	4770      	bx	lr
  400808:	f04f 30ff 	mov.w	r0, #4294967295
  40080c:	4770      	bx	lr
  40080e:	f04f 30ff 	mov.w	r0, #4294967295
  400812:	4770      	bx	lr

00400814 <bme280_get_regs>:
{
  400814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400818:	4605      	mov	r5, r0
  40081a:	460e      	mov	r6, r1
  40081c:	4691      	mov	r9, r2
  40081e:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
  400820:	4618      	mov	r0, r3
  400822:	4b10      	ldr	r3, [pc, #64]	; (400864 <bme280_get_regs+0x50>)
  400824:	4798      	blx	r3
    if ((rslt == BME280_OK) && (reg_data != NULL))
  400826:	4680      	mov	r8, r0
  400828:	fab0 f080 	clz	r0, r0
  40082c:	0940      	lsrs	r0, r0, #5
  40082e:	2e00      	cmp	r6, #0
  400830:	bf08      	it	eq
  400832:	2000      	moveq	r0, #0
  400834:	b178      	cbz	r0, 400856 <bme280_get_regs+0x42>
        if (dev->intf != BME280_I2C_INTF)
  400836:	7863      	ldrb	r3, [r4, #1]
  400838:	2b01      	cmp	r3, #1
  40083a:	d001      	beq.n	400840 <bme280_get_regs+0x2c>
            reg_addr = reg_addr | 0x80;
  40083c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
  400840:	68e7      	ldr	r7, [r4, #12]
  400842:	6863      	ldr	r3, [r4, #4]
  400844:	464a      	mov	r2, r9
  400846:	4631      	mov	r1, r6
  400848:	4628      	mov	r0, r5
  40084a:	47b8      	blx	r7
  40084c:	7220      	strb	r0, [r4, #8]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
  40084e:	b928      	cbnz	r0, 40085c <bme280_get_regs+0x48>
}
  400850:	4640      	mov	r0, r8
  400852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        rslt = BME280_E_NULL_PTR;
  400856:	f04f 38ff 	mov.w	r8, #4294967295
  40085a:	e7f9      	b.n	400850 <bme280_get_regs+0x3c>
            rslt = BME280_E_COMM_FAIL;
  40085c:	f06f 0801 	mvn.w	r8, #1
  400860:	e7f6      	b.n	400850 <bme280_get_regs+0x3c>
  400862:	bf00      	nop
  400864:	004007eb 	.word	0x004007eb

00400868 <get_calib_data>:
{
  400868:	b530      	push	{r4, r5, lr}
  40086a:	b089      	sub	sp, #36	; 0x24
  40086c:	4604      	mov	r4, r0
    uint8_t calib_data[BME280_LEN_TEMP_PRESS_CALIB_DATA] = { 0 };
  40086e:	2300      	movs	r3, #0
  400870:	9301      	str	r3, [sp, #4]
  400872:	9302      	str	r3, [sp, #8]
  400874:	9303      	str	r3, [sp, #12]
  400876:	9304      	str	r3, [sp, #16]
  400878:	9305      	str	r3, [sp, #20]
  40087a:	9306      	str	r3, [sp, #24]
  40087c:	f8ad 301c 	strh.w	r3, [sp, #28]
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_TEMP_PRESS_CALIB_DATA, dev);
  400880:	4603      	mov	r3, r0
  400882:	221a      	movs	r2, #26
  400884:	a901      	add	r1, sp, #4
  400886:	2088      	movs	r0, #136	; 0x88
  400888:	4d0c      	ldr	r5, [pc, #48]	; (4008bc <get_calib_data+0x54>)
  40088a:	47a8      	blx	r5
    if (rslt == BME280_OK)
  40088c:	4605      	mov	r5, r0
  40088e:	b110      	cbz	r0, 400896 <get_calib_data+0x2e>
}
  400890:	4628      	mov	r0, r5
  400892:	b009      	add	sp, #36	; 0x24
  400894:	bd30      	pop	{r4, r5, pc}
        parse_temp_press_calib_data(calib_data, dev);
  400896:	4621      	mov	r1, r4
  400898:	a801      	add	r0, sp, #4
  40089a:	4b09      	ldr	r3, [pc, #36]	; (4008c0 <get_calib_data+0x58>)
  40089c:	4798      	blx	r3
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_HUMIDITY_CALIB_DATA, dev);
  40089e:	4623      	mov	r3, r4
  4008a0:	2207      	movs	r2, #7
  4008a2:	a901      	add	r1, sp, #4
  4008a4:	20e1      	movs	r0, #225	; 0xe1
  4008a6:	4d05      	ldr	r5, [pc, #20]	; (4008bc <get_calib_data+0x54>)
  4008a8:	47a8      	blx	r5
        if (rslt == BME280_OK)
  4008aa:	4605      	mov	r5, r0
  4008ac:	2800      	cmp	r0, #0
  4008ae:	d1ef      	bne.n	400890 <get_calib_data+0x28>
            parse_humidity_calib_data(calib_data, dev);
  4008b0:	4621      	mov	r1, r4
  4008b2:	a801      	add	r0, sp, #4
  4008b4:	4b03      	ldr	r3, [pc, #12]	; (4008c4 <get_calib_data+0x5c>)
  4008b6:	4798      	blx	r3
  4008b8:	e7ea      	b.n	400890 <get_calib_data+0x28>
  4008ba:	bf00      	nop
  4008bc:	00400815 	.word	0x00400815
  4008c0:	0040072b 	.word	0x0040072b
  4008c4:	004007ab 	.word	0x004007ab

004008c8 <bme280_set_regs>:
{
  4008c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008cc:	b086      	sub	sp, #24
  4008ce:	4604      	mov	r4, r0
  4008d0:	460f      	mov	r7, r1
  4008d2:	4615      	mov	r5, r2
  4008d4:	461e      	mov	r6, r3
    if (len > BME280_MAX_LEN)
  4008d6:	2a0a      	cmp	r2, #10
  4008d8:	d900      	bls.n	4008dc <bme280_set_regs+0x14>
        len = BME280_MAX_LEN;
  4008da:	250a      	movs	r5, #10
    rslt = null_ptr_check(dev);
  4008dc:	4630      	mov	r0, r6
  4008de:	4b1e      	ldr	r3, [pc, #120]	; (400958 <bme280_set_regs+0x90>)
  4008e0:	4798      	blx	r3
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
  4008e2:	4680      	mov	r8, r0
  4008e4:	fab0 f080 	clz	r0, r0
  4008e8:	0940      	lsrs	r0, r0, #5
  4008ea:	2c00      	cmp	r4, #0
  4008ec:	bf08      	it	eq
  4008ee:	2000      	moveq	r0, #0
  4008f0:	b330      	cbz	r0, 400940 <bme280_set_regs+0x78>
  4008f2:	b347      	cbz	r7, 400946 <bme280_set_regs+0x7e>
        if (len != 0)
  4008f4:	b355      	cbz	r5, 40094c <bme280_set_regs+0x84>
            temp_buff[0] = reg_data[0];
  4008f6:	783b      	ldrb	r3, [r7, #0]
  4008f8:	f88d 3004 	strb.w	r3, [sp, #4]
            if (dev->intf != BME280_I2C_INTF)
  4008fc:	7873      	ldrb	r3, [r6, #1]
  4008fe:	2b01      	cmp	r3, #1
  400900:	d008      	beq.n	400914 <bme280_set_regs+0x4c>
  400902:	2300      	movs	r3, #0
  400904:	e004      	b.n	400910 <bme280_set_regs+0x48>
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
  400906:	5ce2      	ldrb	r2, [r4, r3]
  400908:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  40090c:	54e2      	strb	r2, [r4, r3]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
  40090e:	3301      	adds	r3, #1
  400910:	429d      	cmp	r5, r3
  400912:	d8f8      	bhi.n	400906 <bme280_set_regs+0x3e>
            if (len > 1)
  400914:	2d01      	cmp	r5, #1
  400916:	d907      	bls.n	400928 <bme280_set_regs+0x60>
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
  400918:	462b      	mov	r3, r5
  40091a:	463a      	mov	r2, r7
  40091c:	a901      	add	r1, sp, #4
  40091e:	4620      	mov	r0, r4
  400920:	4f0e      	ldr	r7, [pc, #56]	; (40095c <bme280_set_regs+0x94>)
  400922:	47b8      	blx	r7
                temp_len = ((len * 2) - 1);
  400924:	006d      	lsls	r5, r5, #1
  400926:	3d01      	subs	r5, #1
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
  400928:	6937      	ldr	r7, [r6, #16]
  40092a:	6873      	ldr	r3, [r6, #4]
  40092c:	462a      	mov	r2, r5
  40092e:	a901      	add	r1, sp, #4
  400930:	7820      	ldrb	r0, [r4, #0]
  400932:	47b8      	blx	r7
  400934:	7230      	strb	r0, [r6, #8]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
  400936:	b960      	cbnz	r0, 400952 <bme280_set_regs+0x8a>
}
  400938:	4640      	mov	r0, r8
  40093a:	b006      	add	sp, #24
  40093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rslt = BME280_E_NULL_PTR;
  400940:	f04f 38ff 	mov.w	r8, #4294967295
  400944:	e7f8      	b.n	400938 <bme280_set_regs+0x70>
  400946:	f04f 38ff 	mov.w	r8, #4294967295
  40094a:	e7f5      	b.n	400938 <bme280_set_regs+0x70>
            rslt = BME280_E_INVALID_LEN;
  40094c:	f06f 0802 	mvn.w	r8, #2
  400950:	e7f2      	b.n	400938 <bme280_set_regs+0x70>
                rslt = BME280_E_COMM_FAIL;
  400952:	f06f 0801 	mvn.w	r8, #1
  400956:	e7ef      	b.n	400938 <bme280_set_regs+0x70>
  400958:	004007eb 	.word	0x004007eb
  40095c:	0040070d 	.word	0x0040070d

00400960 <bme280_soft_reset>:
{
  400960:	b570      	push	{r4, r5, r6, lr}
  400962:	b082      	sub	sp, #8
  400964:	4604      	mov	r4, r0
    uint8_t reg_addr = BME280_REG_RESET;
  400966:	23e0      	movs	r3, #224	; 0xe0
  400968:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t status_reg = 0;
  40096c:	2300      	movs	r3, #0
  40096e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
  400972:	a902      	add	r1, sp, #8
  400974:	23b6      	movs	r3, #182	; 0xb6
  400976:	f801 3d03 	strb.w	r3, [r1, #-3]!
    rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
  40097a:	4603      	mov	r3, r0
  40097c:	2201      	movs	r2, #1
  40097e:	f10d 0007 	add.w	r0, sp, #7
  400982:	4d14      	ldr	r5, [pc, #80]	; (4009d4 <bme280_soft_reset+0x74>)
  400984:	47a8      	blx	r5
    if (rslt == BME280_OK)
  400986:	4602      	mov	r2, r0
  400988:	b9e8      	cbnz	r0, 4009c6 <bme280_soft_reset+0x66>
  40098a:	2505      	movs	r5, #5
  40098c:	e000      	b.n	400990 <bme280_soft_reset+0x30>
        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
  40098e:	461d      	mov	r5, r3
            dev->delay_us(BME280_STARTUP_DELAY, dev->intf_ptr);
  400990:	6963      	ldr	r3, [r4, #20]
  400992:	6861      	ldr	r1, [r4, #4]
  400994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400998:	4798      	blx	r3
            rslt = bme280_get_regs(BME280_REG_STATUS, &status_reg, 1, dev);
  40099a:	4623      	mov	r3, r4
  40099c:	2201      	movs	r2, #1
  40099e:	f10d 0106 	add.w	r1, sp, #6
  4009a2:	20f3      	movs	r0, #243	; 0xf3
  4009a4:	4e0c      	ldr	r6, [pc, #48]	; (4009d8 <bme280_soft_reset+0x78>)
  4009a6:	47b0      	blx	r6
        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
  4009a8:	4602      	mov	r2, r0
  4009aa:	b938      	cbnz	r0, 4009bc <bme280_soft_reset+0x5c>
  4009ac:	1e6b      	subs	r3, r5, #1
  4009ae:	b2db      	uxtb	r3, r3
  4009b0:	b125      	cbz	r5, 4009bc <bme280_soft_reset+0x5c>
  4009b2:	f89d 1006 	ldrb.w	r1, [sp, #6]
  4009b6:	f011 0f01 	tst.w	r1, #1
  4009ba:	d1e8      	bne.n	40098e <bme280_soft_reset+0x2e>
        if (status_reg & BME280_STATUS_IM_UPDATE)
  4009bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
  4009c0:	f013 0f01 	tst.w	r3, #1
  4009c4:	d102      	bne.n	4009cc <bme280_soft_reset+0x6c>
}
  4009c6:	4610      	mov	r0, r2
  4009c8:	b002      	add	sp, #8
  4009ca:	bd70      	pop	{r4, r5, r6, pc}
            rslt = BME280_E_NVM_COPY_FAILED;
  4009cc:	f06f 0205 	mvn.w	r2, #5
  4009d0:	e7f9      	b.n	4009c6 <bme280_soft_reset+0x66>
  4009d2:	bf00      	nop
  4009d4:	004008c9 	.word	0x004008c9
  4009d8:	00400815 	.word	0x00400815

004009dc <bme280_init>:
{
  4009dc:	b530      	push	{r4, r5, lr}
  4009de:	b083      	sub	sp, #12
  4009e0:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
  4009e2:	a902      	add	r1, sp, #8
  4009e4:	2300      	movs	r3, #0
  4009e6:	f801 3d01 	strb.w	r3, [r1, #-1]!
    rslt = bme280_get_regs(BME280_REG_CHIP_ID, &chip_id, 1, dev);
  4009ea:	4603      	mov	r3, r0
  4009ec:	2201      	movs	r2, #1
  4009ee:	20d0      	movs	r0, #208	; 0xd0
  4009f0:	4d0c      	ldr	r5, [pc, #48]	; (400a24 <bme280_init+0x48>)
  4009f2:	47a8      	blx	r5
    if (rslt == BME280_OK)
  4009f4:	4603      	mov	r3, r0
  4009f6:	b948      	cbnz	r0, 400a0c <bme280_init+0x30>
        if (chip_id == BME280_CHIP_ID)
  4009f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4009fc:	2b60      	cmp	r3, #96	; 0x60
  4009fe:	d10d      	bne.n	400a1c <bme280_init+0x40>
            dev->chip_id = chip_id;
  400a00:	7023      	strb	r3, [r4, #0]
            rslt = bme280_soft_reset(dev);
  400a02:	4620      	mov	r0, r4
  400a04:	4b08      	ldr	r3, [pc, #32]	; (400a28 <bme280_init+0x4c>)
  400a06:	4798      	blx	r3
            if (rslt == BME280_OK)
  400a08:	4603      	mov	r3, r0
  400a0a:	b110      	cbz	r0, 400a12 <bme280_init+0x36>
}
  400a0c:	4618      	mov	r0, r3
  400a0e:	b003      	add	sp, #12
  400a10:	bd30      	pop	{r4, r5, pc}
                rslt = get_calib_data(dev);
  400a12:	4620      	mov	r0, r4
  400a14:	4b05      	ldr	r3, [pc, #20]	; (400a2c <bme280_init+0x50>)
  400a16:	4798      	blx	r3
  400a18:	4603      	mov	r3, r0
  400a1a:	e7f7      	b.n	400a0c <bme280_init+0x30>
            rslt = BME280_E_DEV_NOT_FOUND;
  400a1c:	f06f 0303 	mvn.w	r3, #3
  400a20:	e7f4      	b.n	400a0c <bme280_init+0x30>
  400a22:	bf00      	nop
  400a24:	00400815 	.word	0x00400815
  400a28:	00400961 	.word	0x00400961
  400a2c:	00400869 	.word	0x00400869

00400a30 <bme280_compensate_data>:
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
  400a30:	2900      	cmp	r1, #0
  400a32:	bf18      	it	ne
  400a34:	2a00      	cmpne	r2, #0
  400a36:	d02b      	beq.n	400a90 <bme280_compensate_data+0x60>
{
  400a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a3a:	460f      	mov	r7, r1
  400a3c:	4614      	mov	r4, r2
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
  400a3e:	b353      	cbz	r3, 400a96 <bme280_compensate_data+0x66>
  400a40:	461e      	mov	r6, r3
  400a42:	4605      	mov	r5, r0
        comp_data->temperature = 0;
  400a44:	2200      	movs	r2, #0
  400a46:	2300      	movs	r3, #0
  400a48:	e9c4 2302 	strd	r2, r3, [r4, #8]
        comp_data->pressure = 0;
  400a4c:	e9c4 2300 	strd	r2, r3, [r4]
        comp_data->humidity = 0;
  400a50:	e9c4 2304 	strd	r2, r3, [r4, #16]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
  400a54:	f010 0f07 	tst.w	r0, #7
  400a58:	d113      	bne.n	400a82 <bme280_compensate_data+0x52>
        if (sensor_comp & BME280_PRESS)
  400a5a:	f015 0f01 	tst.w	r5, #1
  400a5e:	d005      	beq.n	400a6c <bme280_compensate_data+0x3c>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
  400a60:	4631      	mov	r1, r6
  400a62:	4638      	mov	r0, r7
  400a64:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <bme280_compensate_data+0x70>)
  400a66:	4798      	blx	r3
  400a68:	e9c4 0100 	strd	r0, r1, [r4]
        if (sensor_comp & BME280_HUM)
  400a6c:	f015 0f04 	tst.w	r5, #4
  400a70:	d014      	beq.n	400a9c <bme280_compensate_data+0x6c>
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
  400a72:	4631      	mov	r1, r6
  400a74:	4638      	mov	r0, r7
  400a76:	4b0b      	ldr	r3, [pc, #44]	; (400aa4 <bme280_compensate_data+0x74>)
  400a78:	4798      	blx	r3
  400a7a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    int8_t rslt = BME280_OK;
  400a7e:	2000      	movs	r0, #0
  400a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
  400a82:	4631      	mov	r1, r6
  400a84:	4638      	mov	r0, r7
  400a86:	4b08      	ldr	r3, [pc, #32]	; (400aa8 <bme280_compensate_data+0x78>)
  400a88:	4798      	blx	r3
  400a8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  400a8e:	e7e4      	b.n	400a5a <bme280_compensate_data+0x2a>
        rslt = BME280_E_NULL_PTR;
  400a90:	f04f 30ff 	mov.w	r0, #4294967295
  400a94:	4770      	bx	lr
  400a96:	f04f 30ff 	mov.w	r0, #4294967295
  400a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int8_t rslt = BME280_OK;
  400a9c:	2000      	movs	r0, #0
}
  400a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400aa0:	00400339 	.word	0x00400339
  400aa4:	00400591 	.word	0x00400591
  400aa8:	00400219 	.word	0x00400219

00400aac <bme280_get_sensor_data>:
{
  400aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  400aae:	b087      	sub	sp, #28
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
  400ab0:	2400      	movs	r4, #0
  400ab2:	9404      	str	r4, [sp, #16]
  400ab4:	9405      	str	r4, [sp, #20]
    struct bme280_uncomp_data uncomp_data = { 0 };
  400ab6:	9401      	str	r4, [sp, #4]
  400ab8:	9402      	str	r4, [sp, #8]
  400aba:	9403      	str	r4, [sp, #12]
    if (comp_data != NULL)
  400abc:	b1d1      	cbz	r1, 400af4 <bme280_get_sensor_data+0x48>
  400abe:	460e      	mov	r6, r1
  400ac0:	4614      	mov	r4, r2
  400ac2:	4605      	mov	r5, r0
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
  400ac4:	4613      	mov	r3, r2
  400ac6:	2208      	movs	r2, #8
  400ac8:	a904      	add	r1, sp, #16
  400aca:	20f7      	movs	r0, #247	; 0xf7
  400acc:	4f0b      	ldr	r7, [pc, #44]	; (400afc <bme280_get_sensor_data+0x50>)
  400ace:	47b8      	blx	r7
        if (rslt == BME280_OK)
  400ad0:	4603      	mov	r3, r0
  400ad2:	b110      	cbz	r0, 400ada <bme280_get_sensor_data+0x2e>
}
  400ad4:	4618      	mov	r0, r3
  400ad6:	b007      	add	sp, #28
  400ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            parse_sensor_data(reg_data, &uncomp_data);
  400ada:	a901      	add	r1, sp, #4
  400adc:	a804      	add	r0, sp, #16
  400ade:	4b08      	ldr	r3, [pc, #32]	; (400b00 <bme280_get_sensor_data+0x54>)
  400ae0:	4798      	blx	r3
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
  400ae2:	f104 0318 	add.w	r3, r4, #24
  400ae6:	4632      	mov	r2, r6
  400ae8:	a901      	add	r1, sp, #4
  400aea:	4628      	mov	r0, r5
  400aec:	4c05      	ldr	r4, [pc, #20]	; (400b04 <bme280_get_sensor_data+0x58>)
  400aee:	47a0      	blx	r4
  400af0:	4603      	mov	r3, r0
  400af2:	e7ef      	b.n	400ad4 <bme280_get_sensor_data+0x28>
        rslt = BME280_E_NULL_PTR;
  400af4:	f04f 33ff 	mov.w	r3, #4294967295
  400af8:	e7ec      	b.n	400ad4 <bme280_get_sensor_data+0x28>
  400afa:	bf00      	nop
  400afc:	00400815 	.word	0x00400815
  400b00:	004001e1 	.word	0x004001e1
  400b04:	00400a31 	.word	0x00400a31

00400b08 <bin_buffer_enqueue>:
#include "buffer_queue.h"

BinBufferQueue bin_buffer_queue = {.head = 0, .tail = 0, .count = 0};
EventBufferQueue event_buffer_queue = {.head = 0, .tail = 0, .count = 0};

void bin_buffer_enqueue(BinBufferItem item) {
  400b08:	b084      	sub	sp, #16
  400b0a:	b570      	push	{r4, r5, r6, lr}
  400b0c:	ac04      	add	r4, sp, #16
  400b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (bin_buffer_queue.count >= BIN_BUFFER_QUEUE_SIZE) {
  400b12:	4b11      	ldr	r3, [pc, #68]	; (400b58 <bin_buffer_enqueue+0x50>)
  400b14:	f893 52fa 	ldrb.w	r5, [r3, #762]	; 0x2fa
  400b18:	2d09      	cmp	r5, #9
  400b1a:	d819      	bhi.n	400b50 <bin_buffer_enqueue+0x48>
		// Bin buffer is full, can't enqueue
		return;
	}

	bin_buffer_queue.items[bin_buffer_queue.tail] = item;
  400b1c:	461e      	mov	r6, r3
  400b1e:	f893 42f9 	ldrb.w	r4, [r3, #761]	; 0x2f9
  400b22:	204c      	movs	r0, #76	; 0x4c
  400b24:	4602      	mov	r2, r0
  400b26:	a904      	add	r1, sp, #16
  400b28:	fb00 3004 	mla	r0, r0, r4, r3
  400b2c:	4b0b      	ldr	r3, [pc, #44]	; (400b5c <bin_buffer_enqueue+0x54>)
  400b2e:	4798      	blx	r3
	bin_buffer_queue.tail = (bin_buffer_queue.tail + 1) % BIN_BUFFER_QUEUE_SIZE;
  400b30:	1c62      	adds	r2, r4, #1
  400b32:	490b      	ldr	r1, [pc, #44]	; (400b60 <bin_buffer_enqueue+0x58>)
  400b34:	fb81 3102 	smull	r3, r1, r1, r2
  400b38:	17d3      	asrs	r3, r2, #31
  400b3a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400b3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400b42:	0059      	lsls	r1, r3, #1
  400b44:	1a53      	subs	r3, r2, r1
  400b46:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
	bin_buffer_queue.count++;
  400b4a:	3501      	adds	r5, #1
  400b4c:	f886 52fa 	strb.w	r5, [r6, #762]	; 0x2fa
}
  400b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  400b54:	b004      	add	sp, #16
  400b56:	4770      	bx	lr
  400b58:	204000d0 	.word	0x204000d0
  400b5c:	00402ffd 	.word	0x00402ffd
  400b60:	66666667 	.word	0x66666667

00400b64 <bin_buffer_dequeue>:

BinBufferItem bin_buffer_dequeue() {
  400b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400b68:	b0a7      	sub	sp, #156	; 0x9c
  400b6a:	4605      	mov	r5, r0
	if (bin_buffer_queue.count > 0) {
  400b6c:	4b1a      	ldr	r3, [pc, #104]	; (400bd8 <bin_buffer_dequeue+0x74>)
  400b6e:	f893 42fa 	ldrb.w	r4, [r3, #762]	; 0x2fa
  400b72:	b984      	cbnz	r4, 400b96 <bin_buffer_dequeue+0x32>
		bin_buffer_queue.count--;
		return item;
	}

	// If the queue is empty, return an item with zeros
	BinBufferItem emptyItem = {.mode = 0, .secondCounter = 0, .milliCounter = 0, .data = {0}};
  400b74:	244c      	movs	r4, #76	; 0x4c
  400b76:	4622      	mov	r2, r4
  400b78:	2100      	movs	r1, #0
  400b7a:	eb0d 0004 	add.w	r0, sp, r4
  400b7e:	4b17      	ldr	r3, [pc, #92]	; (400bdc <bin_buffer_dequeue+0x78>)
  400b80:	4798      	blx	r3
	return emptyItem;
  400b82:	4622      	mov	r2, r4
  400b84:	eb0d 0104 	add.w	r1, sp, r4
  400b88:	4628      	mov	r0, r5
  400b8a:	4b15      	ldr	r3, [pc, #84]	; (400be0 <bin_buffer_dequeue+0x7c>)
  400b8c:	4798      	blx	r3
}
  400b8e:	4628      	mov	r0, r5
  400b90:	b027      	add	sp, #156	; 0x9c
  400b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BinBufferItem item = bin_buffer_queue.items[bin_buffer_queue.head];
  400b96:	461e      	mov	r6, r3
  400b98:	f893 92f8 	ldrb.w	r9, [r3, #760]	; 0x2f8
  400b9c:	274c      	movs	r7, #76	; 0x4c
  400b9e:	463a      	mov	r2, r7
  400ba0:	fb07 3109 	mla	r1, r7, r9, r3
  400ba4:	4668      	mov	r0, sp
  400ba6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400be0 <bin_buffer_dequeue+0x7c>
  400baa:	47c0      	blx	r8
		bin_buffer_queue.head = (bin_buffer_queue.head + 1) % BIN_BUFFER_QUEUE_SIZE;
  400bac:	f109 0201 	add.w	r2, r9, #1
  400bb0:	490c      	ldr	r1, [pc, #48]	; (400be4 <bin_buffer_dequeue+0x80>)
  400bb2:	fb81 3102 	smull	r3, r1, r1, r2
  400bb6:	17d3      	asrs	r3, r2, #31
  400bb8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400bbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400bc0:	0059      	lsls	r1, r3, #1
  400bc2:	1a53      	subs	r3, r2, r1
  400bc4:	f886 32f8 	strb.w	r3, [r6, #760]	; 0x2f8
		bin_buffer_queue.count--;
  400bc8:	3c01      	subs	r4, #1
  400bca:	f886 42fa 	strb.w	r4, [r6, #762]	; 0x2fa
		return item;
  400bce:	463a      	mov	r2, r7
  400bd0:	4669      	mov	r1, sp
  400bd2:	4628      	mov	r0, r5
  400bd4:	47c0      	blx	r8
  400bd6:	e7da      	b.n	400b8e <bin_buffer_dequeue+0x2a>
  400bd8:	204000d0 	.word	0x204000d0
  400bdc:	00403013 	.word	0x00403013
  400be0:	00402ffd 	.word	0x00402ffd
  400be4:	66666667 	.word	0x66666667

00400be8 <event_buffer_enqueue>:

void event_buffer_enqueue(EventBufferItem item) {
  400be8:	b4f0      	push	{r4, r5, r6, r7}
  400bea:	b084      	sub	sp, #16
  400bec:	ac04      	add	r4, sp, #16
  400bee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
	if (event_buffer_queue.count >= EVENT_BUFFER_QUEUE_SIZE) {
  400bf2:	4b12      	ldr	r3, [pc, #72]	; (400c3c <event_buffer_enqueue+0x54>)
  400bf4:	f893 639e 	ldrb.w	r6, [r3, #926]	; 0x39e
  400bf8:	2e09      	cmp	r6, #9
  400bfa:	d81b      	bhi.n	400c34 <event_buffer_enqueue+0x4c>
		// Event buffer is full, can't enqueue
		return;
	}

	event_buffer_queue.items[event_buffer_queue.tail] = item;
  400bfc:	461f      	mov	r7, r3
  400bfe:	f893 439d 	ldrb.w	r4, [r3, #925]	; 0x39d
  400c02:	eb03 1504 	add.w	r5, r3, r4, lsl #4
  400c06:	f505 753f 	add.w	r5, r5, #764	; 0x2fc
  400c0a:	ab04      	add	r3, sp, #16
  400c0c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
  400c10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	event_buffer_queue.tail = (event_buffer_queue.tail + 1) % EVENT_BUFFER_QUEUE_SIZE;
  400c14:	1c62      	adds	r2, r4, #1
  400c16:	490a      	ldr	r1, [pc, #40]	; (400c40 <event_buffer_enqueue+0x58>)
  400c18:	fb81 3102 	smull	r3, r1, r1, r2
  400c1c:	17d3      	asrs	r3, r2, #31
  400c1e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400c22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400c26:	0059      	lsls	r1, r3, #1
  400c28:	1a53      	subs	r3, r2, r1
  400c2a:	f887 339d 	strb.w	r3, [r7, #925]	; 0x39d
	event_buffer_queue.count++;
  400c2e:	3601      	adds	r6, #1
  400c30:	f887 639e 	strb.w	r6, [r7, #926]	; 0x39e
}
  400c34:	b004      	add	sp, #16
  400c36:	bcf0      	pop	{r4, r5, r6, r7}
  400c38:	4770      	bx	lr
  400c3a:	bf00      	nop
  400c3c:	204000d0 	.word	0x204000d0
  400c40:	66666667 	.word	0x66666667

00400c44 <event_buffer_dequeue>:

EventBufferItem event_buffer_dequeue() {
  400c44:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c46:	b089      	sub	sp, #36	; 0x24
  400c48:	4604      	mov	r4, r0
	if (event_buffer_queue.count > 0) {
  400c4a:	4b17      	ldr	r3, [pc, #92]	; (400ca8 <event_buffer_dequeue+0x64>)
  400c4c:	f893 639e 	ldrb.w	r6, [r3, #926]	; 0x39e
  400c50:	b95e      	cbnz	r6, 400c6a <event_buffer_dequeue+0x26>
		event_buffer_queue.count--;
		return item;
	}

	// If the queue is empty, return an item with zeros
	EventBufferItem emptyItem = {.mode = 0, .secondCounter = 0, .milliCounter = 0, .microCounter = 0, .data = {0}};
  400c52:	ab04      	add	r3, sp, #16
  400c54:	2200      	movs	r2, #0
  400c56:	9204      	str	r2, [sp, #16]
  400c58:	9205      	str	r2, [sp, #20]
  400c5a:	9206      	str	r2, [sp, #24]
  400c5c:	9207      	str	r2, [sp, #28]
	return emptyItem;
  400c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  400c64:	4620      	mov	r0, r4
  400c66:	b009      	add	sp, #36	; 0x24
  400c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EventBufferItem item = event_buffer_queue.items[event_buffer_queue.head];
  400c6a:	469e      	mov	lr, r3
  400c6c:	f893 739c 	ldrb.w	r7, [r3, #924]	; 0x39c
  400c70:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  400c74:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
  400c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400c7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
		event_buffer_queue.head = (event_buffer_queue.head + 1) % EVENT_BUFFER_QUEUE_SIZE;
  400c7e:	1c7a      	adds	r2, r7, #1
  400c80:	490a      	ldr	r1, [pc, #40]	; (400cac <event_buffer_dequeue+0x68>)
  400c82:	fb81 3102 	smull	r3, r1, r1, r2
  400c86:	17d3      	asrs	r3, r2, #31
  400c88:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400c8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400c90:	0059      	lsls	r1, r3, #1
  400c92:	1a53      	subs	r3, r2, r1
  400c94:	f88e 339c 	strb.w	r3, [lr, #924]	; 0x39c
		event_buffer_queue.count--;
  400c98:	3e01      	subs	r6, #1
  400c9a:	f88e 639e 	strb.w	r6, [lr, #926]	; 0x39e
		return item;
  400c9e:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
  400ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  400ca6:	e7dd      	b.n	400c64 <event_buffer_dequeue+0x20>
  400ca8:	204000d0 	.word	0x204000d0
  400cac:	66666667 	.word	0x66666667

00400cb0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400cb0:	e7fe      	b.n	400cb0 <Dummy_Handler>
	...

00400cb4 <Reset_Handler>:
{
  400cb4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400cb6:	4b10      	ldr	r3, [pc, #64]	; (400cf8 <Reset_Handler+0x44>)
  400cb8:	4a10      	ldr	r2, [pc, #64]	; (400cfc <Reset_Handler+0x48>)
  400cba:	429a      	cmp	r2, r3
  400cbc:	d009      	beq.n	400cd2 <Reset_Handler+0x1e>
  400cbe:	4b0e      	ldr	r3, [pc, #56]	; (400cf8 <Reset_Handler+0x44>)
  400cc0:	4a0e      	ldr	r2, [pc, #56]	; (400cfc <Reset_Handler+0x48>)
  400cc2:	e003      	b.n	400ccc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400cc4:	6811      	ldr	r1, [r2, #0]
  400cc6:	6019      	str	r1, [r3, #0]
  400cc8:	3304      	adds	r3, #4
  400cca:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400ccc:	490c      	ldr	r1, [pc, #48]	; (400d00 <Reset_Handler+0x4c>)
  400cce:	428b      	cmp	r3, r1
  400cd0:	d3f8      	bcc.n	400cc4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400cd2:	4b0c      	ldr	r3, [pc, #48]	; (400d04 <Reset_Handler+0x50>)
  400cd4:	e002      	b.n	400cdc <Reset_Handler+0x28>
                *pDest++ = 0;
  400cd6:	2200      	movs	r2, #0
  400cd8:	601a      	str	r2, [r3, #0]
  400cda:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400cdc:	4a0a      	ldr	r2, [pc, #40]	; (400d08 <Reset_Handler+0x54>)
  400cde:	4293      	cmp	r3, r2
  400ce0:	d3f9      	bcc.n	400cd6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ce2:	4a0a      	ldr	r2, [pc, #40]	; (400d0c <Reset_Handler+0x58>)
  400ce4:	4b0a      	ldr	r3, [pc, #40]	; (400d10 <Reset_Handler+0x5c>)
  400ce6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400cea:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400cec:	4b09      	ldr	r3, [pc, #36]	; (400d14 <Reset_Handler+0x60>)
  400cee:	4798      	blx	r3
        main();
  400cf0:	4b09      	ldr	r3, [pc, #36]	; (400d18 <Reset_Handler+0x64>)
  400cf2:	4798      	blx	r3
  400cf4:	e7fe      	b.n	400cf4 <Reset_Handler+0x40>
  400cf6:	bf00      	nop
  400cf8:	20400000 	.word	0x20400000
  400cfc:	00403b88 	.word	0x00403b88
  400d00:	204000b4 	.word	0x204000b4
  400d04:	204000b4 	.word	0x204000b4
  400d08:	20401678 	.word	0x20401678
  400d0c:	e000ed00 	.word	0xe000ed00
  400d10:	00400000 	.word	0x00400000
  400d14:	00402fb5 	.word	0x00402fb5
  400d18:	0040246d 	.word	0x0040246d

00400d1c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400d1c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d1e:	4b08      	ldr	r3, [pc, #32]	; (400d40 <TIMER_0_init+0x24>)
  400d20:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400d22:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400d26:	d103      	bne.n	400d30 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400d2c:	4b04      	ldr	r3, [pc, #16]	; (400d40 <TIMER_0_init+0x24>)
  400d2e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400d30:	4b04      	ldr	r3, [pc, #16]	; (400d44 <TIMER_0_init+0x28>)
  400d32:	4798      	blx	r3
  400d34:	4602      	mov	r2, r0
  400d36:	4904      	ldr	r1, [pc, #16]	; (400d48 <TIMER_0_init+0x2c>)
  400d38:	4804      	ldr	r0, [pc, #16]	; (400d4c <TIMER_0_init+0x30>)
  400d3a:	4b05      	ldr	r3, [pc, #20]	; (400d50 <TIMER_0_init+0x34>)
  400d3c:	4798      	blx	r3
  400d3e:	bd08      	pop	{r3, pc}
  400d40:	400e0600 	.word	0x400e0600
  400d44:	00401c89 	.word	0x00401c89
  400d48:	4000c000 	.word	0x4000c000
  400d4c:	20400578 	.word	0x20400578
  400d50:	0040125d 	.word	0x0040125d

00400d54 <MICRO_Timer_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void MICRO_Timer_init(void)
{
  400d54:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d56:	4b08      	ldr	r3, [pc, #32]	; (400d78 <MICRO_Timer_init+0x24>)
  400d58:	699b      	ldr	r3, [r3, #24]
  400d5a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  400d5e:	d103      	bne.n	400d68 <MICRO_Timer_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d64:	4b04      	ldr	r3, [pc, #16]	; (400d78 <MICRO_Timer_init+0x24>)
  400d66:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC1_CHANNEL0);
	MICRO_Timer_PORT_init();
	timer_init(&MICRO_Timer, TC1, _tc_get_timer());
  400d68:	4b04      	ldr	r3, [pc, #16]	; (400d7c <MICRO_Timer_init+0x28>)
  400d6a:	4798      	blx	r3
  400d6c:	4602      	mov	r2, r0
  400d6e:	4904      	ldr	r1, [pc, #16]	; (400d80 <MICRO_Timer_init+0x2c>)
  400d70:	4804      	ldr	r0, [pc, #16]	; (400d84 <MICRO_Timer_init+0x30>)
  400d72:	4b05      	ldr	r3, [pc, #20]	; (400d88 <MICRO_Timer_init+0x34>)
  400d74:	4798      	blx	r3
  400d76:	bd08      	pop	{r3, pc}
  400d78:	400e0600 	.word	0x400e0600
  400d7c:	00401c89 	.word	0x00401c89
  400d80:	40010000 	.word	0x40010000
  400d84:	204004ec 	.word	0x204004ec
  400d88:	0040125d 	.word	0x0040125d

00400d8c <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d8c:	4b11      	ldr	r3, [pc, #68]	; (400dd4 <SPI_0_PORT_init+0x48>)
  400d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400d94:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d98:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400d9c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400da2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400da6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  400daa:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400dac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400dae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400db2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400db4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400db8:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dbc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400dc0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400dc2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400dc4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400dc8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400dca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400dce:	605a      	str	r2, [r3, #4]
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	400e1400 	.word	0x400e1400

00400dd8 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400dd8:	4b04      	ldr	r3, [pc, #16]	; (400dec <SPI_0_CLOCK_init+0x14>)
  400dda:	699b      	ldr	r3, [r3, #24]
  400ddc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400de0:	d103      	bne.n	400dea <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400de2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400de6:	4b01      	ldr	r3, [pc, #4]	; (400dec <SPI_0_CLOCK_init+0x14>)
  400de8:	611a      	str	r2, [r3, #16]
  400dea:	4770      	bx	lr
  400dec:	400e0600 	.word	0x400e0600

00400df0 <SPI_0_init>:
{
  400df0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  400df2:	4b08      	ldr	r3, [pc, #32]	; (400e14 <SPI_0_init+0x24>)
  400df4:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  400df6:	4b08      	ldr	r3, [pc, #32]	; (400e18 <SPI_0_init+0x28>)
  400df8:	4798      	blx	r3
  400dfa:	4c08      	ldr	r4, [pc, #32]	; (400e1c <SPI_0_init+0x2c>)
  400dfc:	4601      	mov	r1, r0
  400dfe:	4620      	mov	r0, r4
  400e00:	4b07      	ldr	r3, [pc, #28]	; (400e20 <SPI_0_init+0x30>)
  400e02:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  400e04:	4907      	ldr	r1, [pc, #28]	; (400e24 <SPI_0_init+0x34>)
  400e06:	4620      	mov	r0, r4
  400e08:	4b07      	ldr	r3, [pc, #28]	; (400e28 <SPI_0_init+0x38>)
  400e0a:	4798      	blx	r3
	SPI_0_PORT_init();
  400e0c:	4b07      	ldr	r3, [pc, #28]	; (400e2c <SPI_0_init+0x3c>)
  400e0e:	4798      	blx	r3
  400e10:	bd10      	pop	{r4, pc}
  400e12:	bf00      	nop
  400e14:	00400dd9 	.word	0x00400dd9
  400e18:	00401b1d 	.word	0x00401b1d
  400e1c:	20400510 	.word	0x20400510
  400e20:	00400ffd 	.word	0x00400ffd
  400e24:	40008000 	.word	0x40008000
  400e28:	0040101d 	.word	0x0040101d
  400e2c:	00400d8d 	.word	0x00400d8d

00400e30 <RAND_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400e30:	4b05      	ldr	r3, [pc, #20]	; (400e48 <RAND_0_CLOCK_init+0x18>)
  400e32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400e36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  400e3a:	d104      	bne.n	400e46 <RAND_0_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400e40:	4b01      	ldr	r3, [pc, #4]	; (400e48 <RAND_0_CLOCK_init+0x18>)
  400e42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400e46:	4770      	bx	lr
  400e48:	400e0600 	.word	0x400e0600

00400e4c <RAND_0_init>:
{
	_pmc_enable_periph_clock(ID_TRNG);
}

void RAND_0_init(void)
{
  400e4c:	b508      	push	{r3, lr}
	RAND_0_CLOCK_init();
  400e4e:	4b03      	ldr	r3, [pc, #12]	; (400e5c <RAND_0_init+0x10>)
  400e50:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
  400e52:	4903      	ldr	r1, [pc, #12]	; (400e60 <RAND_0_init+0x14>)
  400e54:	4803      	ldr	r0, [pc, #12]	; (400e64 <RAND_0_init+0x18>)
  400e56:	4b04      	ldr	r3, [pc, #16]	; (400e68 <RAND_0_init+0x1c>)
  400e58:	4798      	blx	r3
  400e5a:	bd08      	pop	{r3, pc}
  400e5c:	00400e31 	.word	0x00400e31
  400e60:	40070000 	.word	0x40070000
  400e64:	20400508 	.word	0x20400508
  400e68:	00400fd1 	.word	0x00400fd1

00400e6c <USART_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e6c:	4b04      	ldr	r3, [pc, #16]	; (400e80 <USART_0_CLOCK_init+0x14>)
  400e6e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400e70:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400e74:	d103      	bne.n	400e7e <USART_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400e7a:	4b01      	ldr	r3, [pc, #4]	; (400e80 <USART_0_CLOCK_init+0x14>)
  400e7c:	611a      	str	r2, [r3, #16]
  400e7e:	4770      	bx	lr
  400e80:	400e0600 	.word	0x400e0600

00400e84 <USART_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e84:	4b0f      	ldr	r3, [pc, #60]	; (400ec4 <USART_0_PORT_init+0x40>)
  400e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e88:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400e8c:	671a      	str	r2, [r3, #112]	; 0x70
  400e8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e90:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400e94:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400e9a:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400e9c:	4a0a      	ldr	r2, [pc, #40]	; (400ec8 <USART_0_PORT_init+0x44>)
  400e9e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400ea2:	f043 0310 	orr.w	r3, r3, #16
  400ea6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400eaa:	4b08      	ldr	r3, [pc, #32]	; (400ecc <USART_0_PORT_init+0x48>)
  400eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400eae:	f042 0210 	orr.w	r2, r2, #16
  400eb2:	671a      	str	r2, [r3, #112]	; 0x70
  400eb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400eb6:	f042 0210 	orr.w	r2, r2, #16
  400eba:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400ebc:	2210      	movs	r2, #16
  400ebe:	605a      	str	r2, [r3, #4]
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop
  400ec4:	400e0e00 	.word	0x400e0e00
  400ec8:	40088000 	.word	0x40088000
  400ecc:	400e1000 	.word	0x400e1000

00400ed0 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
  400ed0:	b510      	push	{r4, lr}
  400ed2:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
  400ed4:	4b07      	ldr	r3, [pc, #28]	; (400ef4 <USART_0_init+0x24>)
  400ed6:	4798      	blx	r3
	USART_0_PORT_init();
  400ed8:	4b07      	ldr	r3, [pc, #28]	; (400ef8 <USART_0_init+0x28>)
  400eda:	4798      	blx	r3
	usart_async_init(&USART_0, USART1, USART_0_buffer, USART_0_BUFFER_SIZE, _usart_get_usart_async());
  400edc:	4b07      	ldr	r3, [pc, #28]	; (400efc <USART_0_init+0x2c>)
  400ede:	4798      	blx	r3
  400ee0:	9000      	str	r0, [sp, #0]
  400ee2:	2310      	movs	r3, #16
  400ee4:	4a06      	ldr	r2, [pc, #24]	; (400f00 <USART_0_init+0x30>)
  400ee6:	4907      	ldr	r1, [pc, #28]	; (400f04 <USART_0_init+0x34>)
  400ee8:	4807      	ldr	r0, [pc, #28]	; (400f08 <USART_0_init+0x38>)
  400eea:	4c08      	ldr	r4, [pc, #32]	; (400f0c <USART_0_init+0x3c>)
  400eec:	47a0      	blx	r4
}
  400eee:	b002      	add	sp, #8
  400ef0:	bd10      	pop	{r4, pc}
  400ef2:	bf00      	nop
  400ef4:	00400e6d 	.word	0x00400e6d
  400ef8:	00400e85 	.word	0x00400e85
  400efc:	00402089 	.word	0x00402089
  400f00:	20400470 	.word	0x20400470
  400f04:	40028000 	.word	0x40028000
  400f08:	20400528 	.word	0x20400528
  400f0c:	0040150d 	.word	0x0040150d

00400f10 <system_init>:

void system_init(void)
{
  400f10:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400f12:	4b09      	ldr	r3, [pc, #36]	; (400f38 <system_init+0x28>)
  400f14:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400f16:	4a09      	ldr	r2, [pc, #36]	; (400f3c <system_init+0x2c>)
  400f18:	6853      	ldr	r3, [r2, #4]
  400f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400f1e:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  400f20:	4b07      	ldr	r3, [pc, #28]	; (400f40 <system_init+0x30>)
  400f22:	4798      	blx	r3
	TIMER_0_init();
  400f24:	4b07      	ldr	r3, [pc, #28]	; (400f44 <system_init+0x34>)
  400f26:	4798      	blx	r3
	MICRO_Timer_init();
  400f28:	4b07      	ldr	r3, [pc, #28]	; (400f48 <system_init+0x38>)
  400f2a:	4798      	blx	r3

	RAND_0_init();
  400f2c:	4b07      	ldr	r3, [pc, #28]	; (400f4c <system_init+0x3c>)
  400f2e:	4798      	blx	r3
	USART_0_init();
  400f30:	4b07      	ldr	r3, [pc, #28]	; (400f50 <system_init+0x40>)
  400f32:	4798      	blx	r3
  400f34:	bd08      	pop	{r3, pc}
  400f36:	bf00      	nop
  400f38:	004017d1 	.word	0x004017d1
  400f3c:	400e1850 	.word	0x400e1850
  400f40:	00400df1 	.word	0x00400df1
  400f44:	00400d1d 	.word	0x00400d1d
  400f48:	00400d55 	.word	0x00400d55
  400f4c:	00400e4d 	.word	0x00400e4d
  400f50:	00400ed1 	.word	0x00400ed1

00400f54 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400f54:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400f58:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400f5a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400f5c:	f3bf 8f5f 	dmb	sy
  400f60:	4770      	bx	lr

00400f62 <atomic_leave_critical>:
  400f62:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400f66:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400f68:	f383 8810 	msr	PRIMASK, r3
  400f6c:	4770      	bx	lr
	...

00400f70 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400f70:	b570      	push	{r4, r5, r6, lr}
  400f72:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400f74:	4604      	mov	r4, r0
  400f76:	460d      	mov	r5, r1
  400f78:	2800      	cmp	r0, #0
  400f7a:	bf18      	it	ne
  400f7c:	2900      	cmpne	r1, #0
  400f7e:	bf14      	ite	ne
  400f80:	2001      	movne	r0, #1
  400f82:	2000      	moveq	r0, #0
  400f84:	2234      	movs	r2, #52	; 0x34
  400f86:	4904      	ldr	r1, [pc, #16]	; (400f98 <io_write+0x28>)
  400f88:	4b04      	ldr	r3, [pc, #16]	; (400f9c <io_write+0x2c>)
  400f8a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400f8c:	6823      	ldr	r3, [r4, #0]
  400f8e:	4632      	mov	r2, r6
  400f90:	4629      	mov	r1, r5
  400f92:	4620      	mov	r0, r4
  400f94:	4798      	blx	r3
}
  400f96:	bd70      	pop	{r4, r5, r6, pc}
  400f98:	00403924 	.word	0x00403924
  400f9c:	00401641 	.word	0x00401641

00400fa0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400fa0:	b570      	push	{r4, r5, r6, lr}
  400fa2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400fa4:	4604      	mov	r4, r0
  400fa6:	460d      	mov	r5, r1
  400fa8:	2800      	cmp	r0, #0
  400faa:	bf18      	it	ne
  400fac:	2900      	cmpne	r1, #0
  400fae:	bf14      	ite	ne
  400fb0:	2001      	movne	r0, #1
  400fb2:	2000      	moveq	r0, #0
  400fb4:	223d      	movs	r2, #61	; 0x3d
  400fb6:	4904      	ldr	r1, [pc, #16]	; (400fc8 <io_read+0x28>)
  400fb8:	4b04      	ldr	r3, [pc, #16]	; (400fcc <io_read+0x2c>)
  400fba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400fbc:	6863      	ldr	r3, [r4, #4]
  400fbe:	4632      	mov	r2, r6
  400fc0:	4629      	mov	r1, r5
  400fc2:	4620      	mov	r0, r4
  400fc4:	4798      	blx	r3
}
  400fc6:	bd70      	pop	{r4, r5, r6, pc}
  400fc8:	00403924 	.word	0x00403924
  400fcc:	00401641 	.word	0x00401641

00400fd0 <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
  400fd0:	b538      	push	{r3, r4, r5, lr}
  400fd2:	460d      	mov	r5, r1
	ASSERT(desc);
  400fd4:	4604      	mov	r4, r0
  400fd6:	2229      	movs	r2, #41	; 0x29
  400fd8:	4905      	ldr	r1, [pc, #20]	; (400ff0 <rand_sync_init+0x20>)
  400fda:	3000      	adds	r0, #0
  400fdc:	bf18      	it	ne
  400fde:	2001      	movne	r0, #1
  400fe0:	4b04      	ldr	r3, [pc, #16]	; (400ff4 <rand_sync_init+0x24>)
  400fe2:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
  400fe4:	4629      	mov	r1, r5
  400fe6:	4620      	mov	r0, r4
  400fe8:	4b03      	ldr	r3, [pc, #12]	; (400ff8 <rand_sync_init+0x28>)
  400fea:	4798      	blx	r3
}
  400fec:	bd38      	pop	{r3, r4, r5, pc}
  400fee:	bf00      	nop
  400ff0:	00403938 	.word	0x00403938
  400ff4:	00401641 	.word	0x00401641
  400ff8:	00401cb5 	.word	0x00401cb5

00400ffc <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400ffc:	b538      	push	{r3, r4, r5, lr}
  400ffe:	460d      	mov	r5, r1
	ASSERT(spi);
  401000:	4604      	mov	r4, r0
  401002:	2239      	movs	r2, #57	; 0x39
  401004:	4903      	ldr	r1, [pc, #12]	; (401014 <spi_m_sync_set_func_ptr+0x18>)
  401006:	3000      	adds	r0, #0
  401008:	bf18      	it	ne
  40100a:	2001      	movne	r0, #1
  40100c:	4b02      	ldr	r3, [pc, #8]	; (401018 <spi_m_sync_set_func_ptr+0x1c>)
  40100e:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  401010:	6025      	str	r5, [r4, #0]
  401012:	bd38      	pop	{r3, r4, r5, pc}
  401014:	00403954 	.word	0x00403954
  401018:	00401641 	.word	0x00401641

0040101c <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  40101c:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  40101e:	4604      	mov	r4, r0
  401020:	460d      	mov	r5, r1
  401022:	2800      	cmp	r0, #0
  401024:	bf18      	it	ne
  401026:	2900      	cmpne	r1, #0
  401028:	bf14      	ite	ne
  40102a:	2001      	movne	r0, #1
  40102c:	2000      	moveq	r0, #0
  40102e:	2240      	movs	r2, #64	; 0x40
  401030:	4909      	ldr	r1, [pc, #36]	; (401058 <spi_m_sync_init+0x3c>)
  401032:	4b0a      	ldr	r3, [pc, #40]	; (40105c <spi_m_sync_init+0x40>)
  401034:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  401036:	4620      	mov	r0, r4
  401038:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  40103c:	4629      	mov	r1, r5
  40103e:	4b08      	ldr	r3, [pc, #32]	; (401060 <spi_m_sync_init+0x44>)
  401040:	4798      	blx	r3

	if (rc < 0) {
  401042:	2800      	cmp	r0, #0
  401044:	db07      	blt.n	401056 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  401046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40104a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  40104c:	4b05      	ldr	r3, [pc, #20]	; (401064 <spi_m_sync_init+0x48>)
  40104e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  401050:	4b05      	ldr	r3, [pc, #20]	; (401068 <spi_m_sync_init+0x4c>)
  401052:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  401054:	2000      	movs	r0, #0
}
  401056:	bd38      	pop	{r3, r4, r5, pc}
  401058:	00403954 	.word	0x00403954
  40105c:	00401641 	.word	0x00401641
  401060:	00401909 	.word	0x00401909
  401064:	0040113d 	.word	0x0040113d
  401068:	00401101 	.word	0x00401101

0040106c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  40106c:	b510      	push	{r4, lr}
	ASSERT(spi);
  40106e:	4604      	mov	r4, r0
  401070:	2257      	movs	r2, #87	; 0x57
  401072:	4905      	ldr	r1, [pc, #20]	; (401088 <spi_m_sync_enable+0x1c>)
  401074:	3000      	adds	r0, #0
  401076:	bf18      	it	ne
  401078:	2001      	movne	r0, #1
  40107a:	4b04      	ldr	r3, [pc, #16]	; (40108c <spi_m_sync_enable+0x20>)
  40107c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  40107e:	1d20      	adds	r0, r4, #4
  401080:	4b03      	ldr	r3, [pc, #12]	; (401090 <spi_m_sync_enable+0x24>)
  401082:	4798      	blx	r3
  401084:	bd10      	pop	{r4, pc}
  401086:	bf00      	nop
  401088:	00403954 	.word	0x00403954
  40108c:	00401641 	.word	0x00401641
  401090:	004019b1 	.word	0x004019b1

00401094 <spi_m_sync_set_baudrate>:
	ASSERT(spi);
	_spi_m_sync_disable(&spi->dev);
}

int32_t spi_m_sync_set_baudrate(struct spi_m_sync_descriptor *spi, const uint32_t baud_val)
{
  401094:	b538      	push	{r3, r4, r5, lr}
  401096:	460d      	mov	r5, r1
	ASSERT(spi);
  401098:	4604      	mov	r4, r0
  40109a:	2263      	movs	r2, #99	; 0x63
  40109c:	4905      	ldr	r1, [pc, #20]	; (4010b4 <spi_m_sync_set_baudrate+0x20>)
  40109e:	3000      	adds	r0, #0
  4010a0:	bf18      	it	ne
  4010a2:	2001      	movne	r0, #1
  4010a4:	4b04      	ldr	r3, [pc, #16]	; (4010b8 <spi_m_sync_set_baudrate+0x24>)
  4010a6:	4798      	blx	r3
	return _spi_m_sync_set_baudrate(&spi->dev, baud_val);
  4010a8:	4629      	mov	r1, r5
  4010aa:	1d20      	adds	r0, r4, #4
  4010ac:	4b03      	ldr	r3, [pc, #12]	; (4010bc <spi_m_sync_set_baudrate+0x28>)
  4010ae:	4798      	blx	r3
}
  4010b0:	bd38      	pop	{r3, r4, r5, pc}
  4010b2:	bf00      	nop
  4010b4:	00403954 	.word	0x00403954
  4010b8:	00401641 	.word	0x00401641
  4010bc:	004019e5 	.word	0x004019e5

004010c0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  4010c0:	b530      	push	{r4, r5, lr}
  4010c2:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  4010c4:	4605      	mov	r5, r0
  4010c6:	460c      	mov	r4, r1
  4010c8:	2800      	cmp	r0, #0
  4010ca:	bf18      	it	ne
  4010cc:	2900      	cmpne	r1, #0
  4010ce:	bf14      	ite	ne
  4010d0:	2001      	movne	r0, #1
  4010d2:	2000      	moveq	r0, #0
  4010d4:	22b3      	movs	r2, #179	; 0xb3
  4010d6:	4907      	ldr	r1, [pc, #28]	; (4010f4 <spi_m_sync_transfer+0x34>)
  4010d8:	4b07      	ldr	r3, [pc, #28]	; (4010f8 <spi_m_sync_transfer+0x38>)
  4010da:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  4010dc:	6823      	ldr	r3, [r4, #0]
  4010de:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  4010e0:	6863      	ldr	r3, [r4, #4]
  4010e2:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  4010e4:	68a3      	ldr	r3, [r4, #8]
  4010e6:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  4010e8:	a901      	add	r1, sp, #4
  4010ea:	1d28      	adds	r0, r5, #4
  4010ec:	4b03      	ldr	r3, [pc, #12]	; (4010fc <spi_m_sync_transfer+0x3c>)
  4010ee:	4798      	blx	r3
}
  4010f0:	b005      	add	sp, #20
  4010f2:	bd30      	pop	{r4, r5, pc}
  4010f4:	00403954 	.word	0x00403954
  4010f8:	00401641 	.word	0x00401641
  4010fc:	00401a1d 	.word	0x00401a1d

00401100 <_spi_m_sync_io_write>:
{
  401100:	b570      	push	{r4, r5, r6, lr}
  401102:	b084      	sub	sp, #16
  401104:	460e      	mov	r6, r1
  401106:	4615      	mov	r5, r2
	ASSERT(io);
  401108:	4604      	mov	r4, r0
  40110a:	22a3      	movs	r2, #163	; 0xa3
  40110c:	4908      	ldr	r1, [pc, #32]	; (401130 <_spi_m_sync_io_write+0x30>)
  40110e:	3000      	adds	r0, #0
  401110:	bf18      	it	ne
  401112:	2001      	movne	r0, #1
  401114:	4b07      	ldr	r3, [pc, #28]	; (401134 <_spi_m_sync_io_write+0x34>)
  401116:	4798      	blx	r3
	xfer.rxbuf = 0;
  401118:	2300      	movs	r3, #0
  40111a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  40111c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  40111e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  401120:	a901      	add	r1, sp, #4
  401122:	f1a4 000c 	sub.w	r0, r4, #12
  401126:	4b04      	ldr	r3, [pc, #16]	; (401138 <_spi_m_sync_io_write+0x38>)
  401128:	4798      	blx	r3
}
  40112a:	b004      	add	sp, #16
  40112c:	bd70      	pop	{r4, r5, r6, pc}
  40112e:	bf00      	nop
  401130:	00403954 	.word	0x00403954
  401134:	00401641 	.word	0x00401641
  401138:	004010c1 	.word	0x004010c1

0040113c <_spi_m_sync_io_read>:
{
  40113c:	b570      	push	{r4, r5, r6, lr}
  40113e:	b084      	sub	sp, #16
  401140:	460e      	mov	r6, r1
  401142:	4615      	mov	r5, r2
	ASSERT(io);
  401144:	4604      	mov	r4, r0
  401146:	2287      	movs	r2, #135	; 0x87
  401148:	4908      	ldr	r1, [pc, #32]	; (40116c <_spi_m_sync_io_read+0x30>)
  40114a:	3000      	adds	r0, #0
  40114c:	bf18      	it	ne
  40114e:	2001      	movne	r0, #1
  401150:	4b07      	ldr	r3, [pc, #28]	; (401170 <_spi_m_sync_io_read+0x34>)
  401152:	4798      	blx	r3
	xfer.rxbuf = buf;
  401154:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  401156:	2300      	movs	r3, #0
  401158:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  40115a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  40115c:	a901      	add	r1, sp, #4
  40115e:	f1a4 000c 	sub.w	r0, r4, #12
  401162:	4b04      	ldr	r3, [pc, #16]	; (401174 <_spi_m_sync_io_read+0x38>)
  401164:	4798      	blx	r3
}
  401166:	b004      	add	sp, #16
  401168:	bd70      	pop	{r4, r5, r6, pc}
  40116a:	bf00      	nop
  40116c:	00403954 	.word	0x00403954
  401170:	00401641 	.word	0x00401641
  401174:	004010c1 	.word	0x004010c1

00401178 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  401178:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  40117a:	4604      	mov	r4, r0
  40117c:	460d      	mov	r5, r1
  40117e:	2800      	cmp	r0, #0
  401180:	bf18      	it	ne
  401182:	2900      	cmpne	r1, #0
  401184:	bf14      	ite	ne
  401186:	2001      	movne	r0, #1
  401188:	2000      	moveq	r0, #0
  40118a:	22bd      	movs	r2, #189	; 0xbd
  40118c:	4903      	ldr	r1, [pc, #12]	; (40119c <spi_m_sync_get_io_descriptor+0x24>)
  40118e:	4b04      	ldr	r3, [pc, #16]	; (4011a0 <spi_m_sync_get_io_descriptor+0x28>)
  401190:	4798      	blx	r3
	*io = &spi->io;
  401192:	340c      	adds	r4, #12
  401194:	602c      	str	r4, [r5, #0]
	return 0;
}
  401196:	2000      	movs	r0, #0
  401198:	bd38      	pop	{r3, r4, r5, pc}
  40119a:	bf00      	nop
  40119c:	00403954 	.word	0x00403954
  4011a0:	00401641 	.word	0x00401641

004011a4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4011a6:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4011a8:	b117      	cbz	r7, 4011b0 <timer_add_timer_task+0xc>
  4011aa:	463c      	mov	r4, r7
  4011ac:	2600      	movs	r6, #0
  4011ae:	e00b      	b.n	4011c8 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4011b0:	4b0e      	ldr	r3, [pc, #56]	; (4011ec <timer_add_timer_task+0x48>)
  4011b2:	4798      	blx	r3
		return;
  4011b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4011b6:	68a5      	ldr	r5, [r4, #8]
  4011b8:	442b      	add	r3, r5
  4011ba:	1a9b      	subs	r3, r3, r2
  4011bc:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4011be:	688d      	ldr	r5, [r1, #8]
  4011c0:	42ab      	cmp	r3, r5
  4011c2:	d209      	bcs.n	4011d8 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4011c4:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4011c6:	6824      	ldr	r4, [r4, #0]
  4011c8:	b134      	cbz	r4, 4011d8 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4011ca:	6863      	ldr	r3, [r4, #4]
  4011cc:	4293      	cmp	r3, r2
  4011ce:	d8f2      	bhi.n	4011b6 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4011d0:	68a5      	ldr	r5, [r4, #8]
  4011d2:	1a9b      	subs	r3, r3, r2
  4011d4:	442b      	add	r3, r5
  4011d6:	e7f2      	b.n	4011be <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  4011d8:	42bc      	cmp	r4, r7
  4011da:	d003      	beq.n	4011e4 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  4011dc:	4630      	mov	r0, r6
  4011de:	4b04      	ldr	r3, [pc, #16]	; (4011f0 <timer_add_timer_task+0x4c>)
  4011e0:	4798      	blx	r3
  4011e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4011e4:	4b01      	ldr	r3, [pc, #4]	; (4011ec <timer_add_timer_task+0x48>)
  4011e6:	4798      	blx	r3
  4011e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011ea:	bf00      	nop
  4011ec:	0040165d 	.word	0x0040165d
  4011f0:	00401689 	.word	0x00401689

004011f4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  4011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011f6:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4011f8:	6906      	ldr	r6, [r0, #16]
  4011fa:	3601      	adds	r6, #1
  4011fc:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4011fe:	7e03      	ldrb	r3, [r0, #24]
  401200:	f013 0f01 	tst.w	r3, #1
  401204:	d105      	bne.n	401212 <timer_process_counted+0x1e>
  401206:	7e03      	ldrb	r3, [r0, #24]
  401208:	f013 0f02 	tst.w	r3, #2
  40120c:	d101      	bne.n	401212 <timer_process_counted+0x1e>
  40120e:	4605      	mov	r5, r0
  401210:	e009      	b.n	401226 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401212:	7e03      	ldrb	r3, [r0, #24]
  401214:	f043 0302 	orr.w	r3, r3, #2
  401218:	7603      	strb	r3, [r0, #24]
		return;
  40121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40121c:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40121e:	68e3      	ldr	r3, [r4, #12]
  401220:	4620      	mov	r0, r4
  401222:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401224:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401226:	b19c      	cbz	r4, 401250 <timer_process_counted+0x5c>
  401228:	6863      	ldr	r3, [r4, #4]
  40122a:	1af3      	subs	r3, r6, r3
  40122c:	68a2      	ldr	r2, [r4, #8]
  40122e:	4293      	cmp	r3, r2
  401230:	d30e      	bcc.n	401250 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401232:	f105 0714 	add.w	r7, r5, #20
  401236:	4638      	mov	r0, r7
  401238:	4b06      	ldr	r3, [pc, #24]	; (401254 <timer_process_counted+0x60>)
  40123a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  40123c:	7c23      	ldrb	r3, [r4, #16]
  40123e:	2b01      	cmp	r3, #1
  401240:	d1ec      	bne.n	40121c <timer_process_counted+0x28>
			tmp->time_label = time;
  401242:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401244:	4632      	mov	r2, r6
  401246:	4621      	mov	r1, r4
  401248:	4638      	mov	r0, r7
  40124a:	4b03      	ldr	r3, [pc, #12]	; (401258 <timer_process_counted+0x64>)
  40124c:	4798      	blx	r3
  40124e:	e7e5      	b.n	40121c <timer_process_counted+0x28>
  401250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401252:	bf00      	nop
  401254:	00401691 	.word	0x00401691
  401258:	004011a5 	.word	0x004011a5

0040125c <timer_init>:
{
  40125c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40125e:	4604      	mov	r4, r0
  401260:	460d      	mov	r5, r1
  401262:	2800      	cmp	r0, #0
  401264:	bf18      	it	ne
  401266:	2900      	cmpne	r1, #0
  401268:	bf14      	ite	ne
  40126a:	2001      	movne	r0, #1
  40126c:	2000      	moveq	r0, #0
  40126e:	223b      	movs	r2, #59	; 0x3b
  401270:	4905      	ldr	r1, [pc, #20]	; (401288 <timer_init+0x2c>)
  401272:	4b06      	ldr	r3, [pc, #24]	; (40128c <timer_init+0x30>)
  401274:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401276:	4629      	mov	r1, r5
  401278:	4620      	mov	r0, r4
  40127a:	4b05      	ldr	r3, [pc, #20]	; (401290 <timer_init+0x34>)
  40127c:	4798      	blx	r3
	descr->time                           = 0;
  40127e:	2000      	movs	r0, #0
  401280:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  401282:	4b04      	ldr	r3, [pc, #16]	; (401294 <timer_init+0x38>)
  401284:	6023      	str	r3, [r4, #0]
}
  401286:	bd38      	pop	{r3, r4, r5, pc}
  401288:	00403970 	.word	0x00403970
  40128c:	00401641 	.word	0x00401641
  401290:	00401b99 	.word	0x00401b99
  401294:	004011f5 	.word	0x004011f5

00401298 <timer_start>:
{
  401298:	b510      	push	{r4, lr}
	ASSERT(descr);
  40129a:	4604      	mov	r4, r0
  40129c:	2253      	movs	r2, #83	; 0x53
  40129e:	4909      	ldr	r1, [pc, #36]	; (4012c4 <timer_start+0x2c>)
  4012a0:	3000      	adds	r0, #0
  4012a2:	bf18      	it	ne
  4012a4:	2001      	movne	r0, #1
  4012a6:	4b08      	ldr	r3, [pc, #32]	; (4012c8 <timer_start+0x30>)
  4012a8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4012aa:	4620      	mov	r0, r4
  4012ac:	4b07      	ldr	r3, [pc, #28]	; (4012cc <timer_start+0x34>)
  4012ae:	4798      	blx	r3
  4012b0:	b920      	cbnz	r0, 4012bc <timer_start+0x24>
	_timer_start(&descr->device);
  4012b2:	4620      	mov	r0, r4
  4012b4:	4b06      	ldr	r3, [pc, #24]	; (4012d0 <timer_start+0x38>)
  4012b6:	4798      	blx	r3
	return ERR_NONE;
  4012b8:	2000      	movs	r0, #0
  4012ba:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4012bc:	f06f 0010 	mvn.w	r0, #16
}
  4012c0:	bd10      	pop	{r4, pc}
  4012c2:	bf00      	nop
  4012c4:	00403970 	.word	0x00403970
  4012c8:	00401641 	.word	0x00401641
  4012cc:	00401c65 	.word	0x00401c65
  4012d0:	00401c55 	.word	0x00401c55

004012d4 <timer_stop>:
{
  4012d4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4012d6:	4604      	mov	r4, r0
  4012d8:	2261      	movs	r2, #97	; 0x61
  4012da:	4909      	ldr	r1, [pc, #36]	; (401300 <timer_stop+0x2c>)
  4012dc:	3000      	adds	r0, #0
  4012de:	bf18      	it	ne
  4012e0:	2001      	movne	r0, #1
  4012e2:	4b08      	ldr	r3, [pc, #32]	; (401304 <timer_stop+0x30>)
  4012e4:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
  4012e6:	4620      	mov	r0, r4
  4012e8:	4b07      	ldr	r3, [pc, #28]	; (401308 <timer_stop+0x34>)
  4012ea:	4798      	blx	r3
  4012ec:	b120      	cbz	r0, 4012f8 <timer_stop+0x24>
	_timer_stop(&descr->device);
  4012ee:	4620      	mov	r0, r4
  4012f0:	4b06      	ldr	r3, [pc, #24]	; (40130c <timer_stop+0x38>)
  4012f2:	4798      	blx	r3
	return ERR_NONE;
  4012f4:	2000      	movs	r0, #0
  4012f6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4012f8:	f06f 0010 	mvn.w	r0, #16
}
  4012fc:	bd10      	pop	{r4, pc}
  4012fe:	bf00      	nop
  401300:	00403970 	.word	0x00403970
  401304:	00401641 	.word	0x00401641
  401308:	00401c65 	.word	0x00401c65
  40130c:	00401c5d 	.word	0x00401c5d

00401310 <timer_add_task>:
{
  401310:	b570      	push	{r4, r5, r6, lr}
  401312:	b082      	sub	sp, #8
	ASSERT(descr && task);
  401314:	4604      	mov	r4, r0
  401316:	460d      	mov	r5, r1
  401318:	2800      	cmp	r0, #0
  40131a:	bf18      	it	ne
  40131c:	2900      	cmpne	r1, #0
  40131e:	bf14      	ite	ne
  401320:	2001      	movne	r0, #1
  401322:	2000      	moveq	r0, #0
  401324:	227a      	movs	r2, #122	; 0x7a
  401326:	491d      	ldr	r1, [pc, #116]	; (40139c <timer_add_task+0x8c>)
  401328:	4b1d      	ldr	r3, [pc, #116]	; (4013a0 <timer_add_task+0x90>)
  40132a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  40132c:	7e23      	ldrb	r3, [r4, #24]
  40132e:	f043 0301 	orr.w	r3, r3, #1
  401332:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  401334:	f104 0614 	add.w	r6, r4, #20
  401338:	4629      	mov	r1, r5
  40133a:	4630      	mov	r0, r6
  40133c:	4b19      	ldr	r3, [pc, #100]	; (4013a4 <timer_add_task+0x94>)
  40133e:	4798      	blx	r3
  401340:	b988      	cbnz	r0, 401366 <timer_add_task+0x56>
	task->time_label = descr->time;
  401342:	6923      	ldr	r3, [r4, #16]
  401344:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  401346:	6922      	ldr	r2, [r4, #16]
  401348:	4629      	mov	r1, r5
  40134a:	4630      	mov	r0, r6
  40134c:	4b16      	ldr	r3, [pc, #88]	; (4013a8 <timer_add_task+0x98>)
  40134e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  401350:	7e23      	ldrb	r3, [r4, #24]
  401352:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  401356:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  401358:	7e23      	ldrb	r3, [r4, #24]
  40135a:	f013 0f02 	tst.w	r3, #2
  40135e:	d10e      	bne.n	40137e <timer_add_task+0x6e>
	return ERR_NONE;
  401360:	2000      	movs	r0, #0
}
  401362:	b002      	add	sp, #8
  401364:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  401366:	7e23      	ldrb	r3, [r4, #24]
  401368:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40136c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  40136e:	227f      	movs	r2, #127	; 0x7f
  401370:	490a      	ldr	r1, [pc, #40]	; (40139c <timer_add_task+0x8c>)
  401372:	2000      	movs	r0, #0
  401374:	4b0a      	ldr	r3, [pc, #40]	; (4013a0 <timer_add_task+0x90>)
  401376:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  401378:	f06f 0011 	mvn.w	r0, #17
  40137c:	e7f1      	b.n	401362 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  40137e:	a801      	add	r0, sp, #4
  401380:	4b0a      	ldr	r3, [pc, #40]	; (4013ac <timer_add_task+0x9c>)
  401382:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  401384:	7e23      	ldrb	r3, [r4, #24]
  401386:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  40138a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  40138c:	4620      	mov	r0, r4
  40138e:	4b08      	ldr	r3, [pc, #32]	; (4013b0 <timer_add_task+0xa0>)
  401390:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  401392:	a801      	add	r0, sp, #4
  401394:	4b07      	ldr	r3, [pc, #28]	; (4013b4 <timer_add_task+0xa4>)
  401396:	4798      	blx	r3
	return ERR_NONE;
  401398:	2000      	movs	r0, #0
  40139a:	e7e2      	b.n	401362 <timer_add_task+0x52>
  40139c:	00403970 	.word	0x00403970
  4013a0:	00401641 	.word	0x00401641
  4013a4:	00401647 	.word	0x00401647
  4013a8:	004011a5 	.word	0x004011a5
  4013ac:	00400f55 	.word	0x00400f55
  4013b0:	00401c71 	.word	0x00401c71
  4013b4:	00400f63 	.word	0x00400f63

004013b8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  4013b8:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  4013ba:	2300      	movs	r3, #0
  4013bc:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
  4013be:	69c3      	ldr	r3, [r0, #28]
  4013c0:	b11b      	cbz	r3, 4013ca <usart_transmission_complete+0x12>
  4013c2:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
  4013c6:	4610      	mov	r0, r2
  4013c8:	4798      	blx	r3
  4013ca:	bd08      	pop	{r3, pc}

004013cc <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  4013cc:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  4013ce:	2300      	movs	r3, #0
  4013d0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
  4013d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  4013d4:	b11b      	cbz	r3, 4013de <usart_error+0x12>
  4013d6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
  4013da:	4610      	mov	r0, r2
  4013dc:	4798      	blx	r3
  4013de:	bd08      	pop	{r3, pc}

004013e0 <usart_fill_rx_buffer>:
{
  4013e0:	b538      	push	{r3, r4, r5, lr}
  4013e2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4013e4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
  4013e8:	302c      	adds	r0, #44	; 0x2c
  4013ea:	4b03      	ldr	r3, [pc, #12]	; (4013f8 <usart_fill_rx_buffer+0x18>)
  4013ec:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
  4013ee:	6a23      	ldr	r3, [r4, #32]
  4013f0:	b10b      	cbz	r3, 4013f6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
  4013f2:	4628      	mov	r0, r5
  4013f4:	4798      	blx	r3
  4013f6:	bd38      	pop	{r3, r4, r5, pc}
  4013f8:	00401729 	.word	0x00401729

004013fc <usart_async_write>:
{
  4013fc:	b570      	push	{r4, r5, r6, lr}
  4013fe:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
  401400:	4604      	mov	r4, r0
  401402:	460e      	mov	r6, r1
  401404:	2800      	cmp	r0, #0
  401406:	bf18      	it	ne
  401408:	2900      	cmpne	r1, #0
  40140a:	d002      	beq.n	401412 <usart_async_write+0x16>
  40140c:	b9da      	cbnz	r2, 401446 <usart_async_write+0x4a>
  40140e:	2000      	movs	r0, #0
  401410:	e000      	b.n	401414 <usart_async_write+0x18>
  401412:	2000      	movs	r0, #0
  401414:	f240 123b 	movw	r2, #315	; 0x13b
  401418:	490d      	ldr	r1, [pc, #52]	; (401450 <usart_async_write+0x54>)
  40141a:	4b0e      	ldr	r3, [pc, #56]	; (401454 <usart_async_write+0x58>)
  40141c:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
  40141e:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  401422:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  401426:	429a      	cmp	r2, r3
  401428:	d10f      	bne.n	40144a <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
  40142a:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
  40142c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
  401430:	2300      	movs	r3, #0
  401432:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  401436:	2301      	movs	r3, #1
  401438:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  40143a:	f104 0008 	add.w	r0, r4, #8
  40143e:	4b06      	ldr	r3, [pc, #24]	; (401458 <usart_async_write+0x5c>)
  401440:	4798      	blx	r3
	return (int32_t)length;
  401442:	4628      	mov	r0, r5
  401444:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
  401446:	2001      	movs	r0, #1
  401448:	e7e4      	b.n	401414 <usart_async_write+0x18>
		return ERR_NO_RESOURCE;
  40144a:	f06f 001b 	mvn.w	r0, #27
}
  40144e:	bd70      	pop	{r4, r5, r6, pc}
  401450:	00403988 	.word	0x00403988
  401454:	00401641 	.word	0x00401641
  401458:	00401fb5 	.word	0x00401fb5

0040145c <usart_process_byte_sent>:
{
  40145c:	b510      	push	{r4, lr}
  40145e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
  401460:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  401462:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  401466:	4293      	cmp	r3, r2
  401468:	d009      	beq.n	40147e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  40146a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40146c:	1c59      	adds	r1, r3, #1
  40146e:	8781      	strh	r1, [r0, #60]	; 0x3c
  401470:	5cd1      	ldrb	r1, [r2, r3]
  401472:	4b04      	ldr	r3, [pc, #16]	; (401484 <usart_process_byte_sent+0x28>)
  401474:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  401476:	4620      	mov	r0, r4
  401478:	4b03      	ldr	r3, [pc, #12]	; (401488 <usart_process_byte_sent+0x2c>)
  40147a:	4798      	blx	r3
  40147c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
  40147e:	4b03      	ldr	r3, [pc, #12]	; (40148c <usart_process_byte_sent+0x30>)
  401480:	4798      	blx	r3
  401482:	bd10      	pop	{r4, pc}
  401484:	00401f91 	.word	0x00401f91
  401488:	00401fb5 	.word	0x00401fb5
  40148c:	00401fd9 	.word	0x00401fd9

00401490 <usart_async_read>:
{
  401490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401494:	b082      	sub	sp, #8
  401496:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
  401498:	4605      	mov	r5, r0
  40149a:	4688      	mov	r8, r1
  40149c:	2800      	cmp	r0, #0
  40149e:	bf18      	it	ne
  4014a0:	2900      	cmpne	r1, #0
  4014a2:	d002      	beq.n	4014aa <usart_async_read+0x1a>
  4014a4:	b9a2      	cbnz	r2, 4014d0 <usart_async_read+0x40>
  4014a6:	2000      	movs	r0, #0
  4014a8:	e000      	b.n	4014ac <usart_async_read+0x1c>
  4014aa:	2000      	movs	r0, #0
  4014ac:	f44f 72ac 	mov.w	r2, #344	; 0x158
  4014b0:	4910      	ldr	r1, [pc, #64]	; (4014f4 <usart_async_read+0x64>)
  4014b2:	4b11      	ldr	r3, [pc, #68]	; (4014f8 <usart_async_read+0x68>)
  4014b4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
  4014b6:	a801      	add	r0, sp, #4
  4014b8:	4b10      	ldr	r3, [pc, #64]	; (4014fc <usart_async_read+0x6c>)
  4014ba:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  4014bc:	3534      	adds	r5, #52	; 0x34
  4014be:	4628      	mov	r0, r5
  4014c0:	4b0f      	ldr	r3, [pc, #60]	; (401500 <usart_async_read+0x70>)
  4014c2:	4798      	blx	r3
  4014c4:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
  4014c6:	a801      	add	r0, sp, #4
  4014c8:	4b0e      	ldr	r3, [pc, #56]	; (401504 <usart_async_read+0x74>)
  4014ca:	4798      	blx	r3
	uint16_t                       was_read = 0;
  4014cc:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
  4014ce:	e007      	b.n	4014e0 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
  4014d0:	2001      	movs	r0, #1
  4014d2:	e7eb      	b.n	4014ac <usart_async_read+0x1c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  4014d4:	3401      	adds	r4, #1
  4014d6:	b2a4      	uxth	r4, r4
  4014d8:	4441      	add	r1, r8
  4014da:	4628      	mov	r0, r5
  4014dc:	4b0a      	ldr	r3, [pc, #40]	; (401508 <usart_async_read+0x78>)
  4014de:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  4014e0:	4621      	mov	r1, r4
  4014e2:	42a6      	cmp	r6, r4
  4014e4:	d901      	bls.n	4014ea <usart_async_read+0x5a>
  4014e6:	42bc      	cmp	r4, r7
  4014e8:	d3f4      	bcc.n	4014d4 <usart_async_read+0x44>
}
  4014ea:	4620      	mov	r0, r4
  4014ec:	b002      	add	sp, #8
  4014ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014f2:	bf00      	nop
  4014f4:	00403988 	.word	0x00403988
  4014f8:	00401641 	.word	0x00401641
  4014fc:	00400f55 	.word	0x00400f55
  401500:	00401769 	.word	0x00401769
  401504:	00400f63 	.word	0x00400f63
  401508:	004016e5 	.word	0x004016e5

0040150c <usart_async_init>:
{
  40150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40150e:	4615      	mov	r5, r2
  401510:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  401512:	4604      	mov	r4, r0
  401514:	460f      	mov	r7, r1
  401516:	2800      	cmp	r0, #0
  401518:	bf18      	it	ne
  40151a:	2900      	cmpne	r1, #0
  40151c:	d008      	beq.n	401530 <usart_async_init+0x24>
  40151e:	1c13      	adds	r3, r2, #0
  401520:	bf18      	it	ne
  401522:	2301      	movne	r3, #1
  401524:	b116      	cbz	r6, 40152c <usart_async_init+0x20>
  401526:	b10b      	cbz	r3, 40152c <usart_async_init+0x20>
  401528:	2001      	movs	r0, #1
  40152a:	e002      	b.n	401532 <usart_async_init+0x26>
  40152c:	2000      	movs	r0, #0
  40152e:	e000      	b.n	401532 <usart_async_init+0x26>
  401530:	2000      	movs	r0, #0
  401532:	223a      	movs	r2, #58	; 0x3a
  401534:	4910      	ldr	r1, [pc, #64]	; (401578 <usart_async_init+0x6c>)
  401536:	4b11      	ldr	r3, [pc, #68]	; (40157c <usart_async_init+0x70>)
  401538:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  40153a:	4632      	mov	r2, r6
  40153c:	4629      	mov	r1, r5
  40153e:	f104 0034 	add.w	r0, r4, #52	; 0x34
  401542:	4b0f      	ldr	r3, [pc, #60]	; (401580 <usart_async_init+0x74>)
  401544:	4798      	blx	r3
  401546:	b9a0      	cbnz	r0, 401572 <usart_async_init+0x66>
	init_status = _usart_async_init(&descr->device, hw);
  401548:	4639      	mov	r1, r7
  40154a:	f104 0008 	add.w	r0, r4, #8
  40154e:	4b0d      	ldr	r3, [pc, #52]	; (401584 <usart_async_init+0x78>)
  401550:	4798      	blx	r3
	if (init_status) {
  401552:	4603      	mov	r3, r0
  401554:	b958      	cbnz	r0, 40156e <usart_async_init+0x62>
	descr->io.read  = usart_async_read;
  401556:	4a0c      	ldr	r2, [pc, #48]	; (401588 <usart_async_init+0x7c>)
  401558:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
  40155a:	4a0c      	ldr	r2, [pc, #48]	; (40158c <usart_async_init+0x80>)
  40155c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  40155e:	4a0c      	ldr	r2, [pc, #48]	; (401590 <usart_async_init+0x84>)
  401560:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  401562:	4a0c      	ldr	r2, [pc, #48]	; (401594 <usart_async_init+0x88>)
  401564:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  401566:	4a0c      	ldr	r2, [pc, #48]	; (401598 <usart_async_init+0x8c>)
  401568:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  40156a:	4a0c      	ldr	r2, [pc, #48]	; (40159c <usart_async_init+0x90>)
  40156c:	6162      	str	r2, [r4, #20]
}
  40156e:	4618      	mov	r0, r3
  401570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
  401572:	f06f 030c 	mvn.w	r3, #12
  401576:	e7fa      	b.n	40156e <usart_async_init+0x62>
  401578:	00403988 	.word	0x00403988
  40157c:	00401641 	.word	0x00401641
  401580:	004016a1 	.word	0x004016a1
  401584:	00401eb1 	.word	0x00401eb1
  401588:	00401491 	.word	0x00401491
  40158c:	004013fd 	.word	0x004013fd
  401590:	0040145d 	.word	0x0040145d
  401594:	004013e1 	.word	0x004013e1
  401598:	004013b9 	.word	0x004013b9
  40159c:	004013cd 	.word	0x004013cd

004015a0 <usart_async_enable>:
{
  4015a0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4015a2:	4604      	mov	r4, r0
  4015a4:	2261      	movs	r2, #97	; 0x61
  4015a6:	4906      	ldr	r1, [pc, #24]	; (4015c0 <usart_async_enable+0x20>)
  4015a8:	3000      	adds	r0, #0
  4015aa:	bf18      	it	ne
  4015ac:	2001      	movne	r0, #1
  4015ae:	4b05      	ldr	r3, [pc, #20]	; (4015c4 <usart_async_enable+0x24>)
  4015b0:	4798      	blx	r3
	_usart_async_enable(&descr->device);
  4015b2:	f104 0008 	add.w	r0, r4, #8
  4015b6:	4b04      	ldr	r3, [pc, #16]	; (4015c8 <usart_async_enable+0x28>)
  4015b8:	4798      	blx	r3
}
  4015ba:	2000      	movs	r0, #0
  4015bc:	bd10      	pop	{r4, pc}
  4015be:	bf00      	nop
  4015c0:	00403988 	.word	0x00403988
  4015c4:	00401641 	.word	0x00401641
  4015c8:	00401f5d 	.word	0x00401f5d

004015cc <usart_async_register_callback>:
{
  4015cc:	b570      	push	{r4, r5, r6, lr}
  4015ce:	460c      	mov	r4, r1
  4015d0:	4616      	mov	r6, r2
	ASSERT(descr);
  4015d2:	4605      	mov	r5, r0
  4015d4:	2283      	movs	r2, #131	; 0x83
  4015d6:	4917      	ldr	r1, [pc, #92]	; (401634 <usart_async_register_callback+0x68>)
  4015d8:	3000      	adds	r0, #0
  4015da:	bf18      	it	ne
  4015dc:	2001      	movne	r0, #1
  4015de:	4b16      	ldr	r3, [pc, #88]	; (401638 <usart_async_register_callback+0x6c>)
  4015e0:	4798      	blx	r3
	switch (type) {
  4015e2:	2c01      	cmp	r4, #1
  4015e4:	d010      	beq.n	401608 <usart_async_register_callback+0x3c>
  4015e6:	b124      	cbz	r4, 4015f2 <usart_async_register_callback+0x26>
  4015e8:	2c02      	cmp	r4, #2
  4015ea:	d018      	beq.n	40161e <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
  4015ec:	f06f 000c 	mvn.w	r0, #12
}
  4015f0:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
  4015f2:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
  4015f4:	1c32      	adds	r2, r6, #0
  4015f6:	bf18      	it	ne
  4015f8:	2201      	movne	r2, #1
  4015fa:	2101      	movs	r1, #1
  4015fc:	f105 0008 	add.w	r0, r5, #8
  401600:	4b0e      	ldr	r3, [pc, #56]	; (40163c <usart_async_register_callback+0x70>)
  401602:	4798      	blx	r3
	return ERR_NONE;
  401604:	2000      	movs	r0, #0
		break;
  401606:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
  401608:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
  40160a:	1c32      	adds	r2, r6, #0
  40160c:	bf18      	it	ne
  40160e:	2201      	movne	r2, #1
  401610:	2102      	movs	r1, #2
  401612:	f105 0008 	add.w	r0, r5, #8
  401616:	4b09      	ldr	r3, [pc, #36]	; (40163c <usart_async_register_callback+0x70>)
  401618:	4798      	blx	r3
	return ERR_NONE;
  40161a:	2000      	movs	r0, #0
		break;
  40161c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
  40161e:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
  401620:	1c32      	adds	r2, r6, #0
  401622:	bf18      	it	ne
  401624:	2201      	movne	r2, #1
  401626:	2103      	movs	r1, #3
  401628:	f105 0008 	add.w	r0, r5, #8
  40162c:	4b03      	ldr	r3, [pc, #12]	; (40163c <usart_async_register_callback+0x70>)
  40162e:	4798      	blx	r3
	return ERR_NONE;
  401630:	2000      	movs	r0, #0
		break;
  401632:	bd70      	pop	{r4, r5, r6, pc}
  401634:	00403988 	.word	0x00403988
  401638:	00401641 	.word	0x00401641
  40163c:	00402001 	.word	0x00402001

00401640 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401640:	b900      	cbnz	r0, 401644 <assert+0x4>
		__asm("BKPT #0");
  401642:	be00      	bkpt	0x0000
  401644:	4770      	bx	lr

00401646 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401646:	6803      	ldr	r3, [r0, #0]
  401648:	b11b      	cbz	r3, 401652 <is_list_element+0xc>
		if (it == element) {
  40164a:	428b      	cmp	r3, r1
  40164c:	d003      	beq.n	401656 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  40164e:	681b      	ldr	r3, [r3, #0]
  401650:	e7fa      	b.n	401648 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401652:	2000      	movs	r0, #0
  401654:	4770      	bx	lr
			return true;
  401656:	2001      	movs	r0, #1
}
  401658:	4770      	bx	lr
	...

0040165c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  40165c:	b538      	push	{r3, r4, r5, lr}
  40165e:	4604      	mov	r4, r0
  401660:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401662:	4b06      	ldr	r3, [pc, #24]	; (40167c <list_insert_as_head+0x20>)
  401664:	4798      	blx	r3
  401666:	f080 0001 	eor.w	r0, r0, #1
  40166a:	2239      	movs	r2, #57	; 0x39
  40166c:	4904      	ldr	r1, [pc, #16]	; (401680 <list_insert_as_head+0x24>)
  40166e:	b2c0      	uxtb	r0, r0
  401670:	4b04      	ldr	r3, [pc, #16]	; (401684 <list_insert_as_head+0x28>)
  401672:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401674:	6823      	ldr	r3, [r4, #0]
  401676:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401678:	6025      	str	r5, [r4, #0]
  40167a:	bd38      	pop	{r3, r4, r5, pc}
  40167c:	00401647 	.word	0x00401647
  401680:	004039a8 	.word	0x004039a8
  401684:	00401641 	.word	0x00401641

00401688 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401688:	6803      	ldr	r3, [r0, #0]
  40168a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  40168c:	6001      	str	r1, [r0, #0]
  40168e:	4770      	bx	lr

00401690 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401690:	6803      	ldr	r3, [r0, #0]
  401692:	b11b      	cbz	r3, 40169c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401694:	681a      	ldr	r2, [r3, #0]
  401696:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401698:	4618      	mov	r0, r3
  40169a:	4770      	bx	lr
	}

	return NULL;
  40169c:	2000      	movs	r0, #0
}
  40169e:	4770      	bx	lr

004016a0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4016a0:	b570      	push	{r4, r5, r6, lr}
  4016a2:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  4016a4:	4604      	mov	r4, r0
  4016a6:	460e      	mov	r6, r1
  4016a8:	2800      	cmp	r0, #0
  4016aa:	bf18      	it	ne
  4016ac:	2900      	cmpne	r1, #0
  4016ae:	d002      	beq.n	4016b6 <ringbuffer_init+0x16>
  4016b0:	b97a      	cbnz	r2, 4016d2 <ringbuffer_init+0x32>
  4016b2:	2000      	movs	r0, #0
  4016b4:	e000      	b.n	4016b8 <ringbuffer_init+0x18>
  4016b6:	2000      	movs	r0, #0
  4016b8:	2228      	movs	r2, #40	; 0x28
  4016ba:	4908      	ldr	r1, [pc, #32]	; (4016dc <ringbuffer_init+0x3c>)
  4016bc:	4b08      	ldr	r3, [pc, #32]	; (4016e0 <ringbuffer_init+0x40>)
  4016be:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4016c0:	1e6b      	subs	r3, r5, #1
  4016c2:	421d      	tst	r5, r3
  4016c4:	d107      	bne.n	4016d6 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4016c6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4016c8:	2000      	movs	r0, #0
  4016ca:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4016cc:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4016ce:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4016d0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4016d2:	2001      	movs	r0, #1
  4016d4:	e7f0      	b.n	4016b8 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4016d6:	f06f 000c 	mvn.w	r0, #12
}
  4016da:	bd70      	pop	{r4, r5, r6, pc}
  4016dc:	004039c8 	.word	0x004039c8
  4016e0:	00401641 	.word	0x00401641

004016e4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  4016e4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb && data);
  4016e6:	4604      	mov	r4, r0
  4016e8:	460d      	mov	r5, r1
  4016ea:	2800      	cmp	r0, #0
  4016ec:	bf18      	it	ne
  4016ee:	2900      	cmpne	r1, #0
  4016f0:	bf14      	ite	ne
  4016f2:	2001      	movne	r0, #1
  4016f4:	2000      	moveq	r0, #0
  4016f6:	2240      	movs	r2, #64	; 0x40
  4016f8:	4909      	ldr	r1, [pc, #36]	; (401720 <ringbuffer_get+0x3c>)
  4016fa:	4b0a      	ldr	r3, [pc, #40]	; (401724 <ringbuffer_get+0x40>)
  4016fc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  4016fe:	68e2      	ldr	r2, [r4, #12]
  401700:	68a3      	ldr	r3, [r4, #8]
  401702:	429a      	cmp	r2, r3
  401704:	d009      	beq.n	40171a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
  401706:	6822      	ldr	r2, [r4, #0]
  401708:	6861      	ldr	r1, [r4, #4]
  40170a:	400b      	ands	r3, r1
  40170c:	5cd3      	ldrb	r3, [r2, r3]
  40170e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
  401710:	68a3      	ldr	r3, [r4, #8]
  401712:	3301      	adds	r3, #1
  401714:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
  401716:	2000      	movs	r0, #0
  401718:	bd38      	pop	{r3, r4, r5, pc}
	}

	return ERR_NOT_FOUND;
  40171a:	f06f 0009 	mvn.w	r0, #9
}
  40171e:	bd38      	pop	{r3, r4, r5, pc}
  401720:	004039c8 	.word	0x004039c8
  401724:	00401641 	.word	0x00401641

00401728 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401728:	b538      	push	{r3, r4, r5, lr}
  40172a:	460d      	mov	r5, r1
	ASSERT(rb);
  40172c:	4604      	mov	r4, r0
  40172e:	2251      	movs	r2, #81	; 0x51
  401730:	490b      	ldr	r1, [pc, #44]	; (401760 <ringbuffer_put+0x38>)
  401732:	3000      	adds	r0, #0
  401734:	bf18      	it	ne
  401736:	2001      	movne	r0, #1
  401738:	4b0a      	ldr	r3, [pc, #40]	; (401764 <ringbuffer_put+0x3c>)
  40173a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  40173c:	6822      	ldr	r2, [r4, #0]
  40173e:	68e3      	ldr	r3, [r4, #12]
  401740:	6861      	ldr	r1, [r4, #4]
  401742:	400b      	ands	r3, r1
  401744:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401746:	68e3      	ldr	r3, [r4, #12]
  401748:	68a2      	ldr	r2, [r4, #8]
  40174a:	1a9a      	subs	r2, r3, r2
  40174c:	6861      	ldr	r1, [r4, #4]
  40174e:	428a      	cmp	r2, r1
  401750:	d901      	bls.n	401756 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401752:	1a59      	subs	r1, r3, r1
  401754:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401756:	3301      	adds	r3, #1
  401758:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  40175a:	2000      	movs	r0, #0
  40175c:	bd38      	pop	{r3, r4, r5, pc}
  40175e:	bf00      	nop
  401760:	004039c8 	.word	0x004039c8
  401764:	00401641 	.word	0x00401641

00401768 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  401768:	b510      	push	{r4, lr}
	ASSERT(rb);
  40176a:	4604      	mov	r4, r0
  40176c:	2267      	movs	r2, #103	; 0x67
  40176e:	4905      	ldr	r1, [pc, #20]	; (401784 <ringbuffer_num+0x1c>)
  401770:	3000      	adds	r0, #0
  401772:	bf18      	it	ne
  401774:	2001      	movne	r0, #1
  401776:	4b04      	ldr	r3, [pc, #16]	; (401788 <ringbuffer_num+0x20>)
  401778:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  40177a:	68e0      	ldr	r0, [r4, #12]
  40177c:	68a3      	ldr	r3, [r4, #8]
}
  40177e:	1ac0      	subs	r0, r0, r3
  401780:	bd10      	pop	{r4, pc}
  401782:	bf00      	nop
  401784:	004039c8 	.word	0x004039c8
  401788:	00401641 	.word	0x00401641

0040178c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  40178c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40178e:	4a06      	ldr	r2, [pc, #24]	; (4017a8 <_sbrk+0x1c>)
  401790:	6812      	ldr	r2, [r2, #0]
  401792:	b122      	cbz	r2, 40179e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401794:	4a04      	ldr	r2, [pc, #16]	; (4017a8 <_sbrk+0x1c>)
  401796:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401798:	4403      	add	r3, r0
  40179a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  40179c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40179e:	4903      	ldr	r1, [pc, #12]	; (4017ac <_sbrk+0x20>)
  4017a0:	4a01      	ldr	r2, [pc, #4]	; (4017a8 <_sbrk+0x1c>)
  4017a2:	6011      	str	r1, [r2, #0]
  4017a4:	e7f6      	b.n	401794 <_sbrk+0x8>
  4017a6:	bf00      	nop
  4017a8:	20400480 	.word	0x20400480
  4017ac:	20401c78 	.word	0x20401c78

004017b0 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  4017b0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4017b2:	2b00      	cmp	r3, #0
  4017b4:	db09      	blt.n	4017ca <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017b6:	095b      	lsrs	r3, r3, #5
  4017b8:	f000 001f 	and.w	r0, r0, #31
  4017bc:	2201      	movs	r2, #1
  4017be:	fa02 f000 	lsl.w	r0, r2, r0
  4017c2:	3340      	adds	r3, #64	; 0x40
  4017c4:	4a01      	ldr	r2, [pc, #4]	; (4017cc <_irq_set+0x1c>)
  4017c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  4017ca:	4770      	bx	lr
  4017cc:	e000e100 	.word	0xe000e100

004017d0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4017d0:	b500      	push	{lr}
  4017d2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4017d4:	a801      	add	r0, sp, #4
  4017d6:	4b0e      	ldr	r3, [pc, #56]	; (401810 <_init_chip+0x40>)
  4017d8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4017da:	4a0e      	ldr	r2, [pc, #56]	; (401814 <_init_chip+0x44>)
  4017dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4017e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017ec:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4017f0:	a801      	add	r0, sp, #4
  4017f2:	4b09      	ldr	r3, [pc, #36]	; (401818 <_init_chip+0x48>)
  4017f4:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4017f6:	4a09      	ldr	r2, [pc, #36]	; (40181c <_init_chip+0x4c>)
  4017f8:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4017fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4017fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401802:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  401804:	4b06      	ldr	r3, [pc, #24]	; (401820 <_init_chip+0x50>)
  401806:	4798      	blx	r3
}
  401808:	b003      	add	sp, #12
  40180a:	f85d fb04 	ldr.w	pc, [sp], #4
  40180e:	bf00      	nop
  401810:	00400f55 	.word	0x00400f55
  401814:	e000ed00 	.word	0xe000ed00
  401818:	00400f63 	.word	0x00400f63
  40181c:	400e0c00 	.word	0x400e0c00
  401820:	004018c1 	.word	0x004018c1

00401824 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401824:	490e      	ldr	r1, [pc, #56]	; (401860 <_pmc_init_sources+0x3c>)
  401826:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401828:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  40182c:	4b0d      	ldr	r3, [pc, #52]	; (401864 <_pmc_init_sources+0x40>)
  40182e:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401830:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401832:	4b0b      	ldr	r3, [pc, #44]	; (401860 <_pmc_init_sources+0x3c>)
  401834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401836:	f013 0f01 	tst.w	r3, #1
  40183a:	d0fa      	beq.n	401832 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  40183c:	4b08      	ldr	r3, [pc, #32]	; (401860 <_pmc_init_sources+0x3c>)
  40183e:	6a19      	ldr	r1, [r3, #32]
  401840:	4a09      	ldr	r2, [pc, #36]	; (401868 <_pmc_init_sources+0x44>)
  401842:	430a      	orrs	r2, r1
  401844:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401846:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401848:	4a08      	ldr	r2, [pc, #32]	; (40186c <_pmc_init_sources+0x48>)
  40184a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  40184c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40184e:	4a08      	ldr	r2, [pc, #32]	; (401870 <_pmc_init_sources+0x4c>)
  401850:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401852:	4b03      	ldr	r3, [pc, #12]	; (401860 <_pmc_init_sources+0x3c>)
  401854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401856:	f013 0f02 	tst.w	r3, #2
  40185a:	d0fa      	beq.n	401852 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  40185c:	4770      	bx	lr
  40185e:	bf00      	nop
  401860:	400e0600 	.word	0x400e0600
  401864:	00373e01 	.word	0x00373e01
  401868:	01370000 	.word	0x01370000
  40186c:	f800ffff 	.word	0xf800ffff
  401870:	20183f01 	.word	0x20183f01

00401874 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401874:	4a11      	ldr	r2, [pc, #68]	; (4018bc <_pmc_init_master_clock+0x48>)
  401876:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  40187c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40187e:	4b0f      	ldr	r3, [pc, #60]	; (4018bc <_pmc_init_master_clock+0x48>)
  401880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401882:	f013 0f08 	tst.w	r3, #8
  401886:	d0fa      	beq.n	40187e <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401888:	4a0c      	ldr	r2, [pc, #48]	; (4018bc <_pmc_init_master_clock+0x48>)
  40188a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40188c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401894:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401896:	4b09      	ldr	r3, [pc, #36]	; (4018bc <_pmc_init_master_clock+0x48>)
  401898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40189a:	f013 0f08 	tst.w	r3, #8
  40189e:	d0fa      	beq.n	401896 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4018a0:	4a06      	ldr	r2, [pc, #24]	; (4018bc <_pmc_init_master_clock+0x48>)
  4018a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4018a4:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4018a8:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4018ac:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4018ae:	4b03      	ldr	r3, [pc, #12]	; (4018bc <_pmc_init_master_clock+0x48>)
  4018b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4018b2:	f013 0f08 	tst.w	r3, #8
  4018b6:	d0fa      	beq.n	4018ae <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4018b8:	4770      	bx	lr
  4018ba:	bf00      	nop
  4018bc:	400e0600 	.word	0x400e0600

004018c0 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4018c0:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4018c2:	4b02      	ldr	r3, [pc, #8]	; (4018cc <_pmc_init+0xc>)
  4018c4:	4798      	blx	r3
	_pmc_init_master_clock();
  4018c6:	4b02      	ldr	r3, [pc, #8]	; (4018d0 <_pmc_init+0x10>)
  4018c8:	4798      	blx	r3
  4018ca:	bd08      	pop	{r3, pc}
  4018cc:	00401825 	.word	0x00401825
  4018d0:	00401875 	.word	0x00401875

004018d4 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4018d4:	2301      	movs	r3, #1
  4018d6:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  4018d8:	2000      	movs	r0, #0
  4018da:	4770      	bx	lr

004018dc <_spi_set_baudrate>:
	tmp = ((Spi *)hw)->SPI_CSR[index];
  4018dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
	tmp &= ~SPI_CSR_SCBR_Msk;
  4018de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	tmp |= SPI_CSR_SCBR(data);
  4018e2:	0209      	lsls	r1, r1, #8
  4018e4:	b289      	uxth	r1, r1
  4018e6:	430b      	orrs	r3, r1
	((Spi *)hw)->SPI_CSR[index] = tmp;
  4018e8:	6303      	str	r3, [r0, #48]	; 0x30
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);

	return ERR_NONE;
}
  4018ea:	2000      	movs	r0, #0
  4018ec:	4770      	bx	lr
	...

004018f0 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4018f0:	4b04      	ldr	r3, [pc, #16]	; (401904 <_spi_get_hardware_index+0x14>)
  4018f2:	4403      	add	r3, r0
  4018f4:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  4018f8:	2b05      	cmp	r3, #5
  4018fa:	d001      	beq.n	401900 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  4018fc:	2000      	movs	r0, #0
	}
}
  4018fe:	4770      	bx	lr
		return 1;
  401900:	2001      	movs	r0, #1
  401902:	4770      	bx	lr
  401904:	bfff8000 	.word	0xbfff8000

00401908 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  401908:	b570      	push	{r4, r5, r6, lr}
  40190a:	4606      	mov	r6, r0
  40190c:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  40190e:	4608      	mov	r0, r1
  401910:	4b20      	ldr	r3, [pc, #128]	; (401994 <_spi_m_sync_init+0x8c>)
  401912:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401914:	2300      	movs	r3, #0
  401916:	b33b      	cbz	r3, 401968 <_spi_m_sync_init+0x60>
	return NULL;
  401918:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  40191a:	f44f 729a 	mov.w	r2, #308	; 0x134
  40191e:	491e      	ldr	r1, [pc, #120]	; (401998 <_spi_m_sync_init+0x90>)
  401920:	2e00      	cmp	r6, #0
  401922:	bf18      	it	ne
  401924:	2c00      	cmpne	r4, #0
  401926:	bf14      	ite	ne
  401928:	2001      	movne	r0, #1
  40192a:	2000      	moveq	r0, #0
  40192c:	4b1b      	ldr	r3, [pc, #108]	; (40199c <_spi_m_sync_init+0x94>)
  40192e:	4798      	blx	r3

	if (regs == NULL) {
  401930:	b355      	cbz	r5, 401988 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401932:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  401934:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401938:	d129      	bne.n	40198e <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  40193a:	2380      	movs	r3, #128	; 0x80
  40193c:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  40193e:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  401940:	686a      	ldr	r2, [r5, #4]
  401942:	4b17      	ldr	r3, [pc, #92]	; (4019a0 <_spi_m_sync_init+0x98>)
  401944:	4013      	ands	r3, r2
  401946:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  401948:	68ab      	ldr	r3, [r5, #8]
  40194a:	4a16      	ldr	r2, [pc, #88]	; (4019a4 <_spi_m_sync_init+0x9c>)
  40194c:	401a      	ands	r2, r3
  40194e:	4b16      	ldr	r3, [pc, #88]	; (4019a8 <_spi_m_sync_init+0xa0>)
  401950:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  401952:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  401954:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  401956:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  401958:	8a2b      	ldrh	r3, [r5, #16]
  40195a:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  40195c:	68eb      	ldr	r3, [r5, #12]
  40195e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  401962:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  401964:	2000      	movs	r0, #0
  401966:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  401968:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40196c:	008a      	lsls	r2, r1, #2
  40196e:	490f      	ldr	r1, [pc, #60]	; (4019ac <_spi_m_sync_init+0xa4>)
  401970:	5c8a      	ldrb	r2, [r1, r2]
  401972:	4290      	cmp	r0, r2
  401974:	d002      	beq.n	40197c <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401976:	3301      	adds	r3, #1
  401978:	b2db      	uxtb	r3, r3
  40197a:	e7cc      	b.n	401916 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  40197c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401980:	00ab      	lsls	r3, r5, #2
  401982:	460d      	mov	r5, r1
  401984:	441d      	add	r5, r3
  401986:	e7c8      	b.n	40191a <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  401988:	f06f 000c 	mvn.w	r0, #12
  40198c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  40198e:	f06f 0010 	mvn.w	r0, #16
}
  401992:	bd70      	pop	{r4, r5, r6, pc}
  401994:	004018f1 	.word	0x004018f1
  401998:	00403a00 	.word	0x00403a00
  40199c:	00401641 	.word	0x00401641
  4019a0:	feffff7c 	.word	0xfeffff7c
  4019a4:	fff1ff6f 	.word	0xfff1ff6f
  4019a8:	000e0010 	.word	0x000e0010
  4019ac:	004039ec 	.word	0x004039ec

004019b0 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  4019b0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  4019b2:	4604      	mov	r4, r0
  4019b4:	b168      	cbz	r0, 4019d2 <_spi_m_sync_enable+0x22>
  4019b6:	6803      	ldr	r3, [r0, #0]
  4019b8:	b14b      	cbz	r3, 4019ce <_spi_m_sync_enable+0x1e>
  4019ba:	2001      	movs	r0, #1
  4019bc:	f44f 72b9 	mov.w	r2, #370	; 0x172
  4019c0:	4905      	ldr	r1, [pc, #20]	; (4019d8 <_spi_m_sync_enable+0x28>)
  4019c2:	4b06      	ldr	r3, [pc, #24]	; (4019dc <_spi_m_sync_enable+0x2c>)
  4019c4:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  4019c6:	6820      	ldr	r0, [r4, #0]
  4019c8:	4b05      	ldr	r3, [pc, #20]	; (4019e0 <_spi_m_sync_enable+0x30>)
  4019ca:	4798      	blx	r3
}
  4019cc:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  4019ce:	2000      	movs	r0, #0
  4019d0:	e7f4      	b.n	4019bc <_spi_m_sync_enable+0xc>
  4019d2:	2000      	movs	r0, #0
  4019d4:	e7f2      	b.n	4019bc <_spi_m_sync_enable+0xc>
  4019d6:	bf00      	nop
  4019d8:	00403a00 	.word	0x00403a00
  4019dc:	00401641 	.word	0x00401641
  4019e0:	004018d5 	.word	0x004018d5

004019e4 <_spi_m_sync_set_baudrate>:
	rc = clk / baud;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
  4019e4:	b538      	push	{r3, r4, r5, lr}
  4019e6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  4019e8:	4604      	mov	r4, r0
  4019ea:	b170      	cbz	r0, 401a0a <_spi_m_sync_set_baudrate+0x26>
  4019ec:	6803      	ldr	r3, [r0, #0]
  4019ee:	b153      	cbz	r3, 401a06 <_spi_m_sync_set_baudrate+0x22>
  4019f0:	2001      	movs	r0, #1
  4019f2:	f240 12af 	movw	r2, #431	; 0x1af
  4019f6:	4906      	ldr	r1, [pc, #24]	; (401a10 <_spi_m_sync_set_baudrate+0x2c>)
  4019f8:	4b06      	ldr	r3, [pc, #24]	; (401a14 <_spi_m_sync_set_baudrate+0x30>)
  4019fa:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  4019fc:	4629      	mov	r1, r5
  4019fe:	6820      	ldr	r0, [r4, #0]
  401a00:	4b05      	ldr	r3, [pc, #20]	; (401a18 <_spi_m_sync_set_baudrate+0x34>)
  401a02:	4798      	blx	r3
}
  401a04:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  401a06:	2000      	movs	r0, #0
  401a08:	e7f3      	b.n	4019f2 <_spi_m_sync_set_baudrate+0xe>
  401a0a:	2000      	movs	r0, #0
  401a0c:	e7f1      	b.n	4019f2 <_spi_m_sync_set_baudrate+0xe>
  401a0e:	bf00      	nop
  401a10:	00403a00 	.word	0x00403a00
  401a14:	00401641 	.word	0x00401641
  401a18:	004018dd 	.word	0x004018dd

00401a1c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  401a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a20:	b086      	sub	sp, #24
  401a22:	4607      	mov	r7, r0
  401a24:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  401a26:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  401a28:	680b      	ldr	r3, [r1, #0]
  401a2a:	9301      	str	r3, [sp, #4]
  401a2c:	684b      	ldr	r3, [r1, #4]
  401a2e:	9302      	str	r3, [sp, #8]
  401a30:	2300      	movs	r3, #0
  401a32:	9303      	str	r3, [sp, #12]
  401a34:	9304      	str	r3, [sp, #16]
  401a36:	7903      	ldrb	r3, [r0, #4]
  401a38:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  401a3c:	1c26      	adds	r6, r4, #0
  401a3e:	bf18      	it	ne
  401a40:	2601      	movne	r6, #1
  401a42:	f240 2231 	movw	r2, #561	; 0x231
  401a46:	4933      	ldr	r1, [pc, #204]	; (401b14 <_spi_m_sync_trans+0xf8>)
  401a48:	2800      	cmp	r0, #0
  401a4a:	bf0c      	ite	eq
  401a4c:	2000      	moveq	r0, #0
  401a4e:	f006 0001 	andne.w	r0, r6, #1
  401a52:	4b31      	ldr	r3, [pc, #196]	; (401b18 <_spi_m_sync_trans+0xfc>)
  401a54:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401a56:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  401a58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401a5c:	d122      	bne.n	401aa4 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  401a5e:	f06f 0013 	mvn.w	r0, #19
  401a62:	e053      	b.n	401b0c <_spi_m_sync_trans+0xf0>
		return false;
  401a64:	2300      	movs	r3, #0
  401a66:	e035      	b.n	401ad4 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  401a68:	7850      	ldrb	r0, [r2, #1]
  401a6a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  401a6e:	3202      	adds	r2, #2
  401a70:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  401a72:	3301      	adds	r3, #1
  401a74:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  401a76:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  401a78:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  401a7c:	f240 2222 	movw	r2, #546	; 0x222
  401a80:	4924      	ldr	r1, [pc, #144]	; (401b14 <_spi_m_sync_trans+0xf8>)
  401a82:	4630      	mov	r0, r6
  401a84:	4b24      	ldr	r3, [pc, #144]	; (401b18 <_spi_m_sync_trans+0xfc>)
  401a86:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  401a88:	f018 0f08 	tst.w	r8, #8
  401a8c:	d038      	beq.n	401b00 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  401a8e:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  401a92:	2800      	cmp	r0, #0
  401a94:	db36      	blt.n	401b04 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  401a96:	9803      	ldr	r0, [sp, #12]
  401a98:	68ab      	ldr	r3, [r5, #8]
  401a9a:	4298      	cmp	r0, r3
  401a9c:	d302      	bcc.n	401aa4 <_spi_m_sync_trans+0x88>
  401a9e:	9a04      	ldr	r2, [sp, #16]
  401aa0:	4293      	cmp	r3, r2
  401aa2:	d92f      	bls.n	401b04 <_spi_m_sync_trans+0xe8>
  401aa4:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  401aa6:	f013 0f01 	tst.w	r3, #1
  401aaa:	d0db      	beq.n	401a64 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  401aac:	68a3      	ldr	r3, [r4, #8]
  401aae:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  401ab0:	9a02      	ldr	r2, [sp, #8]
  401ab2:	b15a      	cbz	r2, 401acc <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  401ab4:	1c51      	adds	r1, r2, #1
  401ab6:	9102      	str	r1, [sp, #8]
  401ab8:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  401aba:	f89d 2014 	ldrb.w	r2, [sp, #20]
  401abe:	2a01      	cmp	r2, #1
  401ac0:	d904      	bls.n	401acc <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  401ac2:	460a      	mov	r2, r1
  401ac4:	3101      	adds	r1, #1
  401ac6:	9102      	str	r1, [sp, #8]
  401ac8:	0a1b      	lsrs	r3, r3, #8
  401aca:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  401acc:	9b04      	ldr	r3, [sp, #16]
  401ace:	3301      	adds	r3, #1
  401ad0:	9304      	str	r3, [sp, #16]
	return true;
  401ad2:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401ad4:	2b00      	cmp	r3, #0
  401ad6:	d1cf      	bne.n	401a78 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401ad8:	9b03      	ldr	r3, [sp, #12]
  401ada:	9a04      	ldr	r2, [sp, #16]
  401adc:	429a      	cmp	r2, r3
  401ade:	d3cb      	bcc.n	401a78 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  401ae0:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  401ae2:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401ae4:	f012 0f02 	tst.w	r2, #2
  401ae8:	d0c6      	beq.n	401a78 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  401aea:	9a01      	ldr	r2, [sp, #4]
  401aec:	2a00      	cmp	r2, #0
  401aee:	d0c0      	beq.n	401a72 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  401af0:	1c51      	adds	r1, r2, #1
  401af2:	9101      	str	r1, [sp, #4]
  401af4:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401af6:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401afa:	2801      	cmp	r0, #1
  401afc:	d8b4      	bhi.n	401a68 <_spi_m_sync_trans+0x4c>
  401afe:	e7b8      	b.n	401a72 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  401b00:	2000      	movs	r0, #0
  401b02:	e7c6      	b.n	401a92 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401b04:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401b06:	f413 7f00 	tst.w	r3, #512	; 0x200
  401b0a:	d0fb      	beq.n	401b04 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  401b0c:	b006      	add	sp, #24
  401b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b12:	bf00      	nop
  401b14:	00403a00 	.word	0x00403a00
  401b18:	00401641 	.word	0x00401641

00401b1c <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  401b1c:	2000      	movs	r0, #0
  401b1e:	4770      	bx	lr

00401b20 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401b20:	2300      	movs	r3, #0
  401b22:	2b01      	cmp	r3, #1
  401b24:	d815      	bhi.n	401b52 <get_cfg+0x32>
{
  401b26:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401b28:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401b2c:	008a      	lsls	r2, r1, #2
  401b2e:	490a      	ldr	r1, [pc, #40]	; (401b58 <get_cfg+0x38>)
  401b30:	588a      	ldr	r2, [r1, r2]
  401b32:	4282      	cmp	r2, r0
  401b34:	d007      	beq.n	401b46 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401b36:	3301      	adds	r3, #1
  401b38:	b2db      	uxtb	r3, r3
  401b3a:	2b01      	cmp	r3, #1
  401b3c:	d9f4      	bls.n	401b28 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401b3e:	2000      	movs	r0, #0
}
  401b40:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b44:	4770      	bx	lr
			return &(_tcs[i]);
  401b46:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401b4a:	00a3      	lsls	r3, r4, #2
  401b4c:	4608      	mov	r0, r1
  401b4e:	4418      	add	r0, r3
  401b50:	e7f6      	b.n	401b40 <get_cfg+0x20>
	return NULL;
  401b52:	2000      	movs	r0, #0
  401b54:	4770      	bx	lr
  401b56:	bf00      	nop
  401b58:	20400000 	.word	0x20400000

00401b5c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401b5c:	4b06      	ldr	r3, [pc, #24]	; (401b78 <_tc_init_irq_param+0x1c>)
  401b5e:	4298      	cmp	r0, r3
  401b60:	d003      	beq.n	401b6a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC1) {
  401b62:	4b06      	ldr	r3, [pc, #24]	; (401b7c <_tc_init_irq_param+0x20>)
  401b64:	4298      	cmp	r0, r3
  401b66:	d003      	beq.n	401b70 <_tc_init_irq_param+0x14>
  401b68:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401b6a:	4b05      	ldr	r3, [pc, #20]	; (401b80 <_tc_init_irq_param+0x24>)
  401b6c:	6019      	str	r1, [r3, #0]
  401b6e:	e7f8      	b.n	401b62 <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
  401b70:	4b03      	ldr	r3, [pc, #12]	; (401b80 <_tc_init_irq_param+0x24>)
  401b72:	6059      	str	r1, [r3, #4]
	}
}
  401b74:	e7f8      	b.n	401b68 <_tc_init_irq_param+0xc>
  401b76:	bf00      	nop
  401b78:	4000c000 	.word	0x4000c000
  401b7c:	40010000 	.word	0x40010000
  401b80:	20400484 	.word	0x20400484

00401b84 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401b84:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401b86:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401b88:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401b8a:	f013 0f10 	tst.w	r3, #16
  401b8e:	d100      	bne.n	401b92 <tc_interrupt_handler+0xe>
  401b90:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  401b92:	6803      	ldr	r3, [r0, #0]
  401b94:	4798      	blx	r3
	}
}
  401b96:	e7fb      	b.n	401b90 <tc_interrupt_handler+0xc>

00401b98 <_timer_init>:
{
  401b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b9a:	4607      	mov	r7, r0
  401b9c:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  401b9e:	4608      	mov	r0, r1
  401ba0:	4b27      	ldr	r3, [pc, #156]	; (401c40 <_timer_init+0xa8>)
  401ba2:	4798      	blx	r3
  401ba4:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  401ba6:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  401ba8:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  401baa:	2296      	movs	r2, #150	; 0x96
  401bac:	4925      	ldr	r1, [pc, #148]	; (401c44 <_timer_init+0xac>)
  401bae:	2001      	movs	r0, #1
  401bb0:	4b25      	ldr	r3, [pc, #148]	; (401c48 <_timer_init+0xb0>)
  401bb2:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  401bb4:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401bb8:	d001      	beq.n	401bbe <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  401bba:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401bbe:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  401bc0:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401bc2:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  401bc4:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401bc6:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  401bc8:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401bca:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  401bcc:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401bce:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401bd0:	2310      	movs	r3, #16
  401bd2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  401bd4:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  401bd6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  401bda:	4639      	mov	r1, r7
  401bdc:	4620      	mov	r0, r4
  401bde:	4b1b      	ldr	r3, [pc, #108]	; (401c4c <_timer_init+0xb4>)
  401be0:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401be2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401be6:	2b00      	cmp	r3, #0
  401be8:	db0d      	blt.n	401c06 <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bea:	095a      	lsrs	r2, r3, #5
  401bec:	f003 031f 	and.w	r3, r3, #31
  401bf0:	2101      	movs	r1, #1
  401bf2:	fa01 f303 	lsl.w	r3, r1, r3
  401bf6:	3220      	adds	r2, #32
  401bf8:	4915      	ldr	r1, [pc, #84]	; (401c50 <_timer_init+0xb8>)
  401bfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c02:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401c06:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  401c0a:	2b00      	cmp	r3, #0
  401c0c:	db09      	blt.n	401c22 <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c0e:	095a      	lsrs	r2, r3, #5
  401c10:	f003 031f 	and.w	r3, r3, #31
  401c14:	2101      	movs	r1, #1
  401c16:	fa01 f303 	lsl.w	r3, r1, r3
  401c1a:	3260      	adds	r2, #96	; 0x60
  401c1c:	490c      	ldr	r1, [pc, #48]	; (401c50 <_timer_init+0xb8>)
  401c1e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401c22:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401c26:	2b00      	cmp	r3, #0
  401c28:	db08      	blt.n	401c3c <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c2a:	0959      	lsrs	r1, r3, #5
  401c2c:	f003 031f 	and.w	r3, r3, #31
  401c30:	2201      	movs	r2, #1
  401c32:	fa02 f303 	lsl.w	r3, r2, r3
  401c36:	4a06      	ldr	r2, [pc, #24]	; (401c50 <_timer_init+0xb8>)
  401c38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401c3c:	2000      	movs	r0, #0
  401c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c40:	00401b21 	.word	0x00401b21
  401c44:	00403a18 	.word	0x00403a18
  401c48:	00401641 	.word	0x00401641
  401c4c:	00401b5d 	.word	0x00401b5d
  401c50:	e000e100 	.word	0xe000e100

00401c54 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401c54:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  401c56:	2205      	movs	r2, #5
  401c58:	601a      	str	r2, [r3, #0]
  401c5a:	4770      	bx	lr

00401c5c <_timer_stop>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKDIS);
  401c5c:	68c3      	ldr	r3, [r0, #12]
  401c5e:	2202      	movs	r2, #2
  401c60:	601a      	str	r2, [r3, #0]
  401c62:	4770      	bx	lr

00401c64 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  401c64:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  401c66:	6a18      	ldr	r0, [r3, #32]
}
  401c68:	f3c0 4000 	ubfx	r0, r0, #16, #1
  401c6c:	4770      	bx	lr
	...

00401c70 <_timer_set_irq>:
{
  401c70:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  401c72:	68c0      	ldr	r0, [r0, #12]
  401c74:	4b02      	ldr	r3, [pc, #8]	; (401c80 <_timer_set_irq+0x10>)
  401c76:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  401c78:	7900      	ldrb	r0, [r0, #4]
  401c7a:	4b02      	ldr	r3, [pc, #8]	; (401c84 <_timer_set_irq+0x14>)
  401c7c:	4798      	blx	r3
  401c7e:	bd08      	pop	{r3, pc}
  401c80:	00401b21 	.word	0x00401b21
  401c84:	004017b1 	.word	0x004017b1

00401c88 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401c88:	2000      	movs	r0, #0
  401c8a:	4770      	bx	lr

00401c8c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401c8c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  401c8e:	4b02      	ldr	r3, [pc, #8]	; (401c98 <TC0_Handler+0xc>)
  401c90:	6818      	ldr	r0, [r3, #0]
  401c92:	4b02      	ldr	r3, [pc, #8]	; (401c9c <TC0_Handler+0x10>)
  401c94:	4798      	blx	r3
  401c96:	bd08      	pop	{r3, pc}
  401c98:	20400484 	.word	0x20400484
  401c9c:	00401b85 	.word	0x00401b85

00401ca0 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
  401ca0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
  401ca2:	4b02      	ldr	r3, [pc, #8]	; (401cac <TC3_Handler+0xc>)
  401ca4:	6858      	ldr	r0, [r3, #4]
  401ca6:	4b02      	ldr	r3, [pc, #8]	; (401cb0 <TC3_Handler+0x10>)
  401ca8:	4798      	blx	r3
  401caa:	bd08      	pop	{r3, pc}
  401cac:	20400484 	.word	0x20400484
  401cb0:	00401b85 	.word	0x00401b85

00401cb4 <_rand_sync_init>:
#include <err_codes.h>
#include <hpl_rand_sync.h>
#include <utils_assert.h>

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
  401cb4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  401cb6:	4604      	mov	r4, r0
  401cb8:	460d      	mov	r5, r1
  401cba:	2800      	cmp	r0, #0
  401cbc:	bf18      	it	ne
  401cbe:	2900      	cmpne	r1, #0
  401cc0:	bf14      	ite	ne
  401cc2:	2001      	movne	r0, #1
  401cc4:	2000      	moveq	r0, #0
  401cc6:	2228      	movs	r2, #40	; 0x28
  401cc8:	4903      	ldr	r1, [pc, #12]	; (401cd8 <_rand_sync_init+0x24>)
  401cca:	4b04      	ldr	r3, [pc, #16]	; (401cdc <_rand_sync_init+0x28>)
  401ccc:	4798      	blx	r3

	dev->prvt   = hw;
  401cce:	6025      	str	r5, [r4, #0]
	dev->n_bits = 32;
  401cd0:	2320      	movs	r3, #32
  401cd2:	7123      	strb	r3, [r4, #4]

	return ERR_NONE;
}
  401cd4:	2000      	movs	r0, #0
  401cd6:	bd38      	pop	{r3, r4, r5, pc}
  401cd8:	00403a2c 	.word	0x00403a2c
  401cdc:	00401641 	.word	0x00401641

00401ce0 <_usart_init_irq_param>:
/**
 * \brief Init irq param with the given usart hardware instance
 */
static void _usart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
	if (hw == USART1) {
  401ce0:	4b03      	ldr	r3, [pc, #12]	; (401cf0 <_usart_init_irq_param+0x10>)
  401ce2:	4298      	cmp	r0, r3
  401ce4:	d000      	beq.n	401ce8 <_usart_init_irq_param+0x8>
  401ce6:	4770      	bx	lr
		_usart1_dev = dev;
  401ce8:	4b02      	ldr	r3, [pc, #8]	; (401cf4 <_usart_init_irq_param+0x14>)
  401cea:	6019      	str	r1, [r3, #0]
	}
}
  401cec:	e7fb      	b.n	401ce6 <_usart_init_irq_param+0x6>
  401cee:	bf00      	nop
  401cf0:	40028000 	.word	0x40028000
  401cf4:	2040048c 	.word	0x2040048c

00401cf8 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401cf8:	b510      	push	{r4, lr}
	ASSERT(hw);
  401cfa:	4604      	mov	r4, r0
  401cfc:	f240 222f 	movw	r2, #559	; 0x22f
  401d00:	4905      	ldr	r1, [pc, #20]	; (401d18 <_usart_get_hardware_index+0x20>)
  401d02:	3000      	adds	r0, #0
  401d04:	bf18      	it	ne
  401d06:	2001      	movne	r0, #1
  401d08:	4b04      	ldr	r3, [pc, #16]	; (401d1c <_usart_get_hardware_index+0x24>)
  401d0a:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401d0c:	4804      	ldr	r0, [pc, #16]	; (401d20 <_usart_get_hardware_index+0x28>)
  401d0e:	4420      	add	r0, r4
}
  401d10:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401d14:	bd10      	pop	{r4, pc}
  401d16:	bf00      	nop
  401d18:	00403a50 	.word	0x00403a50
  401d1c:	00401641 	.word	0x00401641
  401d20:	bffdc000 	.word	0xbffdc000

00401d24 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401d24:	b510      	push	{r4, lr}
	ASSERT(hw);
  401d26:	4604      	mov	r4, r0
  401d28:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  401d2c:	490e      	ldr	r1, [pc, #56]	; (401d68 <_get_usart_index+0x44>)
  401d2e:	3000      	adds	r0, #0
  401d30:	bf18      	it	ne
  401d32:	2001      	movne	r0, #1
  401d34:	4b0d      	ldr	r3, [pc, #52]	; (401d6c <_get_usart_index+0x48>)
  401d36:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401d38:	4620      	mov	r0, r4
  401d3a:	4b0d      	ldr	r3, [pc, #52]	; (401d70 <_get_usart_index+0x4c>)
  401d3c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401d3e:	2300      	movs	r3, #0
  401d40:	b143      	cbz	r3, 401d54 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401d42:	f240 22be 	movw	r2, #702	; 0x2be
  401d46:	4908      	ldr	r1, [pc, #32]	; (401d68 <_get_usart_index+0x44>)
  401d48:	2000      	movs	r0, #0
  401d4a:	4b08      	ldr	r3, [pc, #32]	; (401d6c <_get_usart_index+0x48>)
  401d4c:	4798      	blx	r3
	return 0;
  401d4e:	2300      	movs	r3, #0
}
  401d50:	4618      	mov	r0, r3
  401d52:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401d54:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401d58:	008a      	lsls	r2, r1, #2
  401d5a:	4906      	ldr	r1, [pc, #24]	; (401d74 <_get_usart_index+0x50>)
  401d5c:	5c8a      	ldrb	r2, [r1, r2]
  401d5e:	4290      	cmp	r0, r2
  401d60:	d0f6      	beq.n	401d50 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401d62:	3301      	adds	r3, #1
  401d64:	b2db      	uxtb	r3, r3
  401d66:	e7eb      	b.n	401d40 <_get_usart_index+0x1c>
  401d68:	00403a50 	.word	0x00403a50
  401d6c:	00401641 	.word	0x00401641
  401d70:	00401cf9 	.word	0x00401cf9
  401d74:	00403a44 	.word	0x00403a44

00401d78 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401d78:	b510      	push	{r4, lr}
	ASSERT(hw);
  401d7a:	4604      	mov	r4, r0
  401d7c:	f240 22cb 	movw	r2, #715	; 0x2cb
  401d80:	4911      	ldr	r1, [pc, #68]	; (401dc8 <_usart_init+0x50>)
  401d82:	3000      	adds	r0, #0
  401d84:	bf18      	it	ne
  401d86:	2001      	movne	r0, #1
  401d88:	4b10      	ldr	r3, [pc, #64]	; (401dcc <_usart_init+0x54>)
  401d8a:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401d8c:	4620      	mov	r0, r4
  401d8e:	4b10      	ldr	r3, [pc, #64]	; (401dd0 <_usart_init+0x58>)
  401d90:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  401d92:	4b10      	ldr	r3, [pc, #64]	; (401dd4 <_usart_init+0x5c>)
  401d94:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401d98:	2300      	movs	r3, #0
  401d9a:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401d9c:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  401d9e:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401da0:	22ac      	movs	r2, #172	; 0xac
  401da2:	6022      	str	r2, [r4, #0]
  401da4:	f44f 7280 	mov.w	r2, #256	; 0x100
  401da8:	6022      	str	r2, [r4, #0]
  401daa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401dae:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401db0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401db4:	0081      	lsls	r1, r0, #2
  401db6:	4a08      	ldr	r2, [pc, #32]	; (401dd8 <_usart_init+0x60>)
  401db8:	440a      	add	r2, r1
  401dba:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401dbc:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  401dbe:	4a07      	ldr	r2, [pc, #28]	; (401ddc <_usart_init+0x64>)
  401dc0:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  401dc2:	4618      	mov	r0, r3
  401dc4:	bd10      	pop	{r4, pc}
  401dc6:	bf00      	nop
  401dc8:	00403a50 	.word	0x00403a50
  401dcc:	00401641 	.word	0x00401641
  401dd0:	00401d25 	.word	0x00401d25
  401dd4:	55534100 	.word	0x55534100
  401dd8:	00403a44 	.word	0x00403a44
  401ddc:	00030051 	.word	0x00030051

00401de0 <_usart_get_irq_num>:
{
  401de0:	b510      	push	{r4, lr}
	ASSERT(hw);
  401de2:	4604      	mov	r4, r0
  401de4:	22ae      	movs	r2, #174	; 0xae
  401de6:	4906      	ldr	r1, [pc, #24]	; (401e00 <_usart_get_irq_num+0x20>)
  401de8:	3000      	adds	r0, #0
  401dea:	bf18      	it	ne
  401dec:	2001      	movne	r0, #1
  401dee:	4b05      	ldr	r3, [pc, #20]	; (401e04 <_usart_get_irq_num+0x24>)
  401df0:	4798      	blx	r3
	return USART0_IRQn + _usart_get_hardware_index(hw);
  401df2:	4620      	mov	r0, r4
  401df4:	4b04      	ldr	r3, [pc, #16]	; (401e08 <_usart_get_irq_num+0x28>)
  401df6:	4798      	blx	r3
  401df8:	300d      	adds	r0, #13
}
  401dfa:	b2c0      	uxtb	r0, r0
  401dfc:	bd10      	pop	{r4, pc}
  401dfe:	bf00      	nop
  401e00:	00403a50 	.word	0x00403a50
  401e04:	00401641 	.word	0x00401641
  401e08:	00401cf9 	.word	0x00401cf9

00401e0c <_usart_interrupt_handler>:
{
  401e0c:	b510      	push	{r4, lr}
	ASSERT(device);
  401e0e:	4604      	mov	r4, r0
  401e10:	f240 2289 	movw	r2, #649	; 0x289
  401e14:	4923      	ldr	r1, [pc, #140]	; (401ea4 <_usart_interrupt_handler+0x98>)
  401e16:	3000      	adds	r0, #0
  401e18:	bf18      	it	ne
  401e1a:	2001      	movne	r0, #1
  401e1c:	4b22      	ldr	r3, [pc, #136]	; (401ea8 <_usart_interrupt_handler+0x9c>)
  401e1e:	4798      	blx	r3
	void *hw = device->hw;
  401e20:	69a3      	ldr	r3, [r4, #24]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401e22:	695a      	ldr	r2, [r3, #20]
	if (hri_usart_get_US_CSR_TXRDY_bit(hw) && hri_usart_get_US_IMR_TXRDY_bit(hw)) {
  401e24:	f012 0f02 	tst.w	r2, #2
  401e28:	d003      	beq.n	401e32 <_usart_interrupt_handler+0x26>
	return (((Usart *)hw)->US_IMR & US_IMR_TXRDY) >> US_IMR_TXRDY_Pos;
  401e2a:	691a      	ldr	r2, [r3, #16]
  401e2c:	f012 0f02 	tst.w	r2, #2
  401e30:	d118      	bne.n	401e64 <_usart_interrupt_handler+0x58>
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  401e32:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_TXEMPTY_bit(hw) && hri_usart_get_US_IMR_TXEMPTY_bit(hw)) {
  401e34:	f412 7f00 	tst.w	r2, #512	; 0x200
  401e38:	d003      	beq.n	401e42 <_usart_interrupt_handler+0x36>
	return (((Usart *)hw)->US_IMR & US_IMR_TXEMPTY) >> US_IMR_TXEMPTY_Pos;
  401e3a:	691a      	ldr	r2, [r3, #16]
  401e3c:	f412 7f00 	tst.w	r2, #512	; 0x200
  401e40:	d116      	bne.n	401e70 <_usart_interrupt_handler+0x64>
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401e42:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_RXRDY_bit(hw) && hri_usart_get_US_IMR_RXRDY_bit(hw)) {
  401e44:	f012 0f01 	tst.w	r2, #1
  401e48:	d01f      	beq.n	401e8a <_usart_interrupt_handler+0x7e>
	return (((Usart *)hw)->US_IMR & US_IMR_RXRDY) >> US_IMR_RXRDY_Pos;
  401e4a:	691a      	ldr	r2, [r3, #16]
  401e4c:	f012 0f01 	tst.w	r2, #1
  401e50:	d01b      	beq.n	401e8a <_usart_interrupt_handler+0x7e>
	return ((Usart *)hw)->US_CSR;
  401e52:	6959      	ldr	r1, [r3, #20]
		if (hri_usart_read_US_CSR_reg(hw) &
  401e54:	4a15      	ldr	r2, [pc, #84]	; (401eac <_usart_interrupt_handler+0xa0>)
  401e56:	4211      	tst	r1, r2
  401e58:	d011      	beq.n	401e7e <_usart_interrupt_handler+0x72>
	return ((Usart *)hw)->US_RHR;
  401e5a:	699a      	ldr	r2, [r3, #24]
	((Usart *)hw)->US_CR = data;
  401e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e60:	601a      	str	r2, [r3, #0]
  401e62:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  401e64:	2202      	movs	r2, #2
  401e66:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
  401e68:	6823      	ldr	r3, [r4, #0]
  401e6a:	4620      	mov	r0, r4
  401e6c:	4798      	blx	r3
  401e6e:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  401e70:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e74:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
  401e76:	68a3      	ldr	r3, [r4, #8]
  401e78:	4620      	mov	r0, r4
  401e7a:	4798      	blx	r3
  401e7c:	bd10      	pop	{r4, pc}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_usart_read_US_RHR_reg(hw));
  401e7e:	6862      	ldr	r2, [r4, #4]
	return ((Usart *)hw)->US_RHR;
  401e80:	6999      	ldr	r1, [r3, #24]
  401e82:	b2c9      	uxtb	r1, r1
  401e84:	4620      	mov	r0, r4
  401e86:	4790      	blx	r2
  401e88:	bd10      	pop	{r4, pc}
	return ((Usart *)hw)->US_CSR;
  401e8a:	6959      	ldr	r1, [r3, #20]
	} else if (hri_usart_read_US_CSR_reg(hw) &
  401e8c:	4a07      	ldr	r2, [pc, #28]	; (401eac <_usart_interrupt_handler+0xa0>)
  401e8e:	4211      	tst	r1, r2
  401e90:	d100      	bne.n	401e94 <_usart_interrupt_handler+0x88>
  401e92:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_CR = data;
  401e94:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e98:	601a      	str	r2, [r3, #0]
		device->usart_cb.error_cb(device);
  401e9a:	68e3      	ldr	r3, [r4, #12]
  401e9c:	4620      	mov	r0, r4
  401e9e:	4798      	blx	r3
  401ea0:	e7f7      	b.n	401e92 <_usart_interrupt_handler+0x86>
  401ea2:	bf00      	nop
  401ea4:	00403a50 	.word	0x00403a50
  401ea8:	00401641 	.word	0x00401641
  401eac:	010000e0 	.word	0x010000e0

00401eb0 <_usart_async_init>:
{
  401eb0:	b570      	push	{r4, r5, r6, lr}
  401eb2:	460c      	mov	r4, r1
	ASSERT(device);
  401eb4:	4606      	mov	r6, r0
  401eb6:	22d1      	movs	r2, #209	; 0xd1
  401eb8:	4922      	ldr	r1, [pc, #136]	; (401f44 <_usart_async_init+0x94>)
  401eba:	3000      	adds	r0, #0
  401ebc:	bf18      	it	ne
  401ebe:	2001      	movne	r0, #1
  401ec0:	4b21      	ldr	r3, [pc, #132]	; (401f48 <_usart_async_init+0x98>)
  401ec2:	4798      	blx	r3
	init_status = _usart_init(hw);
  401ec4:	4620      	mov	r0, r4
  401ec6:	4b21      	ldr	r3, [pc, #132]	; (401f4c <_usart_async_init+0x9c>)
  401ec8:	4798      	blx	r3
	if (init_status) {
  401eca:	4605      	mov	r5, r0
  401ecc:	b108      	cbz	r0, 401ed2 <_usart_async_init+0x22>
}
  401ece:	4628      	mov	r0, r5
  401ed0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401ed2:	61b4      	str	r4, [r6, #24]
	_usart_init_irq_param(hw, device);
  401ed4:	4631      	mov	r1, r6
  401ed6:	4620      	mov	r0, r4
  401ed8:	4b1d      	ldr	r3, [pc, #116]	; (401f50 <_usart_async_init+0xa0>)
  401eda:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401edc:	4620      	mov	r0, r4
  401ede:	4b1d      	ldr	r3, [pc, #116]	; (401f54 <_usart_async_init+0xa4>)
  401ee0:	4798      	blx	r3
  401ee2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401ee4:	2b00      	cmp	r3, #0
  401ee6:	db0d      	blt.n	401f04 <_usart_async_init+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ee8:	095b      	lsrs	r3, r3, #5
  401eea:	f000 001f 	and.w	r0, r0, #31
  401eee:	2201      	movs	r2, #1
  401ef0:	fa02 f000 	lsl.w	r0, r2, r0
  401ef4:	3320      	adds	r3, #32
  401ef6:	4a18      	ldr	r2, [pc, #96]	; (401f58 <_usart_async_init+0xa8>)
  401ef8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401efc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401f00:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401f04:	4620      	mov	r0, r4
  401f06:	4b13      	ldr	r3, [pc, #76]	; (401f54 <_usart_async_init+0xa4>)
  401f08:	4798      	blx	r3
  401f0a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401f0c:	2b00      	cmp	r3, #0
  401f0e:	db09      	blt.n	401f24 <_usart_async_init+0x74>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f10:	095b      	lsrs	r3, r3, #5
  401f12:	f000 001f 	and.w	r0, r0, #31
  401f16:	2201      	movs	r2, #1
  401f18:	fa02 f000 	lsl.w	r0, r2, r0
  401f1c:	3360      	adds	r3, #96	; 0x60
  401f1e:	4a0e      	ldr	r2, [pc, #56]	; (401f58 <_usart_async_init+0xa8>)
  401f20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401f24:	4620      	mov	r0, r4
  401f26:	4b0b      	ldr	r3, [pc, #44]	; (401f54 <_usart_async_init+0xa4>)
  401f28:	4798      	blx	r3
  401f2a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401f2c:	2b00      	cmp	r3, #0
  401f2e:	dbce      	blt.n	401ece <_usart_async_init+0x1e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f30:	095b      	lsrs	r3, r3, #5
  401f32:	f000 001f 	and.w	r0, r0, #31
  401f36:	2201      	movs	r2, #1
  401f38:	fa02 f000 	lsl.w	r0, r2, r0
  401f3c:	4a06      	ldr	r2, [pc, #24]	; (401f58 <_usart_async_init+0xa8>)
  401f3e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  401f42:	e7c4      	b.n	401ece <_usart_async_init+0x1e>
  401f44:	00403a50 	.word	0x00403a50
  401f48:	00401641 	.word	0x00401641
  401f4c:	00401d79 	.word	0x00401d79
  401f50:	00401ce1 	.word	0x00401ce1
  401f54:	00401de1 	.word	0x00401de1
  401f58:	e000e100 	.word	0xe000e100

00401f5c <_usart_async_enable>:
{
  401f5c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401f5e:	4e0a      	ldr	r6, [pc, #40]	; (401f88 <_usart_async_enable+0x2c>)
  401f60:	4604      	mov	r4, r0
  401f62:	f240 1213 	movw	r2, #275	; 0x113
  401f66:	4631      	mov	r1, r6
  401f68:	3000      	adds	r0, #0
  401f6a:	bf18      	it	ne
  401f6c:	2001      	movne	r0, #1
  401f6e:	4d07      	ldr	r5, [pc, #28]	; (401f8c <_usart_async_enable+0x30>)
  401f70:	47a8      	blx	r5
	_usart_enable(device->hw);
  401f72:	69a4      	ldr	r4, [r4, #24]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401f74:	f44f 723d 	mov.w	r2, #756	; 0x2f4
  401f78:	4631      	mov	r1, r6
  401f7a:	1c20      	adds	r0, r4, #0
  401f7c:	bf18      	it	ne
  401f7e:	2001      	movne	r0, #1
  401f80:	47a8      	blx	r5
  401f82:	2350      	movs	r3, #80	; 0x50
  401f84:	6023      	str	r3, [r4, #0]
  401f86:	bd70      	pop	{r4, r5, r6, pc}
  401f88:	00403a50 	.word	0x00403a50
  401f8c:	00401641 	.word	0x00401641

00401f90 <_usart_async_write_byte>:
{
  401f90:	b538      	push	{r3, r4, r5, lr}
  401f92:	460c      	mov	r4, r1
	ASSERT(device);
  401f94:	4605      	mov	r5, r0
  401f96:	f240 12b5 	movw	r2, #437	; 0x1b5
  401f9a:	4904      	ldr	r1, [pc, #16]	; (401fac <_usart_async_write_byte+0x1c>)
  401f9c:	3000      	adds	r0, #0
  401f9e:	bf18      	it	ne
  401fa0:	2001      	movne	r0, #1
  401fa2:	4b03      	ldr	r3, [pc, #12]	; (401fb0 <_usart_async_write_byte+0x20>)
  401fa4:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401fa6:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401fa8:	61dc      	str	r4, [r3, #28]
  401faa:	bd38      	pop	{r3, r4, r5, pc}
  401fac:	00403a50 	.word	0x00403a50
  401fb0:	00401641 	.word	0x00401641

00401fb4 <_usart_async_enable_byte_sent_irq>:
{
  401fb4:	b510      	push	{r4, lr}
	ASSERT(device);
  401fb6:	4604      	mov	r4, r0
  401fb8:	f240 221d 	movw	r2, #541	; 0x21d
  401fbc:	4904      	ldr	r1, [pc, #16]	; (401fd0 <_usart_async_enable_byte_sent_irq+0x1c>)
  401fbe:	3000      	adds	r0, #0
  401fc0:	bf18      	it	ne
  401fc2:	2001      	movne	r0, #1
  401fc4:	4b03      	ldr	r3, [pc, #12]	; (401fd4 <_usart_async_enable_byte_sent_irq+0x20>)
  401fc6:	4798      	blx	r3
	hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  401fc8:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  401fca:	2202      	movs	r2, #2
  401fcc:	609a      	str	r2, [r3, #8]
  401fce:	bd10      	pop	{r4, pc}
  401fd0:	00403a50 	.word	0x00403a50
  401fd4:	00401641 	.word	0x00401641

00401fd8 <_usart_async_enable_tx_done_irq>:
{
  401fd8:	b510      	push	{r4, lr}
	ASSERT(device);
  401fda:	4604      	mov	r4, r0
  401fdc:	f240 2226 	movw	r2, #550	; 0x226
  401fe0:	4905      	ldr	r1, [pc, #20]	; (401ff8 <_usart_async_enable_tx_done_irq+0x20>)
  401fe2:	3000      	adds	r0, #0
  401fe4:	bf18      	it	ne
  401fe6:	2001      	movne	r0, #1
  401fe8:	4b04      	ldr	r3, [pc, #16]	; (401ffc <_usart_async_enable_tx_done_irq+0x24>)
  401fea:	4798      	blx	r3
	hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  401fec:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  401fee:	f44f 7200 	mov.w	r2, #512	; 0x200
  401ff2:	609a      	str	r2, [r3, #8]
  401ff4:	bd10      	pop	{r4, pc}
  401ff6:	bf00      	nop
  401ff8:	00403a50 	.word	0x00403a50
  401ffc:	00401641 	.word	0x00401641

00402000 <_usart_async_set_irq_state>:
{
  402000:	b570      	push	{r4, r5, r6, lr}
  402002:	460c      	mov	r4, r1
  402004:	4616      	mov	r6, r2
	ASSERT(device);
  402006:	4605      	mov	r5, r0
  402008:	f44f 7214 	mov.w	r2, #592	; 0x250
  40200c:	491b      	ldr	r1, [pc, #108]	; (40207c <_usart_async_set_irq_state+0x7c>)
  40200e:	3000      	adds	r0, #0
  402010:	bf18      	it	ne
  402012:	2001      	movne	r0, #1
  402014:	4b1a      	ldr	r3, [pc, #104]	; (402080 <_usart_async_set_irq_state+0x80>)
  402016:	4798      	blx	r3
	if (state) {
  402018:	b1c6      	cbz	r6, 40204c <_usart_async_set_irq_state+0x4c>
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  40201a:	2c02      	cmp	r4, #2
  40201c:	bf18      	it	ne
  40201e:	2c00      	cmpne	r4, #0
  402020:	d004      	beq.n	40202c <_usart_async_set_irq_state+0x2c>
		} else if (USART_ASYNC_RX_DONE == type) {
  402022:	2c01      	cmp	r4, #1
  402024:	d00a      	beq.n	40203c <_usart_async_set_irq_state+0x3c>
		} else if (USART_ASYNC_ERROR == type) {
  402026:	2c03      	cmp	r4, #3
  402028:	d00c      	beq.n	402044 <_usart_async_set_irq_state+0x44>
  40202a:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  40202c:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  40202e:	2202      	movs	r2, #2
  402030:	609a      	str	r2, [r3, #8]
			hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  402032:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  402034:	f44f 7200 	mov.w	r2, #512	; 0x200
  402038:	609a      	str	r2, [r3, #8]
  40203a:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_RXRDY_bit(device->hw);
  40203c:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_RXRDY;
  40203e:	2201      	movs	r2, #1
  402040:	609a      	str	r2, [r3, #8]
  402042:	bd70      	pop	{r4, r5, r6, pc}
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  402044:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = mask;
  402046:	4a0f      	ldr	r2, [pc, #60]	; (402084 <_usart_async_set_irq_state+0x84>)
  402048:	609a      	str	r2, [r3, #8]
  40204a:	bd70      	pop	{r4, r5, r6, pc}
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  40204c:	2c02      	cmp	r4, #2
  40204e:	bf18      	it	ne
  402050:	2c00      	cmpne	r4, #0
  402052:	d007      	beq.n	402064 <_usart_async_set_irq_state+0x64>
		} else if (USART_ASYNC_RX_DONE == type) {
  402054:	2c01      	cmp	r4, #1
  402056:	d00d      	beq.n	402074 <_usart_async_set_irq_state+0x74>
		} else if (USART_ASYNC_ERROR == type) {
  402058:	2c03      	cmp	r4, #3
  40205a:	d1e6      	bne.n	40202a <_usart_async_set_irq_state+0x2a>
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  40205c:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = mask;
  40205e:	4a09      	ldr	r2, [pc, #36]	; (402084 <_usart_async_set_irq_state+0x84>)
  402060:	60da      	str	r2, [r3, #12]
}
  402062:	e7e2      	b.n	40202a <_usart_async_set_irq_state+0x2a>
			hri_usart_clear_US_IMR_TXRDY_bit(device->hw);
  402064:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  402066:	2202      	movs	r2, #2
  402068:	60da      	str	r2, [r3, #12]
			hri_usart_clear_US_IMR_TXEMPTY_bit(device->hw);
  40206a:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  40206c:	f44f 7200 	mov.w	r2, #512	; 0x200
  402070:	60da      	str	r2, [r3, #12]
  402072:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_clear_US_IMR_RXRDY_bit(device->hw);
  402074:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_RXRDY;
  402076:	2201      	movs	r2, #1
  402078:	60da      	str	r2, [r3, #12]
  40207a:	bd70      	pop	{r4, r5, r6, pc}
  40207c:	00403a50 	.word	0x00403a50
  402080:	00401641 	.word	0x00401641
  402084:	010000e0 	.word	0x010000e0

00402088 <_usart_get_usart_async>:
}
  402088:	2000      	movs	r0, #0
  40208a:	4770      	bx	lr

0040208c <USART1_Handler>:
{
  40208c:	b508      	push	{r3, lr}
	_usart_interrupt_handler(_usart1_dev);
  40208e:	4b02      	ldr	r3, [pc, #8]	; (402098 <USART1_Handler+0xc>)
  402090:	6818      	ldr	r0, [r3, #0]
  402092:	4b02      	ldr	r3, [pc, #8]	; (40209c <USART1_Handler+0x10>)
  402094:	4798      	blx	r3
  402096:	bd08      	pop	{r3, pc}
  402098:	2040048c 	.word	0x2040048c
  40209c:	00401e0d 	.word	0x00401e0d

004020a0 <timer_task_cb>:
*
*/
static void timer_task_cb(const struct timer_task *const timer_task)
{
	// Toggle LED
	milliCounter++;
  4020a0:	490e      	ldr	r1, [pc, #56]	; (4020dc <timer_task_cb+0x3c>)
  4020a2:	880b      	ldrh	r3, [r1, #0]
  4020a4:	3301      	adds	r3, #1
  4020a6:	b29b      	uxth	r3, r3
  4020a8:	800b      	strh	r3, [r1, #0]
	
	messageCounter++;
  4020aa:	684a      	ldr	r2, [r1, #4]
  4020ac:	3201      	adds	r2, #1
  4020ae:	604a      	str	r2, [r1, #4]

	// Check if it's time to send a message
	if (messageCounter >= message_interval_ms) {
  4020b0:	490b      	ldr	r1, [pc, #44]	; (4020e0 <timer_task_cb+0x40>)
  4020b2:	7809      	ldrb	r1, [r1, #0]
  4020b4:	b2c9      	uxtb	r1, r1
  4020b6:	428a      	cmp	r2, r1
  4020b8:	d304      	bcc.n	4020c4 <timer_task_cb+0x24>
		// Send serial message
		send_data_flag = 1;
  4020ba:	4a08      	ldr	r2, [pc, #32]	; (4020dc <timer_task_cb+0x3c>)
  4020bc:	2101      	movs	r1, #1
  4020be:	7211      	strb	r1, [r2, #8]
		// Reset message counter
		messageCounter = 0;
  4020c0:	2100      	movs	r1, #0
  4020c2:	6051      	str	r1, [r2, #4]
	}

	// Reset millisecond counter every second
	if (milliCounter >= 1000) {
  4020c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4020c8:	d307      	bcc.n	4020da <timer_task_cb+0x3a>
		milliCounter = 0;
  4020ca:	4b04      	ldr	r3, [pc, #16]	; (4020dc <timer_task_cb+0x3c>)
  4020cc:	2200      	movs	r2, #0
  4020ce:	801a      	strh	r2, [r3, #0]
		secondCounter++;
  4020d0:	68da      	ldr	r2, [r3, #12]
  4020d2:	3201      	adds	r2, #1
  4020d4:	60da      	str	r2, [r3, #12]
		

		read_bme280_flag = true;
  4020d6:	2201      	movs	r2, #1
  4020d8:	741a      	strb	r2, [r3, #16]
  4020da:	4770      	bx	lr
  4020dc:	20400490 	.word	0x20400490
  4020e0:	20400048 	.word	0x20400048

004020e4 <micro_timer_task_cb>:
	
}

static void micro_timer_task_cb(const struct timer_task *const timer_task)
{
	microCounter++;
  4020e4:	4a05      	ldr	r2, [pc, #20]	; (4020fc <micro_timer_task_cb+0x18>)
  4020e6:	8a53      	ldrh	r3, [r2, #18]
  4020e8:	3301      	adds	r3, #1
  4020ea:	b29b      	uxth	r3, r3
  4020ec:	8253      	strh	r3, [r2, #18]
	// Reset every millisecond
	if (microCounter >= 1000) {
  4020ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4020f2:	d302      	bcc.n	4020fa <micro_timer_task_cb+0x16>
		microCounter = 0;
  4020f4:	2200      	movs	r2, #0
  4020f6:	4b01      	ldr	r3, [pc, #4]	; (4020fc <micro_timer_task_cb+0x18>)
  4020f8:	825a      	strh	r2, [r3, #18]
  4020fa:	4770      	bx	lr
  4020fc:	20400490 	.word	0x20400490

00402100 <serial_tx_cb>:
	return entry;
}

// USART functions
// Virtual COM port transmit callback function
static void serial_tx_cb(const struct usart_async_descriptor *const io_descr) {
  402100:	4770      	bx	lr

00402102 <user_delay_ms>:




// Delay function
void user_delay_ms(uint32_t period) {
  402102:	4770      	bx	lr

00402104 <serial_rx_cb>:
static void serial_rx_cb(const struct usart_async_descriptor *const io_descr, const uint16_t usart_data) {
  402104:	b500      	push	{lr}
  402106:	b083      	sub	sp, #12
	count = io_read(&USART_0, &received_byte,1);
  402108:	2201      	movs	r2, #1
  40210a:	f10d 0107 	add.w	r1, sp, #7
  40210e:	480e      	ldr	r0, [pc, #56]	; (402148 <serial_rx_cb+0x44>)
  402110:	4b0e      	ldr	r3, [pc, #56]	; (40214c <serial_rx_cb+0x48>)
  402112:	4798      	blx	r3
    switch (receive_state) {
  402114:	4b0e      	ldr	r3, [pc, #56]	; (402150 <serial_rx_cb+0x4c>)
  402116:	7d1b      	ldrb	r3, [r3, #20]
  402118:	b123      	cbz	r3, 402124 <serial_rx_cb+0x20>
  40211a:	2b01      	cmp	r3, #1
  40211c:	d00a      	beq.n	402134 <serial_rx_cb+0x30>
}
  40211e:	b003      	add	sp, #12
  402120:	f85d fb04 	ldr.w	pc, [sp], #4
            if (received_byte == 'S') {
  402124:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402128:	2b53      	cmp	r3, #83	; 0x53
  40212a:	d1f8      	bne.n	40211e <serial_rx_cb+0x1a>
                receive_state = WAITING_FOR_MODE;
  40212c:	2201      	movs	r2, #1
  40212e:	4b08      	ldr	r3, [pc, #32]	; (402150 <serial_rx_cb+0x4c>)
  402130:	751a      	strb	r2, [r3, #20]
  402132:	e7f4      	b.n	40211e <serial_rx_cb+0x1a>
            data_mode = received_byte;
  402134:	f89d 2007 	ldrb.w	r2, [sp, #7]
  402138:	4b06      	ldr	r3, [pc, #24]	; (402154 <serial_rx_cb+0x50>)
  40213a:	705a      	strb	r2, [r3, #1]
            receive_state = WAITING_FOR_START;  // Ready to receive next message
  40213c:	4b04      	ldr	r3, [pc, #16]	; (402150 <serial_rx_cb+0x4c>)
  40213e:	2200      	movs	r2, #0
  402140:	751a      	strb	r2, [r3, #20]
			startSend = 1;
  402142:	2201      	movs	r2, #1
  402144:	755a      	strb	r2, [r3, #21]
}
  402146:	e7ea      	b.n	40211e <serial_rx_cb+0x1a>
  402148:	20400528 	.word	0x20400528
  40214c:	00400fa1 	.word	0x00400fa1
  402150:	20400490 	.word	0x20400490
  402154:	20400048 	.word	0x20400048

00402158 <spi_reg_write>:
int8_t spi_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint16_t length) {
  402158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40215c:	b084      	sub	sp, #16
  40215e:	460f      	mov	r7, r1
  402160:	4690      	mov	r8, r2
  402162:	f88d 0007 	strb.w	r0, [sp, #7]
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  402166:	4c0d      	ldr	r4, [pc, #52]	; (40219c <spi_reg_write+0x44>)
  402168:	a903      	add	r1, sp, #12
  40216a:	4620      	mov	r0, r4
  40216c:	4b0c      	ldr	r3, [pc, #48]	; (4021a0 <spi_reg_write+0x48>)
  40216e:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  402170:	4620      	mov	r0, r4
  402172:	4b0c      	ldr	r3, [pc, #48]	; (4021a4 <spi_reg_write+0x4c>)
  402174:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  402176:	4c0c      	ldr	r4, [pc, #48]	; (4021a8 <spi_reg_write+0x50>)
  402178:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40217c:	6365      	str	r5, [r4, #52]	; 0x34
	io_write(io, &reg_addr, 1);
  40217e:	2201      	movs	r2, #1
  402180:	f10d 0107 	add.w	r1, sp, #7
  402184:	9803      	ldr	r0, [sp, #12]
  402186:	4e09      	ldr	r6, [pc, #36]	; (4021ac <spi_reg_write+0x54>)
  402188:	47b0      	blx	r6
	io_write(io, reg_data, length);
  40218a:	4642      	mov	r2, r8
  40218c:	4639      	mov	r1, r7
  40218e:	9803      	ldr	r0, [sp, #12]
  402190:	47b0      	blx	r6
	((Pio *)hw)->PIO_SODR = mask;
  402192:	6325      	str	r5, [r4, #48]	; 0x30
}
  402194:	2000      	movs	r0, #0
  402196:	b004      	add	sp, #16
  402198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40219c:	20400510 	.word	0x20400510
  4021a0:	00401179 	.word	0x00401179
  4021a4:	0040106d 	.word	0x0040106d
  4021a8:	400e1400 	.word	0x400e1400
  4021ac:	00400f71 	.word	0x00400f71

004021b0 <spi_reg_read>:
int8_t spi_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint16_t length) {
  4021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021b2:	b085      	sub	sp, #20
  4021b4:	460e      	mov	r6, r1
  4021b6:	4617      	mov	r7, r2
  4021b8:	f88d 0007 	strb.w	r0, [sp, #7]
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  4021bc:	4c0f      	ldr	r4, [pc, #60]	; (4021fc <spi_reg_read+0x4c>)
  4021be:	a903      	add	r1, sp, #12
  4021c0:	4620      	mov	r0, r4
  4021c2:	4b0f      	ldr	r3, [pc, #60]	; (402200 <spi_reg_read+0x50>)
  4021c4:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  4021c6:	4620      	mov	r0, r4
  4021c8:	4b0e      	ldr	r3, [pc, #56]	; (402204 <spi_reg_read+0x54>)
  4021ca:	4798      	blx	r3
	reg_addr |= 0x80; // Set the MSB for read operation
  4021cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4021d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4021d4:	a904      	add	r1, sp, #16
  4021d6:	f801 3d09 	strb.w	r3, [r1, #-9]!
	((Pio *)hw)->PIO_CODR = mask;
  4021da:	4c0b      	ldr	r4, [pc, #44]	; (402208 <spi_reg_read+0x58>)
  4021dc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  4021e0:	6365      	str	r5, [r4, #52]	; 0x34
	io_write(io, &reg_addr, 1);
  4021e2:	2201      	movs	r2, #1
  4021e4:	9803      	ldr	r0, [sp, #12]
  4021e6:	4b09      	ldr	r3, [pc, #36]	; (40220c <spi_reg_read+0x5c>)
  4021e8:	4798      	blx	r3
	io_read(io, reg_data, length);
  4021ea:	463a      	mov	r2, r7
  4021ec:	4631      	mov	r1, r6
  4021ee:	9803      	ldr	r0, [sp, #12]
  4021f0:	4b07      	ldr	r3, [pc, #28]	; (402210 <spi_reg_read+0x60>)
  4021f2:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4021f4:	6325      	str	r5, [r4, #48]	; 0x30
}
  4021f6:	2000      	movs	r0, #0
  4021f8:	b005      	add	sp, #20
  4021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4021fc:	20400510 	.word	0x20400510
  402200:	00401179 	.word	0x00401179
  402204:	0040106d 	.word	0x0040106d
  402208:	400e1400 	.word	0x400e1400
  40220c:	00400f71 	.word	0x00400f71
  402210:	00400fa1 	.word	0x00400fa1

00402214 <process_detector_data>:
	energy_bins[detector_index][bin_index]++;
  402214:	4a04      	ldr	r2, [pc, #16]	; (402228 <process_detector_data+0x14>)
  402216:	0109      	lsls	r1, r1, #4
  402218:	eb01 3020 	add.w	r0, r1, r0, asr #12
  40221c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  402220:	3301      	adds	r3, #1
  402222:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  402226:	4770      	bx	lr
  402228:	20400594 	.word	0x20400594

0040222c <add_to_buffer>:
void add_to_buffer(uint8_t new_entry, uint8_t detector_id) {
  40222c:	b430      	push	{r4, r5}
	detector_data[detector_id][end_index] = new_entry;
  40222e:	4c16      	ldr	r4, [pc, #88]	; (402288 <add_to_buffer+0x5c>)
  402230:	69a2      	ldr	r2, [r4, #24]
  402232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402236:	4d15      	ldr	r5, [pc, #84]	; (40228c <add_to_buffer+0x60>)
  402238:	fb03 5101 	mla	r1, r3, r1, r5
  40223c:	5488      	strb	r0, [r1, r2]
	end_index = (end_index + 1) % DATA_LENGTH;
  40223e:	3201      	adds	r2, #1
  402240:	4913      	ldr	r1, [pc, #76]	; (402290 <add_to_buffer+0x64>)
  402242:	fb81 3102 	smull	r3, r1, r1, r2
  402246:	17d3      	asrs	r3, r2, #31
  402248:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  40224c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402250:	0059      	lsls	r1, r3, #1
  402252:	1a53      	subs	r3, r2, r1
  402254:	2264      	movs	r2, #100	; 0x64
  402256:	fb02 f303 	mul.w	r3, r2, r3
  40225a:	61a3      	str	r3, [r4, #24]
	if (end_index == start_index) {
  40225c:	69e2      	ldr	r2, [r4, #28]
  40225e:	4293      	cmp	r3, r2
  402260:	d001      	beq.n	402266 <add_to_buffer+0x3a>
}
  402262:	bc30      	pop	{r4, r5}
  402264:	4770      	bx	lr
		start_index = (start_index + 1) % DATA_LENGTH;
  402266:	3201      	adds	r2, #1
  402268:	4909      	ldr	r1, [pc, #36]	; (402290 <add_to_buffer+0x64>)
  40226a:	fb81 3102 	smull	r3, r1, r1, r2
  40226e:	17d3      	asrs	r3, r2, #31
  402270:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  402274:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402278:	0059      	lsls	r1, r3, #1
  40227a:	1a53      	subs	r3, r2, r1
  40227c:	2264      	movs	r2, #100	; 0x64
  40227e:	fb02 f303 	mul.w	r3, r2, r3
  402282:	61e3      	str	r3, [r4, #28]
	return;
  402284:	e7ed      	b.n	402262 <add_to_buffer+0x36>
  402286:	bf00      	nop
  402288:	20400490 	.word	0x20400490
  40228c:	20400694 	.word	0x20400694
  402290:	66666667 	.word	0x66666667

00402294 <read_SPI_data>:
{
  402294:	b570      	push	{r4, r5, r6, lr}
  402296:	b084      	sub	sp, #16
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  402298:	a903      	add	r1, sp, #12
  40229a:	4815      	ldr	r0, [pc, #84]	; (4022f0 <read_SPI_data+0x5c>)
  40229c:	4b15      	ldr	r3, [pc, #84]	; (4022f4 <read_SPI_data+0x60>)
  40229e:	4798      	blx	r3
	uint8_t cs_pins[4] = {CS_PIN_DEVICE1, CS_PIN_DEVICE2, CS_PIN_DEVICE3, CS_PIN_DEVICE4};
  4022a0:	4b15      	ldr	r3, [pc, #84]	; (4022f8 <read_SPI_data+0x64>)
  4022a2:	681b      	ldr	r3, [r3, #0]
  4022a4:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < 4; i++) {
  4022a6:	2500      	movs	r5, #0
  4022a8:	e01e      	b.n	4022e8 <read_SPI_data+0x54>
		gpio_set_pin_level(cs_pins[i], false); // set the pin low (select the device)
  4022aa:	ab04      	add	r3, sp, #16
  4022ac:	442b      	add	r3, r5
  4022ae:	f813 4c0c 	ldrb.w	r4, [r3, #-12]
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4022b2:	0963      	lsrs	r3, r4, #5
  4022b4:	f004 041f 	and.w	r4, r4, #31
  4022b8:	2201      	movs	r2, #1
  4022ba:	fa02 f404 	lsl.w	r4, r2, r4
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  4022be:	4e0f      	ldr	r6, [pc, #60]	; (4022fc <read_SPI_data+0x68>)
  4022c0:	eb06 2643 	add.w	r6, r6, r3, lsl #9
	((Pio *)hw)->PIO_CODR = mask;
  4022c4:	6374      	str	r4, [r6, #52]	; 0x34
		io_read(io, &read_data, 1); // Read 1 bytes of data
  4022c6:	f10d 010b 	add.w	r1, sp, #11
  4022ca:	9803      	ldr	r0, [sp, #12]
  4022cc:	4b0c      	ldr	r3, [pc, #48]	; (402300 <read_SPI_data+0x6c>)
  4022ce:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4022d0:	6334      	str	r4, [r6, #48]	; 0x30
		add_to_buffer(read_data, i);
  4022d2:	4629      	mov	r1, r5
  4022d4:	f89d 000b 	ldrb.w	r0, [sp, #11]
  4022d8:	4b0a      	ldr	r3, [pc, #40]	; (402304 <read_SPI_data+0x70>)
  4022da:	4798      	blx	r3
		process_detector_data(read_data,i);
  4022dc:	b2e9      	uxtb	r1, r5
  4022de:	f89d 000b 	ldrb.w	r0, [sp, #11]
  4022e2:	4b09      	ldr	r3, [pc, #36]	; (402308 <read_SPI_data+0x74>)
  4022e4:	4798      	blx	r3
	for (int i = 0; i < 4; i++) {
  4022e6:	3501      	adds	r5, #1
  4022e8:	2d03      	cmp	r5, #3
  4022ea:	ddde      	ble.n	4022aa <read_SPI_data+0x16>
}
  4022ec:	b004      	add	sp, #16
  4022ee:	bd70      	pop	{r4, r5, r6, pc}
  4022f0:	20400510 	.word	0x20400510
  4022f4:	00401179 	.word	0x00401179
  4022f8:	00403a6c 	.word	0x00403a6c
  4022fc:	400e0e00 	.word	0x400e0e00
  402300:	00400fa1 	.word	0x00400fa1
  402304:	0040222d 	.word	0x0040222d
  402308:	00402215 	.word	0x00402215

0040230c <get_from_buffer>:
	if (start_index == end_index) {
  40230c:	4a0f      	ldr	r2, [pc, #60]	; (40234c <get_from_buffer+0x40>)
  40230e:	69d3      	ldr	r3, [r2, #28]
  402310:	6992      	ldr	r2, [r2, #24]
  402312:	4293      	cmp	r3, r2
  402314:	d017      	beq.n	402346 <get_from_buffer+0x3a>
	uint8_t entry = detector_data[detector_id][start_index];
  402316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40231a:	4a0d      	ldr	r2, [pc, #52]	; (402350 <get_from_buffer+0x44>)
  40231c:	fb01 2000 	mla	r0, r1, r0, r2
  402320:	5cc0      	ldrb	r0, [r0, r3]
  402322:	b2c0      	uxtb	r0, r0
	start_index = (start_index + 1) % DATA_LENGTH;
  402324:	1c5a      	adds	r2, r3, #1
  402326:	490b      	ldr	r1, [pc, #44]	; (402354 <get_from_buffer+0x48>)
  402328:	fb81 3102 	smull	r3, r1, r1, r2
  40232c:	17d3      	asrs	r3, r2, #31
  40232e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  402332:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402336:	0059      	lsls	r1, r3, #1
  402338:	1a53      	subs	r3, r2, r1
  40233a:	2264      	movs	r2, #100	; 0x64
  40233c:	fb02 f303 	mul.w	r3, r2, r3
  402340:	4a02      	ldr	r2, [pc, #8]	; (40234c <get_from_buffer+0x40>)
  402342:	61d3      	str	r3, [r2, #28]
	return entry;
  402344:	4770      	bx	lr
		return 0xFF;
  402346:	20ff      	movs	r0, #255	; 0xff
}
  402348:	4770      	bx	lr
  40234a:	bf00      	nop
  40234c:	20400490 	.word	0x20400490
  402350:	20400694 	.word	0x20400694
  402354:	66666667 	.word	0x66666667

00402358 <spi_init>:
void spi_init(void) {
  402358:	b510      	push	{r4, lr}
	spi_m_sync_init(&SPI_0, SPI0);
  40235a:	4c07      	ldr	r4, [pc, #28]	; (402378 <spi_init+0x20>)
  40235c:	4907      	ldr	r1, [pc, #28]	; (40237c <spi_init+0x24>)
  40235e:	4620      	mov	r0, r4
  402360:	4b07      	ldr	r3, [pc, #28]	; (402380 <spi_init+0x28>)
  402362:	4798      	blx	r3
	spi_m_sync_set_baudrate(&SPI_0, 115200); // Example: 1 MHz. Changed to 115200 for now
  402364:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  402368:	4620      	mov	r0, r4
  40236a:	4b06      	ldr	r3, [pc, #24]	; (402384 <spi_init+0x2c>)
  40236c:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  40236e:	4620      	mov	r0, r4
  402370:	4b05      	ldr	r3, [pc, #20]	; (402388 <spi_init+0x30>)
  402372:	4798      	blx	r3
  402374:	bd10      	pop	{r4, pc}
  402376:	bf00      	nop
  402378:	20400510 	.word	0x20400510
  40237c:	40008000 	.word	0x40008000
  402380:	0040101d 	.word	0x0040101d
  402384:	00401095 	.word	0x00401095
  402388:	0040106d 	.word	0x0040106d

0040238c <gpio_init>:
	((Pio *)hw)->PIO_OER = mask;
  40238c:	4b02      	ldr	r3, [pc, #8]	; (402398 <gpio_init+0xc>)
  40238e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402392:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  402394:	631a      	str	r2, [r3, #48]	; 0x30
  402396:	4770      	bx	lr
  402398:	400e1400 	.word	0x400e1400

0040239c <initialize_bme280>:
	// Implement a delay function suitable for your platform
}


void initialize_bme280() {
  40239c:	b508      	push	{r3, lr}
	// Assign device structure parameters
	//bme280.dev_id = 0;
	bme280.intf = BME280_SPI_INTF;
  40239e:	4806      	ldr	r0, [pc, #24]	; (4023b8 <initialize_bme280+0x1c>)
  4023a0:	2300      	movs	r3, #0
  4023a2:	7043      	strb	r3, [r0, #1]
	bme280.read = spi_reg_read;
  4023a4:	4b05      	ldr	r3, [pc, #20]	; (4023bc <initialize_bme280+0x20>)
  4023a6:	60c3      	str	r3, [r0, #12]
	bme280.write = spi_reg_write;
  4023a8:	4b05      	ldr	r3, [pc, #20]	; (4023c0 <initialize_bme280+0x24>)
  4023aa:	6103      	str	r3, [r0, #16]
	bme280.delay_us = user_delay_ms;
  4023ac:	4b05      	ldr	r3, [pc, #20]	; (4023c4 <initialize_bme280+0x28>)
  4023ae:	6143      	str	r3, [r0, #20]

	// Initialize the BME280
	bme280_init(&bme280);
  4023b0:	4b05      	ldr	r3, [pc, #20]	; (4023c8 <initialize_bme280+0x2c>)
  4023b2:	4798      	blx	r3
  4023b4:	bd08      	pop	{r3, pc}
  4023b6:	bf00      	nop
  4023b8:	20401634 	.word	0x20401634
  4023bc:	004021b1 	.word	0x004021b1
  4023c0:	00402159 	.word	0x00402159
  4023c4:	00402103 	.word	0x00402103
  4023c8:	004009dd 	.word	0x004009dd

004023cc <read_sensor_data>:
}


void read_sensor_data() {
  4023cc:	b530      	push	{r4, r5, lr}
  4023ce:	b0ad      	sub	sp, #180	; 0xb4
	struct bme280_data comp_data;
	int8_t rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme280);
  4023d0:	4a1c      	ldr	r2, [pc, #112]	; (402444 <read_sensor_data+0x78>)
  4023d2:	a926      	add	r1, sp, #152	; 0x98
  4023d4:	2007      	movs	r0, #7
  4023d6:	4b1c      	ldr	r3, [pc, #112]	; (402448 <read_sensor_data+0x7c>)
  4023d8:	4798      	blx	r3

	if (rslt == BME280_OK) {
  4023da:	b1a0      	cbz	r0, 402406 <read_sensor_data+0x3a>
		comp_data.temperature, comp_data.pressure / 100.0, comp_data.humidity);
		io_write(&USART_0.io, (uint8_t *)buffer, strlen(buffer));
		} else {
		// Handle error
		// For example, send an error message over UART
		char error_msg[] = "Error reading BME280 sensor data\r\n";
  4023dc:	ac06      	add	r4, sp, #24
  4023de:	4d1b      	ldr	r5, [pc, #108]	; (40244c <read_sensor_data+0x80>)
  4023e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4023e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4023e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4023e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4023e8:	682b      	ldr	r3, [r5, #0]
  4023ea:	f824 3b02 	strh.w	r3, [r4], #2
  4023ee:	0c1b      	lsrs	r3, r3, #16
  4023f0:	7023      	strb	r3, [r4, #0]
		io_write(&USART_0.io, (uint8_t *)error_msg, strlen(error_msg));
  4023f2:	a806      	add	r0, sp, #24
  4023f4:	4b16      	ldr	r3, [pc, #88]	; (402450 <read_sensor_data+0x84>)
  4023f6:	4798      	blx	r3
  4023f8:	b282      	uxth	r2, r0
  4023fa:	a906      	add	r1, sp, #24
  4023fc:	4815      	ldr	r0, [pc, #84]	; (402454 <read_sensor_data+0x88>)
  4023fe:	4b16      	ldr	r3, [pc, #88]	; (402458 <read_sensor_data+0x8c>)
  402400:	4798      	blx	r3
	}
}
  402402:	b02d      	add	sp, #180	; 0xb4
  402404:	bd30      	pop	{r4, r5, pc}
		snprintf(buffer, sizeof(buffer), "Temperature: %0.2f C, Pressure: %0.2f hPa, Humidity: %0.2f%%\r\n",
  402406:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40240a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40240e:	2200      	movs	r2, #0
  402410:	4b12      	ldr	r3, [pc, #72]	; (40245c <read_sensor_data+0x90>)
  402412:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
  402416:	4c12      	ldr	r4, [pc, #72]	; (402460 <read_sensor_data+0x94>)
  402418:	47a0      	blx	r4
  40241a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40241e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
  402422:	e9cd 2300 	strd	r2, r3, [sp]
  402426:	4a0f      	ldr	r2, [pc, #60]	; (402464 <read_sensor_data+0x98>)
  402428:	2180      	movs	r1, #128	; 0x80
  40242a:	a806      	add	r0, sp, #24
  40242c:	4b0e      	ldr	r3, [pc, #56]	; (402468 <read_sensor_data+0x9c>)
  40242e:	4798      	blx	r3
		io_write(&USART_0.io, (uint8_t *)buffer, strlen(buffer));
  402430:	a806      	add	r0, sp, #24
  402432:	4b07      	ldr	r3, [pc, #28]	; (402450 <read_sensor_data+0x84>)
  402434:	4798      	blx	r3
  402436:	b282      	uxth	r2, r0
  402438:	a906      	add	r1, sp, #24
  40243a:	4806      	ldr	r0, [pc, #24]	; (402454 <read_sensor_data+0x88>)
  40243c:	4b06      	ldr	r3, [pc, #24]	; (402458 <read_sensor_data+0x8c>)
  40243e:	4798      	blx	r3
  402440:	e7df      	b.n	402402 <read_sensor_data+0x36>
  402442:	bf00      	nop
  402444:	20401634 	.word	0x20401634
  402448:	00400aad 	.word	0x00400aad
  40244c:	00403ab0 	.word	0x00403ab0
  402450:	0040308d 	.word	0x0040308d
  402454:	20400528 	.word	0x20400528
  402458:	00400f71 	.word	0x00400f71
  40245c:	40590000 	.word	0x40590000
  402460:	00402c85 	.word	0x00402c85
  402464:	00403a70 	.word	0x00403a70
  402468:	00403025 	.word	0x00403025

0040246c <main>:

int main(void)
{
  40246c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40246e:	b0a5      	sub	sp, #148	; 0x94
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402470:	4b73      	ldr	r3, [pc, #460]	; (402640 <main+0x1d4>)
  402472:	4798      	blx	r3
	
	// Initialize SPI and GPIO (implement these functions according to your HAL)
	spi_init(); //was SPI_MODULE
  402474:	4b73      	ldr	r3, [pc, #460]	; (402644 <main+0x1d8>)
  402476:	4798      	blx	r3
	gpio_init(); // choose the pin and port
  402478:	4b73      	ldr	r3, [pc, #460]	; (402648 <main+0x1dc>)
  40247a:	4798      	blx	r3

	// Initialize BME280
	initialize_bme280();
  40247c:	4b73      	ldr	r3, [pc, #460]	; (40264c <main+0x1e0>)
  40247e:	4798      	blx	r3

	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  402480:	4c73      	ldr	r4, [pc, #460]	; (402650 <main+0x1e4>)
  402482:	a923      	add	r1, sp, #140	; 0x8c
  402484:	4620      	mov	r0, r4
  402486:	4b73      	ldr	r3, [pc, #460]	; (402654 <main+0x1e8>)
  402488:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  40248a:	4620      	mov	r0, r4
  40248c:	4b72      	ldr	r3, [pc, #456]	; (402658 <main+0x1ec>)
  40248e:	4798      	blx	r3
//  bme280.delay_ms = user_delay_ms; // Replace with actual delay function

 //bme280_init(&bme280); [recent]
	
	// Set up Timer Function
	task.interval = 1;
  402490:	4c72      	ldr	r4, [pc, #456]	; (40265c <main+0x1f0>)
  402492:	2501      	movs	r5, #1
  402494:	62a5      	str	r5, [r4, #40]	; 0x28
	task.cb = timer_task_cb;
  402496:	4b72      	ldr	r3, [pc, #456]	; (402660 <main+0x1f4>)
  402498:	62e3      	str	r3, [r4, #44]	; 0x2c
	task.mode = TIMER_TASK_REPEAT;
  40249a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	
	// Add timer task
	timer_add_task(&TIMER_0, &task);
  40249e:	4f71      	ldr	r7, [pc, #452]	; (402664 <main+0x1f8>)
  4024a0:	f104 0120 	add.w	r1, r4, #32
  4024a4:	4638      	mov	r0, r7
  4024a6:	4e70      	ldr	r6, [pc, #448]	; (402668 <main+0x1fc>)
  4024a8:	47b0      	blx	r6
	timer_start(&TIMER_0);
  4024aa:	4638      	mov	r0, r7
  4024ac:	4b6f      	ldr	r3, [pc, #444]	; (40266c <main+0x200>)
  4024ae:	4798      	blx	r3
	
	// Set up Microsecond Timer Function
	micro_task.interval = 1;
  4024b0:	63e5      	str	r5, [r4, #60]	; 0x3c
	micro_task.cb = micro_timer_task_cb;
  4024b2:	4b6f      	ldr	r3, [pc, #444]	; (402670 <main+0x204>)
  4024b4:	6423      	str	r3, [r4, #64]	; 0x40
	micro_task.mode = TIMER_TASK_REPEAT;
  4024b6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
	
	timer_add_task(&MICRO_Timer, &micro_task);
  4024ba:	f104 0134 	add.w	r1, r4, #52	; 0x34
  4024be:	486d      	ldr	r0, [pc, #436]	; (402674 <main+0x208>)
  4024c0:	47b0      	blx	r6
	if (data_mode != previous_data_mode) {
  4024c2:	4b6d      	ldr	r3, [pc, #436]	; (402678 <main+0x20c>)
  4024c4:	785a      	ldrb	r2, [r3, #1]
  4024c6:	b2d2      	uxtb	r2, r2
  4024c8:	789b      	ldrb	r3, [r3, #2]
  4024ca:	b2db      	uxtb	r3, r3
  4024cc:	429a      	cmp	r2, r3
  4024ce:	d00b      	beq.n	4024e8 <main+0x7c>
		if (data_mode == 2) {
  4024d0:	4b69      	ldr	r3, [pc, #420]	; (402678 <main+0x20c>)
  4024d2:	785b      	ldrb	r3, [r3, #1]
  4024d4:	b2db      	uxtb	r3, r3
  4024d6:	2b02      	cmp	r3, #2
  4024d8:	d126      	bne.n	402528 <main+0xbc>
			// Enable microsecond timer
			timer_start(&MICRO_Timer);
  4024da:	4866      	ldr	r0, [pc, #408]	; (402674 <main+0x208>)
  4024dc:	4b63      	ldr	r3, [pc, #396]	; (40266c <main+0x200>)
  4024de:	4798      	blx	r3
			} else {
			// Disable microsecond timer
			timer_stop(&MICRO_Timer);
		}
		previous_data_mode = data_mode;  // Update the previous data mode
  4024e0:	4a65      	ldr	r2, [pc, #404]	; (402678 <main+0x20c>)
  4024e2:	7853      	ldrb	r3, [r2, #1]
  4024e4:	b2db      	uxtb	r3, r3
  4024e6:	7093      	strb	r3, [r2, #2]
	((Pio *)hw)->PIO_OER = mask;
  4024e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4024ec:	4b63      	ldr	r3, [pc, #396]	; (40267c <main+0x210>)
  4024ee:	611a      	str	r2, [r3, #16]
  4024f0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4024f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4024f8:	611a      	str	r2, [r3, #16]
  4024fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4024fe:	611a      	str	r2, [r3, #16]
  402500:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402504:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(CS_PIN_DEVICE2, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE3, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE4, GPIO_DIRECTION_OUT);
	
	// Enable SPI
	spi_m_sync_enable(&SPI_0);
  402506:	4852      	ldr	r0, [pc, #328]	; (402650 <main+0x1e4>)
  402508:	4b53      	ldr	r3, [pc, #332]	; (402658 <main+0x1ec>)
  40250a:	4798      	blx	r3
	
	// 
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, serial_tx_cb);
  40250c:	4c5c      	ldr	r4, [pc, #368]	; (402680 <main+0x214>)
  40250e:	4a5d      	ldr	r2, [pc, #372]	; (402684 <main+0x218>)
  402510:	2101      	movs	r1, #1
  402512:	4620      	mov	r0, r4
  402514:	4d5c      	ldr	r5, [pc, #368]	; (402688 <main+0x21c>)
  402516:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, serial_rx_cb);
  402518:	4a5c      	ldr	r2, [pc, #368]	; (40268c <main+0x220>)
  40251a:	2100      	movs	r1, #0
  40251c:	4620      	mov	r0, r4
  40251e:	47a8      	blx	r5
	int32_t result = usart_async_enable(&USART_0);
  402520:	4620      	mov	r0, r4
  402522:	4b5b      	ldr	r3, [pc, #364]	; (402690 <main+0x224>)
  402524:	4798      	blx	r3
  402526:	e006      	b.n	402536 <main+0xca>
			timer_stop(&MICRO_Timer);
  402528:	4852      	ldr	r0, [pc, #328]	; (402674 <main+0x208>)
  40252a:	4b5a      	ldr	r3, [pc, #360]	; (402694 <main+0x228>)
  40252c:	4798      	blx	r3
  40252e:	e7d7      	b.n	4024e0 <main+0x74>
					   
				   
				    read_bme280_flag = false;
		       }
		
		if (send_data_flag) {
  402530:	4b4a      	ldr	r3, [pc, #296]	; (40265c <main+0x1f0>)
  402532:	7a1b      	ldrb	r3, [r3, #8]
  402534:	b95b      	cbnz	r3, 40254e <main+0xe2>
		read_SPI_data();
  402536:	4b58      	ldr	r3, [pc, #352]	; (402698 <main+0x22c>)
  402538:	4798      	blx	r3
		     if (read_bme280_flag) {
  40253a:	4b48      	ldr	r3, [pc, #288]	; (40265c <main+0x1f0>)
  40253c:	7c1b      	ldrb	r3, [r3, #16]
  40253e:	2b00      	cmp	r3, #0
  402540:	d0f6      	beq.n	402530 <main+0xc4>
					read_sensor_data(); // Should handle all the reading making the next code redundant
  402542:	4b56      	ldr	r3, [pc, #344]	; (40269c <main+0x230>)
  402544:	4798      	blx	r3
				    read_bme280_flag = false;
  402546:	2200      	movs	r2, #0
  402548:	4b44      	ldr	r3, [pc, #272]	; (40265c <main+0x1f0>)
  40254a:	741a      	strb	r2, [r3, #16]
  40254c:	e7f0      	b.n	402530 <main+0xc4>
			
			switch (data_mode) {
  40254e:	4b4a      	ldr	r3, [pc, #296]	; (402678 <main+0x20c>)
  402550:	785b      	ldrb	r3, [r3, #1]
  402552:	b2db      	uxtb	r3, r3
  402554:	2b01      	cmp	r3, #1
  402556:	d009      	beq.n	40256c <main+0x100>
  402558:	2b02      	cmp	r3, #2
  40255a:	d03a      	beq.n	4025d2 <main+0x166>
			////fprintf(sizeof(uint32_t));
			////memcpy(&dequeueItemEvent,&dequeueItemEventToCopy,sizeof(dequeueItemEventToCopy));
			////int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemBin, sizeof(dequeueItemBin));
			//int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemEvent, sizeof(dequeueItemEvent));
						
			if (startSend == 1) {
  40255c:	4b3f      	ldr	r3, [pc, #252]	; (40265c <main+0x1f0>)
  40255e:	7d5b      	ldrb	r3, [r3, #21]
  402560:	2b01      	cmp	r3, #1
  402562:	d054      	beq.n	40260e <main+0x1a2>
					default:
					break;
				}
			}
			
			send_data_flag = 0;
  402564:	2200      	movs	r2, #0
  402566:	4b3d      	ldr	r3, [pc, #244]	; (40265c <main+0x1f0>)
  402568:	721a      	strb	r2, [r3, #8]
  40256a:	e7e4      	b.n	402536 <main+0xca>
					item.mode = data_mode;
  40256c:	4b42      	ldr	r3, [pc, #264]	; (402678 <main+0x20c>)
  40256e:	785b      	ldrb	r3, [r3, #1]
  402570:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
					item.secondCounter = secondCounter;
  402574:	4b39      	ldr	r3, [pc, #228]	; (40265c <main+0x1f0>)
  402576:	68da      	ldr	r2, [r3, #12]
  402578:	9211      	str	r2, [sp, #68]	; 0x44
					item.milliCounter = milliCounter;
  40257a:	881b      	ldrh	r3, [r3, #0]
  40257c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  402580:	2000      	movs	r0, #0
  402582:	e00c      	b.n	40259e <main+0x132>
							item.data[i * NUM_OF_ENERGY_LEVELS + j] = energy_bins[i][j];
  402584:	eb02 1300 	add.w	r3, r2, r0, lsl #4
  402588:	4945      	ldr	r1, [pc, #276]	; (4026a0 <main+0x234>)
  40258a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40258e:	ac24      	add	r4, sp, #144	; 0x90
  402590:	4423      	add	r3, r4
  402592:	f803 1c46 	strb.w	r1, [r3, #-70]
						for (int j = 0; j < NUM_OF_ENERGY_LEVELS; j++) {
  402596:	3201      	adds	r2, #1
  402598:	2a0f      	cmp	r2, #15
  40259a:	ddf3      	ble.n	402584 <main+0x118>
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  40259c:	3001      	adds	r0, #1
  40259e:	2803      	cmp	r0, #3
  4025a0:	dc01      	bgt.n	4025a6 <main+0x13a>
  4025a2:	2200      	movs	r2, #0
  4025a4:	e7f8      	b.n	402598 <main+0x12c>
					memset(energy_bins, 0, NUM_OF_DETECTOR * NUM_OF_ENERGY_LEVELS * sizeof(uint8_t));
  4025a6:	2240      	movs	r2, #64	; 0x40
  4025a8:	2100      	movs	r1, #0
  4025aa:	483d      	ldr	r0, [pc, #244]	; (4026a0 <main+0x234>)
  4025ac:	4b3d      	ldr	r3, [pc, #244]	; (4026a4 <main+0x238>)
  4025ae:	4798      	blx	r3
					bin_buffer_enqueue(item);
  4025b0:	466c      	mov	r4, sp
  4025b2:	ad14      	add	r5, sp, #80	; 0x50
  4025b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4025b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4025b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4025ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4025bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4025be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4025c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4025c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4025c8:	ab10      	add	r3, sp, #64	; 0x40
  4025ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4025cc:	4c36      	ldr	r4, [pc, #216]	; (4026a8 <main+0x23c>)
  4025ce:	47a0      	blx	r4
  4025d0:	e7c4      	b.n	40255c <main+0xf0>
					item.mode = data_mode;
  4025d2:	4b29      	ldr	r3, [pc, #164]	; (402678 <main+0x20c>)
  4025d4:	785b      	ldrb	r3, [r3, #1]
  4025d6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
					item.secondCounter = secondCounter;
  4025da:	4b20      	ldr	r3, [pc, #128]	; (40265c <main+0x1f0>)
  4025dc:	68da      	ldr	r2, [r3, #12]
  4025de:	9211      	str	r2, [sp, #68]	; 0x44
					item.milliCounter = milliCounter;
  4025e0:	881a      	ldrh	r2, [r3, #0]
  4025e2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
					item.microCounter = microCounter;
  4025e6:	8a5b      	ldrh	r3, [r3, #18]
  4025e8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  4025ec:	2400      	movs	r4, #0
  4025ee:	e007      	b.n	402600 <main+0x194>
						item.data[i] = get_from_buffer(i);
  4025f0:	b2e0      	uxtb	r0, r4
  4025f2:	4b2e      	ldr	r3, [pc, #184]	; (4026ac <main+0x240>)
  4025f4:	4798      	blx	r3
  4025f6:	ab24      	add	r3, sp, #144	; 0x90
  4025f8:	4423      	add	r3, r4
  4025fa:	f803 0c44 	strb.w	r0, [r3, #-68]
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  4025fe:	3401      	adds	r4, #1
  402600:	2c03      	cmp	r4, #3
  402602:	ddf5      	ble.n	4025f0 <main+0x184>
					event_buffer_enqueue(item);
  402604:	ab10      	add	r3, sp, #64	; 0x40
  402606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402608:	4c29      	ldr	r4, [pc, #164]	; (4026b0 <main+0x244>)
  40260a:	47a0      	blx	r4
  40260c:	e7a6      	b.n	40255c <main+0xf0>
				switch (data_mode) {
  40260e:	4b1a      	ldr	r3, [pc, #104]	; (402678 <main+0x20c>)
  402610:	785b      	ldrb	r3, [r3, #1]
  402612:	b2db      	uxtb	r3, r3
  402614:	2b01      	cmp	r3, #1
  402616:	d00a      	beq.n	40262e <main+0x1c2>
  402618:	2b02      	cmp	r3, #2
  40261a:	d1a3      	bne.n	402564 <main+0xf8>
						EventBufferItem dequeueItemEvent = event_buffer_dequeue();
  40261c:	a810      	add	r0, sp, #64	; 0x40
  40261e:	4b25      	ldr	r3, [pc, #148]	; (4026b4 <main+0x248>)
  402620:	4798      	blx	r3
						int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemEvent, sizeof(dequeueItemEvent));
  402622:	2210      	movs	r2, #16
  402624:	a910      	add	r1, sp, #64	; 0x40
  402626:	4816      	ldr	r0, [pc, #88]	; (402680 <main+0x214>)
  402628:	4b23      	ldr	r3, [pc, #140]	; (4026b8 <main+0x24c>)
  40262a:	4798      	blx	r3
  40262c:	e79a      	b.n	402564 <main+0xf8>
						BinBufferItem dequeueItemBin = bin_buffer_dequeue();
  40262e:	a810      	add	r0, sp, #64	; 0x40
  402630:	4b22      	ldr	r3, [pc, #136]	; (4026bc <main+0x250>)
  402632:	4798      	blx	r3
						int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemBin, sizeof(dequeueItemBin));
  402634:	224c      	movs	r2, #76	; 0x4c
  402636:	a910      	add	r1, sp, #64	; 0x40
  402638:	4811      	ldr	r0, [pc, #68]	; (402680 <main+0x214>)
  40263a:	4b1f      	ldr	r3, [pc, #124]	; (4026b8 <main+0x24c>)
  40263c:	4798      	blx	r3
  40263e:	e791      	b.n	402564 <main+0xf8>
  402640:	004001d5 	.word	0x004001d5
  402644:	00402359 	.word	0x00402359
  402648:	0040238d 	.word	0x0040238d
  40264c:	0040239d 	.word	0x0040239d
  402650:	20400510 	.word	0x20400510
  402654:	00401179 	.word	0x00401179
  402658:	0040106d 	.word	0x0040106d
  40265c:	20400490 	.word	0x20400490
  402660:	004020a1 	.word	0x004020a1
  402664:	20400578 	.word	0x20400578
  402668:	00401311 	.word	0x00401311
  40266c:	00401299 	.word	0x00401299
  402670:	004020e5 	.word	0x004020e5
  402674:	204004ec 	.word	0x204004ec
  402678:	20400048 	.word	0x20400048
  40267c:	400e1400 	.word	0x400e1400
  402680:	20400528 	.word	0x20400528
  402684:	00402101 	.word	0x00402101
  402688:	004015cd 	.word	0x004015cd
  40268c:	00402105 	.word	0x00402105
  402690:	004015a1 	.word	0x004015a1
  402694:	004012d5 	.word	0x004012d5
  402698:	00402295 	.word	0x00402295
  40269c:	004023cd 	.word	0x004023cd
  4026a0:	20400594 	.word	0x20400594
  4026a4:	00403013 	.word	0x00403013
  4026a8:	00400b09 	.word	0x00400b09
  4026ac:	0040230d 	.word	0x0040230d
  4026b0:	00400be9 	.word	0x00400be9
  4026b4:	00400c45 	.word	0x00400c45
  4026b8:	00400f71 	.word	0x00400f71
  4026bc:	00400b65 	.word	0x00400b65

004026c0 <__aeabi_drsub>:
  4026c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4026c4:	e002      	b.n	4026cc <__adddf3>
  4026c6:	bf00      	nop

004026c8 <__aeabi_dsub>:
  4026c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004026cc <__adddf3>:
  4026cc:	b530      	push	{r4, r5, lr}
  4026ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4026d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4026d6:	ea94 0f05 	teq	r4, r5
  4026da:	bf08      	it	eq
  4026dc:	ea90 0f02 	teqeq	r0, r2
  4026e0:	bf1f      	itttt	ne
  4026e2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4026e6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4026ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4026ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4026f2:	f000 80e2 	beq.w	4028ba <__adddf3+0x1ee>
  4026f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4026fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4026fe:	bfb8      	it	lt
  402700:	426d      	neglt	r5, r5
  402702:	dd0c      	ble.n	40271e <__adddf3+0x52>
  402704:	442c      	add	r4, r5
  402706:	ea80 0202 	eor.w	r2, r0, r2
  40270a:	ea81 0303 	eor.w	r3, r1, r3
  40270e:	ea82 0000 	eor.w	r0, r2, r0
  402712:	ea83 0101 	eor.w	r1, r3, r1
  402716:	ea80 0202 	eor.w	r2, r0, r2
  40271a:	ea81 0303 	eor.w	r3, r1, r3
  40271e:	2d36      	cmp	r5, #54	; 0x36
  402720:	bf88      	it	hi
  402722:	bd30      	pophi	{r4, r5, pc}
  402724:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402728:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40272c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402730:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402734:	d002      	beq.n	40273c <__adddf3+0x70>
  402736:	4240      	negs	r0, r0
  402738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40273c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402740:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402744:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402748:	d002      	beq.n	402750 <__adddf3+0x84>
  40274a:	4252      	negs	r2, r2
  40274c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402750:	ea94 0f05 	teq	r4, r5
  402754:	f000 80a7 	beq.w	4028a6 <__adddf3+0x1da>
  402758:	f1a4 0401 	sub.w	r4, r4, #1
  40275c:	f1d5 0e20 	rsbs	lr, r5, #32
  402760:	db0d      	blt.n	40277e <__adddf3+0xb2>
  402762:	fa02 fc0e 	lsl.w	ip, r2, lr
  402766:	fa22 f205 	lsr.w	r2, r2, r5
  40276a:	1880      	adds	r0, r0, r2
  40276c:	f141 0100 	adc.w	r1, r1, #0
  402770:	fa03 f20e 	lsl.w	r2, r3, lr
  402774:	1880      	adds	r0, r0, r2
  402776:	fa43 f305 	asr.w	r3, r3, r5
  40277a:	4159      	adcs	r1, r3
  40277c:	e00e      	b.n	40279c <__adddf3+0xd0>
  40277e:	f1a5 0520 	sub.w	r5, r5, #32
  402782:	f10e 0e20 	add.w	lr, lr, #32
  402786:	2a01      	cmp	r2, #1
  402788:	fa03 fc0e 	lsl.w	ip, r3, lr
  40278c:	bf28      	it	cs
  40278e:	f04c 0c02 	orrcs.w	ip, ip, #2
  402792:	fa43 f305 	asr.w	r3, r3, r5
  402796:	18c0      	adds	r0, r0, r3
  402798:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40279c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4027a0:	d507      	bpl.n	4027b2 <__adddf3+0xe6>
  4027a2:	f04f 0e00 	mov.w	lr, #0
  4027a6:	f1dc 0c00 	rsbs	ip, ip, #0
  4027aa:	eb7e 0000 	sbcs.w	r0, lr, r0
  4027ae:	eb6e 0101 	sbc.w	r1, lr, r1
  4027b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4027b6:	d31b      	bcc.n	4027f0 <__adddf3+0x124>
  4027b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4027bc:	d30c      	bcc.n	4027d8 <__adddf3+0x10c>
  4027be:	0849      	lsrs	r1, r1, #1
  4027c0:	ea5f 0030 	movs.w	r0, r0, rrx
  4027c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4027c8:	f104 0401 	add.w	r4, r4, #1
  4027cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4027d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4027d4:	f080 809a 	bcs.w	40290c <__adddf3+0x240>
  4027d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4027dc:	bf08      	it	eq
  4027de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4027e2:	f150 0000 	adcs.w	r0, r0, #0
  4027e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4027ea:	ea41 0105 	orr.w	r1, r1, r5
  4027ee:	bd30      	pop	{r4, r5, pc}
  4027f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4027f4:	4140      	adcs	r0, r0
  4027f6:	eb41 0101 	adc.w	r1, r1, r1
  4027fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4027fe:	f1a4 0401 	sub.w	r4, r4, #1
  402802:	d1e9      	bne.n	4027d8 <__adddf3+0x10c>
  402804:	f091 0f00 	teq	r1, #0
  402808:	bf04      	itt	eq
  40280a:	4601      	moveq	r1, r0
  40280c:	2000      	moveq	r0, #0
  40280e:	fab1 f381 	clz	r3, r1
  402812:	bf08      	it	eq
  402814:	3320      	addeq	r3, #32
  402816:	f1a3 030b 	sub.w	r3, r3, #11
  40281a:	f1b3 0220 	subs.w	r2, r3, #32
  40281e:	da0c      	bge.n	40283a <__adddf3+0x16e>
  402820:	320c      	adds	r2, #12
  402822:	dd08      	ble.n	402836 <__adddf3+0x16a>
  402824:	f102 0c14 	add.w	ip, r2, #20
  402828:	f1c2 020c 	rsb	r2, r2, #12
  40282c:	fa01 f00c 	lsl.w	r0, r1, ip
  402830:	fa21 f102 	lsr.w	r1, r1, r2
  402834:	e00c      	b.n	402850 <__adddf3+0x184>
  402836:	f102 0214 	add.w	r2, r2, #20
  40283a:	bfd8      	it	le
  40283c:	f1c2 0c20 	rsble	ip, r2, #32
  402840:	fa01 f102 	lsl.w	r1, r1, r2
  402844:	fa20 fc0c 	lsr.w	ip, r0, ip
  402848:	bfdc      	itt	le
  40284a:	ea41 010c 	orrle.w	r1, r1, ip
  40284e:	4090      	lslle	r0, r2
  402850:	1ae4      	subs	r4, r4, r3
  402852:	bfa2      	ittt	ge
  402854:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402858:	4329      	orrge	r1, r5
  40285a:	bd30      	popge	{r4, r5, pc}
  40285c:	ea6f 0404 	mvn.w	r4, r4
  402860:	3c1f      	subs	r4, #31
  402862:	da1c      	bge.n	40289e <__adddf3+0x1d2>
  402864:	340c      	adds	r4, #12
  402866:	dc0e      	bgt.n	402886 <__adddf3+0x1ba>
  402868:	f104 0414 	add.w	r4, r4, #20
  40286c:	f1c4 0220 	rsb	r2, r4, #32
  402870:	fa20 f004 	lsr.w	r0, r0, r4
  402874:	fa01 f302 	lsl.w	r3, r1, r2
  402878:	ea40 0003 	orr.w	r0, r0, r3
  40287c:	fa21 f304 	lsr.w	r3, r1, r4
  402880:	ea45 0103 	orr.w	r1, r5, r3
  402884:	bd30      	pop	{r4, r5, pc}
  402886:	f1c4 040c 	rsb	r4, r4, #12
  40288a:	f1c4 0220 	rsb	r2, r4, #32
  40288e:	fa20 f002 	lsr.w	r0, r0, r2
  402892:	fa01 f304 	lsl.w	r3, r1, r4
  402896:	ea40 0003 	orr.w	r0, r0, r3
  40289a:	4629      	mov	r1, r5
  40289c:	bd30      	pop	{r4, r5, pc}
  40289e:	fa21 f004 	lsr.w	r0, r1, r4
  4028a2:	4629      	mov	r1, r5
  4028a4:	bd30      	pop	{r4, r5, pc}
  4028a6:	f094 0f00 	teq	r4, #0
  4028aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4028ae:	bf06      	itte	eq
  4028b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4028b4:	3401      	addeq	r4, #1
  4028b6:	3d01      	subne	r5, #1
  4028b8:	e74e      	b.n	402758 <__adddf3+0x8c>
  4028ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4028be:	bf18      	it	ne
  4028c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4028c4:	d029      	beq.n	40291a <__adddf3+0x24e>
  4028c6:	ea94 0f05 	teq	r4, r5
  4028ca:	bf08      	it	eq
  4028cc:	ea90 0f02 	teqeq	r0, r2
  4028d0:	d005      	beq.n	4028de <__adddf3+0x212>
  4028d2:	ea54 0c00 	orrs.w	ip, r4, r0
  4028d6:	bf04      	itt	eq
  4028d8:	4619      	moveq	r1, r3
  4028da:	4610      	moveq	r0, r2
  4028dc:	bd30      	pop	{r4, r5, pc}
  4028de:	ea91 0f03 	teq	r1, r3
  4028e2:	bf1e      	ittt	ne
  4028e4:	2100      	movne	r1, #0
  4028e6:	2000      	movne	r0, #0
  4028e8:	bd30      	popne	{r4, r5, pc}
  4028ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4028ee:	d105      	bne.n	4028fc <__adddf3+0x230>
  4028f0:	0040      	lsls	r0, r0, #1
  4028f2:	4149      	adcs	r1, r1
  4028f4:	bf28      	it	cs
  4028f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4028fa:	bd30      	pop	{r4, r5, pc}
  4028fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402900:	bf3c      	itt	cc
  402902:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402906:	bd30      	popcc	{r4, r5, pc}
  402908:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40290c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402910:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402914:	f04f 0000 	mov.w	r0, #0
  402918:	bd30      	pop	{r4, r5, pc}
  40291a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40291e:	bf1a      	itte	ne
  402920:	4619      	movne	r1, r3
  402922:	4610      	movne	r0, r2
  402924:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402928:	bf1c      	itt	ne
  40292a:	460b      	movne	r3, r1
  40292c:	4602      	movne	r2, r0
  40292e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402932:	bf06      	itte	eq
  402934:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402938:	ea91 0f03 	teqeq	r1, r3
  40293c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402940:	bd30      	pop	{r4, r5, pc}
  402942:	bf00      	nop

00402944 <__aeabi_ui2d>:
  402944:	f090 0f00 	teq	r0, #0
  402948:	bf04      	itt	eq
  40294a:	2100      	moveq	r1, #0
  40294c:	4770      	bxeq	lr
  40294e:	b530      	push	{r4, r5, lr}
  402950:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402954:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402958:	f04f 0500 	mov.w	r5, #0
  40295c:	f04f 0100 	mov.w	r1, #0
  402960:	e750      	b.n	402804 <__adddf3+0x138>
  402962:	bf00      	nop

00402964 <__aeabi_i2d>:
  402964:	f090 0f00 	teq	r0, #0
  402968:	bf04      	itt	eq
  40296a:	2100      	moveq	r1, #0
  40296c:	4770      	bxeq	lr
  40296e:	b530      	push	{r4, r5, lr}
  402970:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402974:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402978:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40297c:	bf48      	it	mi
  40297e:	4240      	negmi	r0, r0
  402980:	f04f 0100 	mov.w	r1, #0
  402984:	e73e      	b.n	402804 <__adddf3+0x138>
  402986:	bf00      	nop

00402988 <__aeabi_f2d>:
  402988:	0042      	lsls	r2, r0, #1
  40298a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40298e:	ea4f 0131 	mov.w	r1, r1, rrx
  402992:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402996:	bf1f      	itttt	ne
  402998:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40299c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4029a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4029a4:	4770      	bxne	lr
  4029a6:	f092 0f00 	teq	r2, #0
  4029aa:	bf14      	ite	ne
  4029ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4029b0:	4770      	bxeq	lr
  4029b2:	b530      	push	{r4, r5, lr}
  4029b4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4029b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4029bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4029c0:	e720      	b.n	402804 <__adddf3+0x138>
  4029c2:	bf00      	nop

004029c4 <__aeabi_ul2d>:
  4029c4:	ea50 0201 	orrs.w	r2, r0, r1
  4029c8:	bf08      	it	eq
  4029ca:	4770      	bxeq	lr
  4029cc:	b530      	push	{r4, r5, lr}
  4029ce:	f04f 0500 	mov.w	r5, #0
  4029d2:	e00a      	b.n	4029ea <__aeabi_l2d+0x16>

004029d4 <__aeabi_l2d>:
  4029d4:	ea50 0201 	orrs.w	r2, r0, r1
  4029d8:	bf08      	it	eq
  4029da:	4770      	bxeq	lr
  4029dc:	b530      	push	{r4, r5, lr}
  4029de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4029e2:	d502      	bpl.n	4029ea <__aeabi_l2d+0x16>
  4029e4:	4240      	negs	r0, r0
  4029e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4029ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4029ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4029f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4029f6:	f43f aedc 	beq.w	4027b2 <__adddf3+0xe6>
  4029fa:	f04f 0203 	mov.w	r2, #3
  4029fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402a02:	bf18      	it	ne
  402a04:	3203      	addne	r2, #3
  402a06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402a0a:	bf18      	it	ne
  402a0c:	3203      	addne	r2, #3
  402a0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402a12:	f1c2 0320 	rsb	r3, r2, #32
  402a16:	fa00 fc03 	lsl.w	ip, r0, r3
  402a1a:	fa20 f002 	lsr.w	r0, r0, r2
  402a1e:	fa01 fe03 	lsl.w	lr, r1, r3
  402a22:	ea40 000e 	orr.w	r0, r0, lr
  402a26:	fa21 f102 	lsr.w	r1, r1, r2
  402a2a:	4414      	add	r4, r2
  402a2c:	e6c1      	b.n	4027b2 <__adddf3+0xe6>
  402a2e:	bf00      	nop

00402a30 <__aeabi_dmul>:
  402a30:	b570      	push	{r4, r5, r6, lr}
  402a32:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402a36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402a3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402a3e:	bf1d      	ittte	ne
  402a40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402a44:	ea94 0f0c 	teqne	r4, ip
  402a48:	ea95 0f0c 	teqne	r5, ip
  402a4c:	f000 f8de 	bleq	402c0c <__aeabi_dmul+0x1dc>
  402a50:	442c      	add	r4, r5
  402a52:	ea81 0603 	eor.w	r6, r1, r3
  402a56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402a5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402a5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402a62:	bf18      	it	ne
  402a64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402a70:	d038      	beq.n	402ae4 <__aeabi_dmul+0xb4>
  402a72:	fba0 ce02 	umull	ip, lr, r0, r2
  402a76:	f04f 0500 	mov.w	r5, #0
  402a7a:	fbe1 e502 	umlal	lr, r5, r1, r2
  402a7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402a82:	fbe0 e503 	umlal	lr, r5, r0, r3
  402a86:	f04f 0600 	mov.w	r6, #0
  402a8a:	fbe1 5603 	umlal	r5, r6, r1, r3
  402a8e:	f09c 0f00 	teq	ip, #0
  402a92:	bf18      	it	ne
  402a94:	f04e 0e01 	orrne.w	lr, lr, #1
  402a98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402a9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402aa0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402aa4:	d204      	bcs.n	402ab0 <__aeabi_dmul+0x80>
  402aa6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402aaa:	416d      	adcs	r5, r5
  402aac:	eb46 0606 	adc.w	r6, r6, r6
  402ab0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402ab4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402ab8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402abc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402ac0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402ac4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402ac8:	bf88      	it	hi
  402aca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402ace:	d81e      	bhi.n	402b0e <__aeabi_dmul+0xde>
  402ad0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402ad4:	bf08      	it	eq
  402ad6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402ada:	f150 0000 	adcs.w	r0, r0, #0
  402ade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402ae2:	bd70      	pop	{r4, r5, r6, pc}
  402ae4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402ae8:	ea46 0101 	orr.w	r1, r6, r1
  402aec:	ea40 0002 	orr.w	r0, r0, r2
  402af0:	ea81 0103 	eor.w	r1, r1, r3
  402af4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402af8:	bfc2      	ittt	gt
  402afa:	ebd4 050c 	rsbsgt	r5, r4, ip
  402afe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402b02:	bd70      	popgt	{r4, r5, r6, pc}
  402b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402b08:	f04f 0e00 	mov.w	lr, #0
  402b0c:	3c01      	subs	r4, #1
  402b0e:	f300 80ab 	bgt.w	402c68 <__aeabi_dmul+0x238>
  402b12:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402b16:	bfde      	ittt	le
  402b18:	2000      	movle	r0, #0
  402b1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402b1e:	bd70      	pople	{r4, r5, r6, pc}
  402b20:	f1c4 0400 	rsb	r4, r4, #0
  402b24:	3c20      	subs	r4, #32
  402b26:	da35      	bge.n	402b94 <__aeabi_dmul+0x164>
  402b28:	340c      	adds	r4, #12
  402b2a:	dc1b      	bgt.n	402b64 <__aeabi_dmul+0x134>
  402b2c:	f104 0414 	add.w	r4, r4, #20
  402b30:	f1c4 0520 	rsb	r5, r4, #32
  402b34:	fa00 f305 	lsl.w	r3, r0, r5
  402b38:	fa20 f004 	lsr.w	r0, r0, r4
  402b3c:	fa01 f205 	lsl.w	r2, r1, r5
  402b40:	ea40 0002 	orr.w	r0, r0, r2
  402b44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402b48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402b4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402b50:	fa21 f604 	lsr.w	r6, r1, r4
  402b54:	eb42 0106 	adc.w	r1, r2, r6
  402b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b5c:	bf08      	it	eq
  402b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b62:	bd70      	pop	{r4, r5, r6, pc}
  402b64:	f1c4 040c 	rsb	r4, r4, #12
  402b68:	f1c4 0520 	rsb	r5, r4, #32
  402b6c:	fa00 f304 	lsl.w	r3, r0, r4
  402b70:	fa20 f005 	lsr.w	r0, r0, r5
  402b74:	fa01 f204 	lsl.w	r2, r1, r4
  402b78:	ea40 0002 	orr.w	r0, r0, r2
  402b7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402b80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402b84:	f141 0100 	adc.w	r1, r1, #0
  402b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b8c:	bf08      	it	eq
  402b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b92:	bd70      	pop	{r4, r5, r6, pc}
  402b94:	f1c4 0520 	rsb	r5, r4, #32
  402b98:	fa00 f205 	lsl.w	r2, r0, r5
  402b9c:	ea4e 0e02 	orr.w	lr, lr, r2
  402ba0:	fa20 f304 	lsr.w	r3, r0, r4
  402ba4:	fa01 f205 	lsl.w	r2, r1, r5
  402ba8:	ea43 0302 	orr.w	r3, r3, r2
  402bac:	fa21 f004 	lsr.w	r0, r1, r4
  402bb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402bb4:	fa21 f204 	lsr.w	r2, r1, r4
  402bb8:	ea20 0002 	bic.w	r0, r0, r2
  402bbc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402bc4:	bf08      	it	eq
  402bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402bca:	bd70      	pop	{r4, r5, r6, pc}
  402bcc:	f094 0f00 	teq	r4, #0
  402bd0:	d10f      	bne.n	402bf2 <__aeabi_dmul+0x1c2>
  402bd2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402bd6:	0040      	lsls	r0, r0, #1
  402bd8:	eb41 0101 	adc.w	r1, r1, r1
  402bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402be0:	bf08      	it	eq
  402be2:	3c01      	subeq	r4, #1
  402be4:	d0f7      	beq.n	402bd6 <__aeabi_dmul+0x1a6>
  402be6:	ea41 0106 	orr.w	r1, r1, r6
  402bea:	f095 0f00 	teq	r5, #0
  402bee:	bf18      	it	ne
  402bf0:	4770      	bxne	lr
  402bf2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402bf6:	0052      	lsls	r2, r2, #1
  402bf8:	eb43 0303 	adc.w	r3, r3, r3
  402bfc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402c00:	bf08      	it	eq
  402c02:	3d01      	subeq	r5, #1
  402c04:	d0f7      	beq.n	402bf6 <__aeabi_dmul+0x1c6>
  402c06:	ea43 0306 	orr.w	r3, r3, r6
  402c0a:	4770      	bx	lr
  402c0c:	ea94 0f0c 	teq	r4, ip
  402c10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402c14:	bf18      	it	ne
  402c16:	ea95 0f0c 	teqne	r5, ip
  402c1a:	d00c      	beq.n	402c36 <__aeabi_dmul+0x206>
  402c1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402c20:	bf18      	it	ne
  402c22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402c26:	d1d1      	bne.n	402bcc <__aeabi_dmul+0x19c>
  402c28:	ea81 0103 	eor.w	r1, r1, r3
  402c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402c30:	f04f 0000 	mov.w	r0, #0
  402c34:	bd70      	pop	{r4, r5, r6, pc}
  402c36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402c3a:	bf06      	itte	eq
  402c3c:	4610      	moveq	r0, r2
  402c3e:	4619      	moveq	r1, r3
  402c40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402c44:	d019      	beq.n	402c7a <__aeabi_dmul+0x24a>
  402c46:	ea94 0f0c 	teq	r4, ip
  402c4a:	d102      	bne.n	402c52 <__aeabi_dmul+0x222>
  402c4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402c50:	d113      	bne.n	402c7a <__aeabi_dmul+0x24a>
  402c52:	ea95 0f0c 	teq	r5, ip
  402c56:	d105      	bne.n	402c64 <__aeabi_dmul+0x234>
  402c58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402c5c:	bf1c      	itt	ne
  402c5e:	4610      	movne	r0, r2
  402c60:	4619      	movne	r1, r3
  402c62:	d10a      	bne.n	402c7a <__aeabi_dmul+0x24a>
  402c64:	ea81 0103 	eor.w	r1, r1, r3
  402c68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402c6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402c70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402c74:	f04f 0000 	mov.w	r0, #0
  402c78:	bd70      	pop	{r4, r5, r6, pc}
  402c7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402c7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402c82:	bd70      	pop	{r4, r5, r6, pc}

00402c84 <__aeabi_ddiv>:
  402c84:	b570      	push	{r4, r5, r6, lr}
  402c86:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402c8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402c8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402c92:	bf1d      	ittte	ne
  402c94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402c98:	ea94 0f0c 	teqne	r4, ip
  402c9c:	ea95 0f0c 	teqne	r5, ip
  402ca0:	f000 f8a7 	bleq	402df2 <__aeabi_ddiv+0x16e>
  402ca4:	eba4 0405 	sub.w	r4, r4, r5
  402ca8:	ea81 0e03 	eor.w	lr, r1, r3
  402cac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402cb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402cb4:	f000 8088 	beq.w	402dc8 <__aeabi_ddiv+0x144>
  402cb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402cbc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402cc0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402cc4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402cc8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402ccc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402cd0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402cd4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402cd8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402cdc:	429d      	cmp	r5, r3
  402cde:	bf08      	it	eq
  402ce0:	4296      	cmpeq	r6, r2
  402ce2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402ce6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402cea:	d202      	bcs.n	402cf2 <__aeabi_ddiv+0x6e>
  402cec:	085b      	lsrs	r3, r3, #1
  402cee:	ea4f 0232 	mov.w	r2, r2, rrx
  402cf2:	1ab6      	subs	r6, r6, r2
  402cf4:	eb65 0503 	sbc.w	r5, r5, r3
  402cf8:	085b      	lsrs	r3, r3, #1
  402cfa:	ea4f 0232 	mov.w	r2, r2, rrx
  402cfe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402d02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402d06:	ebb6 0e02 	subs.w	lr, r6, r2
  402d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d0e:	bf22      	ittt	cs
  402d10:	1ab6      	subcs	r6, r6, r2
  402d12:	4675      	movcs	r5, lr
  402d14:	ea40 000c 	orrcs.w	r0, r0, ip
  402d18:	085b      	lsrs	r3, r3, #1
  402d1a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d1e:	ebb6 0e02 	subs.w	lr, r6, r2
  402d22:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d26:	bf22      	ittt	cs
  402d28:	1ab6      	subcs	r6, r6, r2
  402d2a:	4675      	movcs	r5, lr
  402d2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402d30:	085b      	lsrs	r3, r3, #1
  402d32:	ea4f 0232 	mov.w	r2, r2, rrx
  402d36:	ebb6 0e02 	subs.w	lr, r6, r2
  402d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d3e:	bf22      	ittt	cs
  402d40:	1ab6      	subcs	r6, r6, r2
  402d42:	4675      	movcs	r5, lr
  402d44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402d48:	085b      	lsrs	r3, r3, #1
  402d4a:	ea4f 0232 	mov.w	r2, r2, rrx
  402d4e:	ebb6 0e02 	subs.w	lr, r6, r2
  402d52:	eb75 0e03 	sbcs.w	lr, r5, r3
  402d56:	bf22      	ittt	cs
  402d58:	1ab6      	subcs	r6, r6, r2
  402d5a:	4675      	movcs	r5, lr
  402d5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402d60:	ea55 0e06 	orrs.w	lr, r5, r6
  402d64:	d018      	beq.n	402d98 <__aeabi_ddiv+0x114>
  402d66:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402d6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402d6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402d72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402d76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402d7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402d7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402d82:	d1c0      	bne.n	402d06 <__aeabi_ddiv+0x82>
  402d84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d88:	d10b      	bne.n	402da2 <__aeabi_ddiv+0x11e>
  402d8a:	ea41 0100 	orr.w	r1, r1, r0
  402d8e:	f04f 0000 	mov.w	r0, #0
  402d92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402d96:	e7b6      	b.n	402d06 <__aeabi_ddiv+0x82>
  402d98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d9c:	bf04      	itt	eq
  402d9e:	4301      	orreq	r1, r0
  402da0:	2000      	moveq	r0, #0
  402da2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402da6:	bf88      	it	hi
  402da8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402dac:	f63f aeaf 	bhi.w	402b0e <__aeabi_dmul+0xde>
  402db0:	ebb5 0c03 	subs.w	ip, r5, r3
  402db4:	bf04      	itt	eq
  402db6:	ebb6 0c02 	subseq.w	ip, r6, r2
  402dba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402dbe:	f150 0000 	adcs.w	r0, r0, #0
  402dc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402dc6:	bd70      	pop	{r4, r5, r6, pc}
  402dc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402dcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402dd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402dd4:	bfc2      	ittt	gt
  402dd6:	ebd4 050c 	rsbsgt	r5, r4, ip
  402dda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402dde:	bd70      	popgt	{r4, r5, r6, pc}
  402de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402de4:	f04f 0e00 	mov.w	lr, #0
  402de8:	3c01      	subs	r4, #1
  402dea:	e690      	b.n	402b0e <__aeabi_dmul+0xde>
  402dec:	ea45 0e06 	orr.w	lr, r5, r6
  402df0:	e68d      	b.n	402b0e <__aeabi_dmul+0xde>
  402df2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402df6:	ea94 0f0c 	teq	r4, ip
  402dfa:	bf08      	it	eq
  402dfc:	ea95 0f0c 	teqeq	r5, ip
  402e00:	f43f af3b 	beq.w	402c7a <__aeabi_dmul+0x24a>
  402e04:	ea94 0f0c 	teq	r4, ip
  402e08:	d10a      	bne.n	402e20 <__aeabi_ddiv+0x19c>
  402e0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402e0e:	f47f af34 	bne.w	402c7a <__aeabi_dmul+0x24a>
  402e12:	ea95 0f0c 	teq	r5, ip
  402e16:	f47f af25 	bne.w	402c64 <__aeabi_dmul+0x234>
  402e1a:	4610      	mov	r0, r2
  402e1c:	4619      	mov	r1, r3
  402e1e:	e72c      	b.n	402c7a <__aeabi_dmul+0x24a>
  402e20:	ea95 0f0c 	teq	r5, ip
  402e24:	d106      	bne.n	402e34 <__aeabi_ddiv+0x1b0>
  402e26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402e2a:	f43f aefd 	beq.w	402c28 <__aeabi_dmul+0x1f8>
  402e2e:	4610      	mov	r0, r2
  402e30:	4619      	mov	r1, r3
  402e32:	e722      	b.n	402c7a <__aeabi_dmul+0x24a>
  402e34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402e38:	bf18      	it	ne
  402e3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402e3e:	f47f aec5 	bne.w	402bcc <__aeabi_dmul+0x19c>
  402e42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402e46:	f47f af0d 	bne.w	402c64 <__aeabi_dmul+0x234>
  402e4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402e4e:	f47f aeeb 	bne.w	402c28 <__aeabi_dmul+0x1f8>
  402e52:	e712      	b.n	402c7a <__aeabi_dmul+0x24a>

00402e54 <__gedf2>:
  402e54:	f04f 3cff 	mov.w	ip, #4294967295
  402e58:	e006      	b.n	402e68 <__cmpdf2+0x4>
  402e5a:	bf00      	nop

00402e5c <__ledf2>:
  402e5c:	f04f 0c01 	mov.w	ip, #1
  402e60:	e002      	b.n	402e68 <__cmpdf2+0x4>
  402e62:	bf00      	nop

00402e64 <__cmpdf2>:
  402e64:	f04f 0c01 	mov.w	ip, #1
  402e68:	f84d cd04 	str.w	ip, [sp, #-4]!
  402e6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402e74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402e78:	bf18      	it	ne
  402e7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402e7e:	d01b      	beq.n	402eb8 <__cmpdf2+0x54>
  402e80:	b001      	add	sp, #4
  402e82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402e86:	bf0c      	ite	eq
  402e88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402e8c:	ea91 0f03 	teqne	r1, r3
  402e90:	bf02      	ittt	eq
  402e92:	ea90 0f02 	teqeq	r0, r2
  402e96:	2000      	moveq	r0, #0
  402e98:	4770      	bxeq	lr
  402e9a:	f110 0f00 	cmn.w	r0, #0
  402e9e:	ea91 0f03 	teq	r1, r3
  402ea2:	bf58      	it	pl
  402ea4:	4299      	cmppl	r1, r3
  402ea6:	bf08      	it	eq
  402ea8:	4290      	cmpeq	r0, r2
  402eaa:	bf2c      	ite	cs
  402eac:	17d8      	asrcs	r0, r3, #31
  402eae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402eb2:	f040 0001 	orr.w	r0, r0, #1
  402eb6:	4770      	bx	lr
  402eb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402ebc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402ec0:	d102      	bne.n	402ec8 <__cmpdf2+0x64>
  402ec2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  402ec6:	d107      	bne.n	402ed8 <__cmpdf2+0x74>
  402ec8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402ecc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402ed0:	d1d6      	bne.n	402e80 <__cmpdf2+0x1c>
  402ed2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  402ed6:	d0d3      	beq.n	402e80 <__cmpdf2+0x1c>
  402ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
  402edc:	4770      	bx	lr
  402ede:	bf00      	nop

00402ee0 <__aeabi_cdrcmple>:
  402ee0:	4684      	mov	ip, r0
  402ee2:	4610      	mov	r0, r2
  402ee4:	4662      	mov	r2, ip
  402ee6:	468c      	mov	ip, r1
  402ee8:	4619      	mov	r1, r3
  402eea:	4663      	mov	r3, ip
  402eec:	e000      	b.n	402ef0 <__aeabi_cdcmpeq>
  402eee:	bf00      	nop

00402ef0 <__aeabi_cdcmpeq>:
  402ef0:	b501      	push	{r0, lr}
  402ef2:	f7ff ffb7 	bl	402e64 <__cmpdf2>
  402ef6:	2800      	cmp	r0, #0
  402ef8:	bf48      	it	mi
  402efa:	f110 0f00 	cmnmi.w	r0, #0
  402efe:	bd01      	pop	{r0, pc}

00402f00 <__aeabi_dcmpeq>:
  402f00:	f84d ed08 	str.w	lr, [sp, #-8]!
  402f04:	f7ff fff4 	bl	402ef0 <__aeabi_cdcmpeq>
  402f08:	bf0c      	ite	eq
  402f0a:	2001      	moveq	r0, #1
  402f0c:	2000      	movne	r0, #0
  402f0e:	f85d fb08 	ldr.w	pc, [sp], #8
  402f12:	bf00      	nop

00402f14 <__aeabi_dcmplt>:
  402f14:	f84d ed08 	str.w	lr, [sp, #-8]!
  402f18:	f7ff ffea 	bl	402ef0 <__aeabi_cdcmpeq>
  402f1c:	bf34      	ite	cc
  402f1e:	2001      	movcc	r0, #1
  402f20:	2000      	movcs	r0, #0
  402f22:	f85d fb08 	ldr.w	pc, [sp], #8
  402f26:	bf00      	nop

00402f28 <__aeabi_dcmple>:
  402f28:	f84d ed08 	str.w	lr, [sp, #-8]!
  402f2c:	f7ff ffe0 	bl	402ef0 <__aeabi_cdcmpeq>
  402f30:	bf94      	ite	ls
  402f32:	2001      	movls	r0, #1
  402f34:	2000      	movhi	r0, #0
  402f36:	f85d fb08 	ldr.w	pc, [sp], #8
  402f3a:	bf00      	nop

00402f3c <__aeabi_dcmpge>:
  402f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402f40:	f7ff ffce 	bl	402ee0 <__aeabi_cdrcmple>
  402f44:	bf94      	ite	ls
  402f46:	2001      	movls	r0, #1
  402f48:	2000      	movhi	r0, #0
  402f4a:	f85d fb08 	ldr.w	pc, [sp], #8
  402f4e:	bf00      	nop

00402f50 <__aeabi_dcmpgt>:
  402f50:	f84d ed08 	str.w	lr, [sp, #-8]!
  402f54:	f7ff ffc4 	bl	402ee0 <__aeabi_cdrcmple>
  402f58:	bf34      	ite	cc
  402f5a:	2001      	movcc	r0, #1
  402f5c:	2000      	movcs	r0, #0
  402f5e:	f85d fb08 	ldr.w	pc, [sp], #8
  402f62:	bf00      	nop

00402f64 <__aeabi_d2iz>:
  402f64:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402f68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402f6c:	d215      	bcs.n	402f9a <__aeabi_d2iz+0x36>
  402f6e:	d511      	bpl.n	402f94 <__aeabi_d2iz+0x30>
  402f70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402f74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402f78:	d912      	bls.n	402fa0 <__aeabi_d2iz+0x3c>
  402f7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402f82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402f86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402f8a:	fa23 f002 	lsr.w	r0, r3, r2
  402f8e:	bf18      	it	ne
  402f90:	4240      	negne	r0, r0
  402f92:	4770      	bx	lr
  402f94:	f04f 0000 	mov.w	r0, #0
  402f98:	4770      	bx	lr
  402f9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402f9e:	d105      	bne.n	402fac <__aeabi_d2iz+0x48>
  402fa0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402fa4:	bf08      	it	eq
  402fa6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  402faa:	4770      	bx	lr
  402fac:	f04f 0000 	mov.w	r0, #0
  402fb0:	4770      	bx	lr
  402fb2:	bf00      	nop

00402fb4 <__libc_init_array>:
  402fb4:	b570      	push	{r4, r5, r6, lr}
  402fb6:	4e0d      	ldr	r6, [pc, #52]	; (402fec <__libc_init_array+0x38>)
  402fb8:	4c0d      	ldr	r4, [pc, #52]	; (402ff0 <__libc_init_array+0x3c>)
  402fba:	1ba4      	subs	r4, r4, r6
  402fbc:	10a4      	asrs	r4, r4, #2
  402fbe:	2500      	movs	r5, #0
  402fc0:	42a5      	cmp	r5, r4
  402fc2:	d109      	bne.n	402fd8 <__libc_init_array+0x24>
  402fc4:	4e0b      	ldr	r6, [pc, #44]	; (402ff4 <__libc_init_array+0x40>)
  402fc6:	4c0c      	ldr	r4, [pc, #48]	; (402ff8 <__libc_init_array+0x44>)
  402fc8:	f000 fdce 	bl	403b68 <_init>
  402fcc:	1ba4      	subs	r4, r4, r6
  402fce:	10a4      	asrs	r4, r4, #2
  402fd0:	2500      	movs	r5, #0
  402fd2:	42a5      	cmp	r5, r4
  402fd4:	d105      	bne.n	402fe2 <__libc_init_array+0x2e>
  402fd6:	bd70      	pop	{r4, r5, r6, pc}
  402fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402fdc:	4798      	blx	r3
  402fde:	3501      	adds	r5, #1
  402fe0:	e7ee      	b.n	402fc0 <__libc_init_array+0xc>
  402fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402fe6:	4798      	blx	r3
  402fe8:	3501      	adds	r5, #1
  402fea:	e7f2      	b.n	402fd2 <__libc_init_array+0x1e>
  402fec:	00403b74 	.word	0x00403b74
  402ff0:	00403b74 	.word	0x00403b74
  402ff4:	00403b74 	.word	0x00403b74
  402ff8:	00403b78 	.word	0x00403b78

00402ffc <memcpy>:
  402ffc:	b510      	push	{r4, lr}
  402ffe:	1e43      	subs	r3, r0, #1
  403000:	440a      	add	r2, r1
  403002:	4291      	cmp	r1, r2
  403004:	d100      	bne.n	403008 <memcpy+0xc>
  403006:	bd10      	pop	{r4, pc}
  403008:	f811 4b01 	ldrb.w	r4, [r1], #1
  40300c:	f803 4f01 	strb.w	r4, [r3, #1]!
  403010:	e7f7      	b.n	403002 <memcpy+0x6>

00403012 <memset>:
  403012:	4402      	add	r2, r0
  403014:	4603      	mov	r3, r0
  403016:	4293      	cmp	r3, r2
  403018:	d100      	bne.n	40301c <memset+0xa>
  40301a:	4770      	bx	lr
  40301c:	f803 1b01 	strb.w	r1, [r3], #1
  403020:	e7f9      	b.n	403016 <memset+0x4>
	...

00403024 <sniprintf>:
  403024:	b40c      	push	{r2, r3}
  403026:	b530      	push	{r4, r5, lr}
  403028:	4b17      	ldr	r3, [pc, #92]	; (403088 <sniprintf+0x64>)
  40302a:	1e0c      	subs	r4, r1, #0
  40302c:	b09d      	sub	sp, #116	; 0x74
  40302e:	681d      	ldr	r5, [r3, #0]
  403030:	da08      	bge.n	403044 <sniprintf+0x20>
  403032:	238b      	movs	r3, #139	; 0x8b
  403034:	602b      	str	r3, [r5, #0]
  403036:	f04f 30ff 	mov.w	r0, #4294967295
  40303a:	b01d      	add	sp, #116	; 0x74
  40303c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  403040:	b002      	add	sp, #8
  403042:	4770      	bx	lr
  403044:	f44f 7302 	mov.w	r3, #520	; 0x208
  403048:	f8ad 3014 	strh.w	r3, [sp, #20]
  40304c:	bf14      	ite	ne
  40304e:	f104 33ff 	addne.w	r3, r4, #4294967295
  403052:	4623      	moveq	r3, r4
  403054:	9304      	str	r3, [sp, #16]
  403056:	9307      	str	r3, [sp, #28]
  403058:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40305c:	9002      	str	r0, [sp, #8]
  40305e:	9006      	str	r0, [sp, #24]
  403060:	f8ad 3016 	strh.w	r3, [sp, #22]
  403064:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403066:	ab21      	add	r3, sp, #132	; 0x84
  403068:	a902      	add	r1, sp, #8
  40306a:	4628      	mov	r0, r5
  40306c:	9301      	str	r3, [sp, #4]
  40306e:	f000 f8cf 	bl	403210 <_svfiprintf_r>
  403072:	1c43      	adds	r3, r0, #1
  403074:	bfbc      	itt	lt
  403076:	238b      	movlt	r3, #139	; 0x8b
  403078:	602b      	strlt	r3, [r5, #0]
  40307a:	2c00      	cmp	r4, #0
  40307c:	d0dd      	beq.n	40303a <sniprintf+0x16>
  40307e:	9b02      	ldr	r3, [sp, #8]
  403080:	2200      	movs	r2, #0
  403082:	701a      	strb	r2, [r3, #0]
  403084:	e7d9      	b.n	40303a <sniprintf+0x16>
  403086:	bf00      	nop
  403088:	20400050 	.word	0x20400050

0040308c <strlen>:
  40308c:	4603      	mov	r3, r0
  40308e:	f813 2b01 	ldrb.w	r2, [r3], #1
  403092:	2a00      	cmp	r2, #0
  403094:	d1fb      	bne.n	40308e <strlen+0x2>
  403096:	1a18      	subs	r0, r3, r0
  403098:	3801      	subs	r0, #1
  40309a:	4770      	bx	lr

0040309c <_malloc_r>:
  40309c:	b570      	push	{r4, r5, r6, lr}
  40309e:	1ccd      	adds	r5, r1, #3
  4030a0:	f025 0503 	bic.w	r5, r5, #3
  4030a4:	3508      	adds	r5, #8
  4030a6:	2d0c      	cmp	r5, #12
  4030a8:	bf38      	it	cc
  4030aa:	250c      	movcc	r5, #12
  4030ac:	2d00      	cmp	r5, #0
  4030ae:	4606      	mov	r6, r0
  4030b0:	db01      	blt.n	4030b6 <_malloc_r+0x1a>
  4030b2:	42a9      	cmp	r1, r5
  4030b4:	d903      	bls.n	4030be <_malloc_r+0x22>
  4030b6:	230c      	movs	r3, #12
  4030b8:	6033      	str	r3, [r6, #0]
  4030ba:	2000      	movs	r0, #0
  4030bc:	bd70      	pop	{r4, r5, r6, pc}
  4030be:	f000 fbb1 	bl	403824 <__malloc_lock>
  4030c2:	4a23      	ldr	r2, [pc, #140]	; (403150 <_malloc_r+0xb4>)
  4030c4:	6814      	ldr	r4, [r2, #0]
  4030c6:	4621      	mov	r1, r4
  4030c8:	b991      	cbnz	r1, 4030f0 <_malloc_r+0x54>
  4030ca:	4c22      	ldr	r4, [pc, #136]	; (403154 <_malloc_r+0xb8>)
  4030cc:	6823      	ldr	r3, [r4, #0]
  4030ce:	b91b      	cbnz	r3, 4030d8 <_malloc_r+0x3c>
  4030d0:	4630      	mov	r0, r6
  4030d2:	f000 fb27 	bl	403724 <_sbrk_r>
  4030d6:	6020      	str	r0, [r4, #0]
  4030d8:	4629      	mov	r1, r5
  4030da:	4630      	mov	r0, r6
  4030dc:	f000 fb22 	bl	403724 <_sbrk_r>
  4030e0:	1c43      	adds	r3, r0, #1
  4030e2:	d126      	bne.n	403132 <_malloc_r+0x96>
  4030e4:	230c      	movs	r3, #12
  4030e6:	6033      	str	r3, [r6, #0]
  4030e8:	4630      	mov	r0, r6
  4030ea:	f000 fb9c 	bl	403826 <__malloc_unlock>
  4030ee:	e7e4      	b.n	4030ba <_malloc_r+0x1e>
  4030f0:	680b      	ldr	r3, [r1, #0]
  4030f2:	1b5b      	subs	r3, r3, r5
  4030f4:	d41a      	bmi.n	40312c <_malloc_r+0x90>
  4030f6:	2b0b      	cmp	r3, #11
  4030f8:	d90f      	bls.n	40311a <_malloc_r+0x7e>
  4030fa:	600b      	str	r3, [r1, #0]
  4030fc:	50cd      	str	r5, [r1, r3]
  4030fe:	18cc      	adds	r4, r1, r3
  403100:	4630      	mov	r0, r6
  403102:	f000 fb90 	bl	403826 <__malloc_unlock>
  403106:	f104 000b 	add.w	r0, r4, #11
  40310a:	1d23      	adds	r3, r4, #4
  40310c:	f020 0007 	bic.w	r0, r0, #7
  403110:	1ac3      	subs	r3, r0, r3
  403112:	d01b      	beq.n	40314c <_malloc_r+0xb0>
  403114:	425a      	negs	r2, r3
  403116:	50e2      	str	r2, [r4, r3]
  403118:	bd70      	pop	{r4, r5, r6, pc}
  40311a:	428c      	cmp	r4, r1
  40311c:	bf0d      	iteet	eq
  40311e:	6863      	ldreq	r3, [r4, #4]
  403120:	684b      	ldrne	r3, [r1, #4]
  403122:	6063      	strne	r3, [r4, #4]
  403124:	6013      	streq	r3, [r2, #0]
  403126:	bf18      	it	ne
  403128:	460c      	movne	r4, r1
  40312a:	e7e9      	b.n	403100 <_malloc_r+0x64>
  40312c:	460c      	mov	r4, r1
  40312e:	6849      	ldr	r1, [r1, #4]
  403130:	e7ca      	b.n	4030c8 <_malloc_r+0x2c>
  403132:	1cc4      	adds	r4, r0, #3
  403134:	f024 0403 	bic.w	r4, r4, #3
  403138:	42a0      	cmp	r0, r4
  40313a:	d005      	beq.n	403148 <_malloc_r+0xac>
  40313c:	1a21      	subs	r1, r4, r0
  40313e:	4630      	mov	r0, r6
  403140:	f000 faf0 	bl	403724 <_sbrk_r>
  403144:	3001      	adds	r0, #1
  403146:	d0cd      	beq.n	4030e4 <_malloc_r+0x48>
  403148:	6025      	str	r5, [r4, #0]
  40314a:	e7d9      	b.n	403100 <_malloc_r+0x64>
  40314c:	bd70      	pop	{r4, r5, r6, pc}
  40314e:	bf00      	nop
  403150:	204004e4 	.word	0x204004e4
  403154:	204004e8 	.word	0x204004e8

00403158 <__ssputs_r>:
  403158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40315c:	688e      	ldr	r6, [r1, #8]
  40315e:	429e      	cmp	r6, r3
  403160:	4682      	mov	sl, r0
  403162:	460c      	mov	r4, r1
  403164:	4691      	mov	r9, r2
  403166:	4698      	mov	r8, r3
  403168:	d835      	bhi.n	4031d6 <__ssputs_r+0x7e>
  40316a:	898a      	ldrh	r2, [r1, #12]
  40316c:	f412 6f90 	tst.w	r2, #1152	; 0x480
  403170:	d031      	beq.n	4031d6 <__ssputs_r+0x7e>
  403172:	6825      	ldr	r5, [r4, #0]
  403174:	6909      	ldr	r1, [r1, #16]
  403176:	1a6f      	subs	r7, r5, r1
  403178:	6965      	ldr	r5, [r4, #20]
  40317a:	2302      	movs	r3, #2
  40317c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  403180:	fb95 f5f3 	sdiv	r5, r5, r3
  403184:	f108 0301 	add.w	r3, r8, #1
  403188:	443b      	add	r3, r7
  40318a:	429d      	cmp	r5, r3
  40318c:	bf38      	it	cc
  40318e:	461d      	movcc	r5, r3
  403190:	0553      	lsls	r3, r2, #21
  403192:	d531      	bpl.n	4031f8 <__ssputs_r+0xa0>
  403194:	4629      	mov	r1, r5
  403196:	f7ff ff81 	bl	40309c <_malloc_r>
  40319a:	4606      	mov	r6, r0
  40319c:	b950      	cbnz	r0, 4031b4 <__ssputs_r+0x5c>
  40319e:	230c      	movs	r3, #12
  4031a0:	f8ca 3000 	str.w	r3, [sl]
  4031a4:	89a3      	ldrh	r3, [r4, #12]
  4031a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031aa:	81a3      	strh	r3, [r4, #12]
  4031ac:	f04f 30ff 	mov.w	r0, #4294967295
  4031b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031b4:	463a      	mov	r2, r7
  4031b6:	6921      	ldr	r1, [r4, #16]
  4031b8:	f7ff ff20 	bl	402ffc <memcpy>
  4031bc:	89a3      	ldrh	r3, [r4, #12]
  4031be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4031c6:	81a3      	strh	r3, [r4, #12]
  4031c8:	6126      	str	r6, [r4, #16]
  4031ca:	6165      	str	r5, [r4, #20]
  4031cc:	443e      	add	r6, r7
  4031ce:	1bed      	subs	r5, r5, r7
  4031d0:	6026      	str	r6, [r4, #0]
  4031d2:	60a5      	str	r5, [r4, #8]
  4031d4:	4646      	mov	r6, r8
  4031d6:	4546      	cmp	r6, r8
  4031d8:	bf28      	it	cs
  4031da:	4646      	movcs	r6, r8
  4031dc:	4632      	mov	r2, r6
  4031de:	4649      	mov	r1, r9
  4031e0:	6820      	ldr	r0, [r4, #0]
  4031e2:	f000 fb05 	bl	4037f0 <memmove>
  4031e6:	68a3      	ldr	r3, [r4, #8]
  4031e8:	1b9b      	subs	r3, r3, r6
  4031ea:	60a3      	str	r3, [r4, #8]
  4031ec:	6823      	ldr	r3, [r4, #0]
  4031ee:	441e      	add	r6, r3
  4031f0:	6026      	str	r6, [r4, #0]
  4031f2:	2000      	movs	r0, #0
  4031f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031f8:	462a      	mov	r2, r5
  4031fa:	f000 fb63 	bl	4038c4 <_realloc_r>
  4031fe:	4606      	mov	r6, r0
  403200:	2800      	cmp	r0, #0
  403202:	d1e1      	bne.n	4031c8 <__ssputs_r+0x70>
  403204:	6921      	ldr	r1, [r4, #16]
  403206:	4650      	mov	r0, sl
  403208:	f000 fb0e 	bl	403828 <_free_r>
  40320c:	e7c7      	b.n	40319e <__ssputs_r+0x46>
	...

00403210 <_svfiprintf_r>:
  403210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403214:	b09d      	sub	sp, #116	; 0x74
  403216:	4680      	mov	r8, r0
  403218:	9303      	str	r3, [sp, #12]
  40321a:	898b      	ldrh	r3, [r1, #12]
  40321c:	061c      	lsls	r4, r3, #24
  40321e:	460d      	mov	r5, r1
  403220:	4616      	mov	r6, r2
  403222:	d50f      	bpl.n	403244 <_svfiprintf_r+0x34>
  403224:	690b      	ldr	r3, [r1, #16]
  403226:	b96b      	cbnz	r3, 403244 <_svfiprintf_r+0x34>
  403228:	2140      	movs	r1, #64	; 0x40
  40322a:	f7ff ff37 	bl	40309c <_malloc_r>
  40322e:	6028      	str	r0, [r5, #0]
  403230:	6128      	str	r0, [r5, #16]
  403232:	b928      	cbnz	r0, 403240 <_svfiprintf_r+0x30>
  403234:	230c      	movs	r3, #12
  403236:	f8c8 3000 	str.w	r3, [r8]
  40323a:	f04f 30ff 	mov.w	r0, #4294967295
  40323e:	e0c5      	b.n	4033cc <_svfiprintf_r+0x1bc>
  403240:	2340      	movs	r3, #64	; 0x40
  403242:	616b      	str	r3, [r5, #20]
  403244:	2300      	movs	r3, #0
  403246:	9309      	str	r3, [sp, #36]	; 0x24
  403248:	2320      	movs	r3, #32
  40324a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40324e:	2330      	movs	r3, #48	; 0x30
  403250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  403254:	f04f 0b01 	mov.w	fp, #1
  403258:	4637      	mov	r7, r6
  40325a:	463c      	mov	r4, r7
  40325c:	f814 3b01 	ldrb.w	r3, [r4], #1
  403260:	2b00      	cmp	r3, #0
  403262:	d13c      	bne.n	4032de <_svfiprintf_r+0xce>
  403264:	ebb7 0a06 	subs.w	sl, r7, r6
  403268:	d00b      	beq.n	403282 <_svfiprintf_r+0x72>
  40326a:	4653      	mov	r3, sl
  40326c:	4632      	mov	r2, r6
  40326e:	4629      	mov	r1, r5
  403270:	4640      	mov	r0, r8
  403272:	f7ff ff71 	bl	403158 <__ssputs_r>
  403276:	3001      	adds	r0, #1
  403278:	f000 80a3 	beq.w	4033c2 <_svfiprintf_r+0x1b2>
  40327c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40327e:	4453      	add	r3, sl
  403280:	9309      	str	r3, [sp, #36]	; 0x24
  403282:	783b      	ldrb	r3, [r7, #0]
  403284:	2b00      	cmp	r3, #0
  403286:	f000 809c 	beq.w	4033c2 <_svfiprintf_r+0x1b2>
  40328a:	2300      	movs	r3, #0
  40328c:	f04f 32ff 	mov.w	r2, #4294967295
  403290:	9304      	str	r3, [sp, #16]
  403292:	9307      	str	r3, [sp, #28]
  403294:	9205      	str	r2, [sp, #20]
  403296:	9306      	str	r3, [sp, #24]
  403298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40329c:	931a      	str	r3, [sp, #104]	; 0x68
  40329e:	2205      	movs	r2, #5
  4032a0:	7821      	ldrb	r1, [r4, #0]
  4032a2:	4850      	ldr	r0, [pc, #320]	; (4033e4 <_svfiprintf_r+0x1d4>)
  4032a4:	f000 fa54 	bl	403750 <memchr>
  4032a8:	1c67      	adds	r7, r4, #1
  4032aa:	9b04      	ldr	r3, [sp, #16]
  4032ac:	b9d8      	cbnz	r0, 4032e6 <_svfiprintf_r+0xd6>
  4032ae:	06d9      	lsls	r1, r3, #27
  4032b0:	bf44      	itt	mi
  4032b2:	2220      	movmi	r2, #32
  4032b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4032b8:	071a      	lsls	r2, r3, #28
  4032ba:	bf44      	itt	mi
  4032bc:	222b      	movmi	r2, #43	; 0x2b
  4032be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4032c2:	7822      	ldrb	r2, [r4, #0]
  4032c4:	2a2a      	cmp	r2, #42	; 0x2a
  4032c6:	d016      	beq.n	4032f6 <_svfiprintf_r+0xe6>
  4032c8:	9a07      	ldr	r2, [sp, #28]
  4032ca:	2100      	movs	r1, #0
  4032cc:	200a      	movs	r0, #10
  4032ce:	4627      	mov	r7, r4
  4032d0:	3401      	adds	r4, #1
  4032d2:	783b      	ldrb	r3, [r7, #0]
  4032d4:	3b30      	subs	r3, #48	; 0x30
  4032d6:	2b09      	cmp	r3, #9
  4032d8:	d951      	bls.n	40337e <_svfiprintf_r+0x16e>
  4032da:	b1c9      	cbz	r1, 403310 <_svfiprintf_r+0x100>
  4032dc:	e011      	b.n	403302 <_svfiprintf_r+0xf2>
  4032de:	2b25      	cmp	r3, #37	; 0x25
  4032e0:	d0c0      	beq.n	403264 <_svfiprintf_r+0x54>
  4032e2:	4627      	mov	r7, r4
  4032e4:	e7b9      	b.n	40325a <_svfiprintf_r+0x4a>
  4032e6:	4a3f      	ldr	r2, [pc, #252]	; (4033e4 <_svfiprintf_r+0x1d4>)
  4032e8:	1a80      	subs	r0, r0, r2
  4032ea:	fa0b f000 	lsl.w	r0, fp, r0
  4032ee:	4318      	orrs	r0, r3
  4032f0:	9004      	str	r0, [sp, #16]
  4032f2:	463c      	mov	r4, r7
  4032f4:	e7d3      	b.n	40329e <_svfiprintf_r+0x8e>
  4032f6:	9a03      	ldr	r2, [sp, #12]
  4032f8:	1d11      	adds	r1, r2, #4
  4032fa:	6812      	ldr	r2, [r2, #0]
  4032fc:	9103      	str	r1, [sp, #12]
  4032fe:	2a00      	cmp	r2, #0
  403300:	db01      	blt.n	403306 <_svfiprintf_r+0xf6>
  403302:	9207      	str	r2, [sp, #28]
  403304:	e004      	b.n	403310 <_svfiprintf_r+0x100>
  403306:	4252      	negs	r2, r2
  403308:	f043 0302 	orr.w	r3, r3, #2
  40330c:	9207      	str	r2, [sp, #28]
  40330e:	9304      	str	r3, [sp, #16]
  403310:	783b      	ldrb	r3, [r7, #0]
  403312:	2b2e      	cmp	r3, #46	; 0x2e
  403314:	d10e      	bne.n	403334 <_svfiprintf_r+0x124>
  403316:	787b      	ldrb	r3, [r7, #1]
  403318:	2b2a      	cmp	r3, #42	; 0x2a
  40331a:	f107 0101 	add.w	r1, r7, #1
  40331e:	d132      	bne.n	403386 <_svfiprintf_r+0x176>
  403320:	9b03      	ldr	r3, [sp, #12]
  403322:	1d1a      	adds	r2, r3, #4
  403324:	681b      	ldr	r3, [r3, #0]
  403326:	9203      	str	r2, [sp, #12]
  403328:	2b00      	cmp	r3, #0
  40332a:	bfb8      	it	lt
  40332c:	f04f 33ff 	movlt.w	r3, #4294967295
  403330:	3702      	adds	r7, #2
  403332:	9305      	str	r3, [sp, #20]
  403334:	4c2c      	ldr	r4, [pc, #176]	; (4033e8 <_svfiprintf_r+0x1d8>)
  403336:	7839      	ldrb	r1, [r7, #0]
  403338:	2203      	movs	r2, #3
  40333a:	4620      	mov	r0, r4
  40333c:	f000 fa08 	bl	403750 <memchr>
  403340:	b138      	cbz	r0, 403352 <_svfiprintf_r+0x142>
  403342:	2340      	movs	r3, #64	; 0x40
  403344:	1b00      	subs	r0, r0, r4
  403346:	fa03 f000 	lsl.w	r0, r3, r0
  40334a:	9b04      	ldr	r3, [sp, #16]
  40334c:	4303      	orrs	r3, r0
  40334e:	9304      	str	r3, [sp, #16]
  403350:	3701      	adds	r7, #1
  403352:	7839      	ldrb	r1, [r7, #0]
  403354:	4825      	ldr	r0, [pc, #148]	; (4033ec <_svfiprintf_r+0x1dc>)
  403356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40335a:	2206      	movs	r2, #6
  40335c:	1c7e      	adds	r6, r7, #1
  40335e:	f000 f9f7 	bl	403750 <memchr>
  403362:	2800      	cmp	r0, #0
  403364:	d035      	beq.n	4033d2 <_svfiprintf_r+0x1c2>
  403366:	4b22      	ldr	r3, [pc, #136]	; (4033f0 <_svfiprintf_r+0x1e0>)
  403368:	b9fb      	cbnz	r3, 4033aa <_svfiprintf_r+0x19a>
  40336a:	9b03      	ldr	r3, [sp, #12]
  40336c:	3307      	adds	r3, #7
  40336e:	f023 0307 	bic.w	r3, r3, #7
  403372:	3308      	adds	r3, #8
  403374:	9303      	str	r3, [sp, #12]
  403376:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403378:	444b      	add	r3, r9
  40337a:	9309      	str	r3, [sp, #36]	; 0x24
  40337c:	e76c      	b.n	403258 <_svfiprintf_r+0x48>
  40337e:	fb00 3202 	mla	r2, r0, r2, r3
  403382:	2101      	movs	r1, #1
  403384:	e7a3      	b.n	4032ce <_svfiprintf_r+0xbe>
  403386:	2300      	movs	r3, #0
  403388:	9305      	str	r3, [sp, #20]
  40338a:	4618      	mov	r0, r3
  40338c:	240a      	movs	r4, #10
  40338e:	460f      	mov	r7, r1
  403390:	3101      	adds	r1, #1
  403392:	783a      	ldrb	r2, [r7, #0]
  403394:	3a30      	subs	r2, #48	; 0x30
  403396:	2a09      	cmp	r2, #9
  403398:	d903      	bls.n	4033a2 <_svfiprintf_r+0x192>
  40339a:	2b00      	cmp	r3, #0
  40339c:	d0ca      	beq.n	403334 <_svfiprintf_r+0x124>
  40339e:	9005      	str	r0, [sp, #20]
  4033a0:	e7c8      	b.n	403334 <_svfiprintf_r+0x124>
  4033a2:	fb04 2000 	mla	r0, r4, r0, r2
  4033a6:	2301      	movs	r3, #1
  4033a8:	e7f1      	b.n	40338e <_svfiprintf_r+0x17e>
  4033aa:	ab03      	add	r3, sp, #12
  4033ac:	9300      	str	r3, [sp, #0]
  4033ae:	462a      	mov	r2, r5
  4033b0:	4b10      	ldr	r3, [pc, #64]	; (4033f4 <_svfiprintf_r+0x1e4>)
  4033b2:	a904      	add	r1, sp, #16
  4033b4:	4640      	mov	r0, r8
  4033b6:	f3af 8000 	nop.w
  4033ba:	f1b0 3fff 	cmp.w	r0, #4294967295
  4033be:	4681      	mov	r9, r0
  4033c0:	d1d9      	bne.n	403376 <_svfiprintf_r+0x166>
  4033c2:	89ab      	ldrh	r3, [r5, #12]
  4033c4:	065b      	lsls	r3, r3, #25
  4033c6:	f53f af38 	bmi.w	40323a <_svfiprintf_r+0x2a>
  4033ca:	9809      	ldr	r0, [sp, #36]	; 0x24
  4033cc:	b01d      	add	sp, #116	; 0x74
  4033ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033d2:	ab03      	add	r3, sp, #12
  4033d4:	9300      	str	r3, [sp, #0]
  4033d6:	462a      	mov	r2, r5
  4033d8:	4b06      	ldr	r3, [pc, #24]	; (4033f4 <_svfiprintf_r+0x1e4>)
  4033da:	a904      	add	r1, sp, #16
  4033dc:	4640      	mov	r0, r8
  4033de:	f000 f881 	bl	4034e4 <_printf_i>
  4033e2:	e7ea      	b.n	4033ba <_svfiprintf_r+0x1aa>
  4033e4:	00403b34 	.word	0x00403b34
  4033e8:	00403b3a 	.word	0x00403b3a
  4033ec:	00403b3e 	.word	0x00403b3e
  4033f0:	00000000 	.word	0x00000000
  4033f4:	00403159 	.word	0x00403159

004033f8 <_printf_common>:
  4033f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4033fc:	4691      	mov	r9, r2
  4033fe:	461f      	mov	r7, r3
  403400:	688a      	ldr	r2, [r1, #8]
  403402:	690b      	ldr	r3, [r1, #16]
  403404:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403408:	4293      	cmp	r3, r2
  40340a:	bfb8      	it	lt
  40340c:	4613      	movlt	r3, r2
  40340e:	f8c9 3000 	str.w	r3, [r9]
  403412:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403416:	4606      	mov	r6, r0
  403418:	460c      	mov	r4, r1
  40341a:	b112      	cbz	r2, 403422 <_printf_common+0x2a>
  40341c:	3301      	adds	r3, #1
  40341e:	f8c9 3000 	str.w	r3, [r9]
  403422:	6823      	ldr	r3, [r4, #0]
  403424:	0699      	lsls	r1, r3, #26
  403426:	bf42      	ittt	mi
  403428:	f8d9 3000 	ldrmi.w	r3, [r9]
  40342c:	3302      	addmi	r3, #2
  40342e:	f8c9 3000 	strmi.w	r3, [r9]
  403432:	6825      	ldr	r5, [r4, #0]
  403434:	f015 0506 	ands.w	r5, r5, #6
  403438:	d107      	bne.n	40344a <_printf_common+0x52>
  40343a:	f104 0a19 	add.w	sl, r4, #25
  40343e:	68e3      	ldr	r3, [r4, #12]
  403440:	f8d9 2000 	ldr.w	r2, [r9]
  403444:	1a9b      	subs	r3, r3, r2
  403446:	429d      	cmp	r5, r3
  403448:	db29      	blt.n	40349e <_printf_common+0xa6>
  40344a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40344e:	6822      	ldr	r2, [r4, #0]
  403450:	3300      	adds	r3, #0
  403452:	bf18      	it	ne
  403454:	2301      	movne	r3, #1
  403456:	0692      	lsls	r2, r2, #26
  403458:	d42e      	bmi.n	4034b8 <_printf_common+0xc0>
  40345a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40345e:	4639      	mov	r1, r7
  403460:	4630      	mov	r0, r6
  403462:	47c0      	blx	r8
  403464:	3001      	adds	r0, #1
  403466:	d021      	beq.n	4034ac <_printf_common+0xb4>
  403468:	6823      	ldr	r3, [r4, #0]
  40346a:	68e5      	ldr	r5, [r4, #12]
  40346c:	f8d9 2000 	ldr.w	r2, [r9]
  403470:	f003 0306 	and.w	r3, r3, #6
  403474:	2b04      	cmp	r3, #4
  403476:	bf08      	it	eq
  403478:	1aad      	subeq	r5, r5, r2
  40347a:	68a3      	ldr	r3, [r4, #8]
  40347c:	6922      	ldr	r2, [r4, #16]
  40347e:	bf0c      	ite	eq
  403480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403484:	2500      	movne	r5, #0
  403486:	4293      	cmp	r3, r2
  403488:	bfc4      	itt	gt
  40348a:	1a9b      	subgt	r3, r3, r2
  40348c:	18ed      	addgt	r5, r5, r3
  40348e:	f04f 0900 	mov.w	r9, #0
  403492:	341a      	adds	r4, #26
  403494:	454d      	cmp	r5, r9
  403496:	d11b      	bne.n	4034d0 <_printf_common+0xd8>
  403498:	2000      	movs	r0, #0
  40349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40349e:	2301      	movs	r3, #1
  4034a0:	4652      	mov	r2, sl
  4034a2:	4639      	mov	r1, r7
  4034a4:	4630      	mov	r0, r6
  4034a6:	47c0      	blx	r8
  4034a8:	3001      	adds	r0, #1
  4034aa:	d103      	bne.n	4034b4 <_printf_common+0xbc>
  4034ac:	f04f 30ff 	mov.w	r0, #4294967295
  4034b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034b4:	3501      	adds	r5, #1
  4034b6:	e7c2      	b.n	40343e <_printf_common+0x46>
  4034b8:	18e1      	adds	r1, r4, r3
  4034ba:	1c5a      	adds	r2, r3, #1
  4034bc:	2030      	movs	r0, #48	; 0x30
  4034be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4034c2:	4422      	add	r2, r4
  4034c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4034c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4034cc:	3302      	adds	r3, #2
  4034ce:	e7c4      	b.n	40345a <_printf_common+0x62>
  4034d0:	2301      	movs	r3, #1
  4034d2:	4622      	mov	r2, r4
  4034d4:	4639      	mov	r1, r7
  4034d6:	4630      	mov	r0, r6
  4034d8:	47c0      	blx	r8
  4034da:	3001      	adds	r0, #1
  4034dc:	d0e6      	beq.n	4034ac <_printf_common+0xb4>
  4034de:	f109 0901 	add.w	r9, r9, #1
  4034e2:	e7d7      	b.n	403494 <_printf_common+0x9c>

004034e4 <_printf_i>:
  4034e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4034e8:	4617      	mov	r7, r2
  4034ea:	7e0a      	ldrb	r2, [r1, #24]
  4034ec:	b085      	sub	sp, #20
  4034ee:	2a6e      	cmp	r2, #110	; 0x6e
  4034f0:	4698      	mov	r8, r3
  4034f2:	4606      	mov	r6, r0
  4034f4:	460c      	mov	r4, r1
  4034f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4034f8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4034fc:	f000 80bc 	beq.w	403678 <_printf_i+0x194>
  403500:	d81a      	bhi.n	403538 <_printf_i+0x54>
  403502:	2a63      	cmp	r2, #99	; 0x63
  403504:	d02e      	beq.n	403564 <_printf_i+0x80>
  403506:	d80a      	bhi.n	40351e <_printf_i+0x3a>
  403508:	2a00      	cmp	r2, #0
  40350a:	f000 80c8 	beq.w	40369e <_printf_i+0x1ba>
  40350e:	2a58      	cmp	r2, #88	; 0x58
  403510:	f000 808a 	beq.w	403628 <_printf_i+0x144>
  403514:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403518:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40351c:	e02a      	b.n	403574 <_printf_i+0x90>
  40351e:	2a64      	cmp	r2, #100	; 0x64
  403520:	d001      	beq.n	403526 <_printf_i+0x42>
  403522:	2a69      	cmp	r2, #105	; 0x69
  403524:	d1f6      	bne.n	403514 <_printf_i+0x30>
  403526:	6821      	ldr	r1, [r4, #0]
  403528:	681a      	ldr	r2, [r3, #0]
  40352a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40352e:	d023      	beq.n	403578 <_printf_i+0x94>
  403530:	1d11      	adds	r1, r2, #4
  403532:	6019      	str	r1, [r3, #0]
  403534:	6813      	ldr	r3, [r2, #0]
  403536:	e027      	b.n	403588 <_printf_i+0xa4>
  403538:	2a73      	cmp	r2, #115	; 0x73
  40353a:	f000 80b4 	beq.w	4036a6 <_printf_i+0x1c2>
  40353e:	d808      	bhi.n	403552 <_printf_i+0x6e>
  403540:	2a6f      	cmp	r2, #111	; 0x6f
  403542:	d02a      	beq.n	40359a <_printf_i+0xb6>
  403544:	2a70      	cmp	r2, #112	; 0x70
  403546:	d1e5      	bne.n	403514 <_printf_i+0x30>
  403548:	680a      	ldr	r2, [r1, #0]
  40354a:	f042 0220 	orr.w	r2, r2, #32
  40354e:	600a      	str	r2, [r1, #0]
  403550:	e003      	b.n	40355a <_printf_i+0x76>
  403552:	2a75      	cmp	r2, #117	; 0x75
  403554:	d021      	beq.n	40359a <_printf_i+0xb6>
  403556:	2a78      	cmp	r2, #120	; 0x78
  403558:	d1dc      	bne.n	403514 <_printf_i+0x30>
  40355a:	2278      	movs	r2, #120	; 0x78
  40355c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403560:	496e      	ldr	r1, [pc, #440]	; (40371c <_printf_i+0x238>)
  403562:	e064      	b.n	40362e <_printf_i+0x14a>
  403564:	681a      	ldr	r2, [r3, #0]
  403566:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40356a:	1d11      	adds	r1, r2, #4
  40356c:	6019      	str	r1, [r3, #0]
  40356e:	6813      	ldr	r3, [r2, #0]
  403570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403574:	2301      	movs	r3, #1
  403576:	e0a3      	b.n	4036c0 <_printf_i+0x1dc>
  403578:	f011 0f40 	tst.w	r1, #64	; 0x40
  40357c:	f102 0104 	add.w	r1, r2, #4
  403580:	6019      	str	r1, [r3, #0]
  403582:	d0d7      	beq.n	403534 <_printf_i+0x50>
  403584:	f9b2 3000 	ldrsh.w	r3, [r2]
  403588:	2b00      	cmp	r3, #0
  40358a:	da03      	bge.n	403594 <_printf_i+0xb0>
  40358c:	222d      	movs	r2, #45	; 0x2d
  40358e:	425b      	negs	r3, r3
  403590:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403594:	4962      	ldr	r1, [pc, #392]	; (403720 <_printf_i+0x23c>)
  403596:	220a      	movs	r2, #10
  403598:	e017      	b.n	4035ca <_printf_i+0xe6>
  40359a:	6820      	ldr	r0, [r4, #0]
  40359c:	6819      	ldr	r1, [r3, #0]
  40359e:	f010 0f80 	tst.w	r0, #128	; 0x80
  4035a2:	d003      	beq.n	4035ac <_printf_i+0xc8>
  4035a4:	1d08      	adds	r0, r1, #4
  4035a6:	6018      	str	r0, [r3, #0]
  4035a8:	680b      	ldr	r3, [r1, #0]
  4035aa:	e006      	b.n	4035ba <_printf_i+0xd6>
  4035ac:	f010 0f40 	tst.w	r0, #64	; 0x40
  4035b0:	f101 0004 	add.w	r0, r1, #4
  4035b4:	6018      	str	r0, [r3, #0]
  4035b6:	d0f7      	beq.n	4035a8 <_printf_i+0xc4>
  4035b8:	880b      	ldrh	r3, [r1, #0]
  4035ba:	4959      	ldr	r1, [pc, #356]	; (403720 <_printf_i+0x23c>)
  4035bc:	2a6f      	cmp	r2, #111	; 0x6f
  4035be:	bf14      	ite	ne
  4035c0:	220a      	movne	r2, #10
  4035c2:	2208      	moveq	r2, #8
  4035c4:	2000      	movs	r0, #0
  4035c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4035ca:	6865      	ldr	r5, [r4, #4]
  4035cc:	60a5      	str	r5, [r4, #8]
  4035ce:	2d00      	cmp	r5, #0
  4035d0:	f2c0 809c 	blt.w	40370c <_printf_i+0x228>
  4035d4:	6820      	ldr	r0, [r4, #0]
  4035d6:	f020 0004 	bic.w	r0, r0, #4
  4035da:	6020      	str	r0, [r4, #0]
  4035dc:	2b00      	cmp	r3, #0
  4035de:	d13f      	bne.n	403660 <_printf_i+0x17c>
  4035e0:	2d00      	cmp	r5, #0
  4035e2:	f040 8095 	bne.w	403710 <_printf_i+0x22c>
  4035e6:	4675      	mov	r5, lr
  4035e8:	2a08      	cmp	r2, #8
  4035ea:	d10b      	bne.n	403604 <_printf_i+0x120>
  4035ec:	6823      	ldr	r3, [r4, #0]
  4035ee:	07da      	lsls	r2, r3, #31
  4035f0:	d508      	bpl.n	403604 <_printf_i+0x120>
  4035f2:	6923      	ldr	r3, [r4, #16]
  4035f4:	6862      	ldr	r2, [r4, #4]
  4035f6:	429a      	cmp	r2, r3
  4035f8:	bfde      	ittt	le
  4035fa:	2330      	movle	r3, #48	; 0x30
  4035fc:	f805 3c01 	strble.w	r3, [r5, #-1]
  403600:	f105 35ff 	addle.w	r5, r5, #4294967295
  403604:	ebae 0305 	sub.w	r3, lr, r5
  403608:	6123      	str	r3, [r4, #16]
  40360a:	f8cd 8000 	str.w	r8, [sp]
  40360e:	463b      	mov	r3, r7
  403610:	aa03      	add	r2, sp, #12
  403612:	4621      	mov	r1, r4
  403614:	4630      	mov	r0, r6
  403616:	f7ff feef 	bl	4033f8 <_printf_common>
  40361a:	3001      	adds	r0, #1
  40361c:	d155      	bne.n	4036ca <_printf_i+0x1e6>
  40361e:	f04f 30ff 	mov.w	r0, #4294967295
  403622:	b005      	add	sp, #20
  403624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403628:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40362c:	493c      	ldr	r1, [pc, #240]	; (403720 <_printf_i+0x23c>)
  40362e:	6822      	ldr	r2, [r4, #0]
  403630:	6818      	ldr	r0, [r3, #0]
  403632:	f012 0f80 	tst.w	r2, #128	; 0x80
  403636:	f100 0504 	add.w	r5, r0, #4
  40363a:	601d      	str	r5, [r3, #0]
  40363c:	d001      	beq.n	403642 <_printf_i+0x15e>
  40363e:	6803      	ldr	r3, [r0, #0]
  403640:	e002      	b.n	403648 <_printf_i+0x164>
  403642:	0655      	lsls	r5, r2, #25
  403644:	d5fb      	bpl.n	40363e <_printf_i+0x15a>
  403646:	8803      	ldrh	r3, [r0, #0]
  403648:	07d0      	lsls	r0, r2, #31
  40364a:	bf44      	itt	mi
  40364c:	f042 0220 	orrmi.w	r2, r2, #32
  403650:	6022      	strmi	r2, [r4, #0]
  403652:	b91b      	cbnz	r3, 40365c <_printf_i+0x178>
  403654:	6822      	ldr	r2, [r4, #0]
  403656:	f022 0220 	bic.w	r2, r2, #32
  40365a:	6022      	str	r2, [r4, #0]
  40365c:	2210      	movs	r2, #16
  40365e:	e7b1      	b.n	4035c4 <_printf_i+0xe0>
  403660:	4675      	mov	r5, lr
  403662:	fbb3 f0f2 	udiv	r0, r3, r2
  403666:	fb02 3310 	mls	r3, r2, r0, r3
  40366a:	5ccb      	ldrb	r3, [r1, r3]
  40366c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403670:	4603      	mov	r3, r0
  403672:	2800      	cmp	r0, #0
  403674:	d1f5      	bne.n	403662 <_printf_i+0x17e>
  403676:	e7b7      	b.n	4035e8 <_printf_i+0x104>
  403678:	6808      	ldr	r0, [r1, #0]
  40367a:	681a      	ldr	r2, [r3, #0]
  40367c:	6949      	ldr	r1, [r1, #20]
  40367e:	f010 0f80 	tst.w	r0, #128	; 0x80
  403682:	d004      	beq.n	40368e <_printf_i+0x1aa>
  403684:	1d10      	adds	r0, r2, #4
  403686:	6018      	str	r0, [r3, #0]
  403688:	6813      	ldr	r3, [r2, #0]
  40368a:	6019      	str	r1, [r3, #0]
  40368c:	e007      	b.n	40369e <_printf_i+0x1ba>
  40368e:	f010 0f40 	tst.w	r0, #64	; 0x40
  403692:	f102 0004 	add.w	r0, r2, #4
  403696:	6018      	str	r0, [r3, #0]
  403698:	6813      	ldr	r3, [r2, #0]
  40369a:	d0f6      	beq.n	40368a <_printf_i+0x1a6>
  40369c:	8019      	strh	r1, [r3, #0]
  40369e:	2300      	movs	r3, #0
  4036a0:	6123      	str	r3, [r4, #16]
  4036a2:	4675      	mov	r5, lr
  4036a4:	e7b1      	b.n	40360a <_printf_i+0x126>
  4036a6:	681a      	ldr	r2, [r3, #0]
  4036a8:	1d11      	adds	r1, r2, #4
  4036aa:	6019      	str	r1, [r3, #0]
  4036ac:	6815      	ldr	r5, [r2, #0]
  4036ae:	6862      	ldr	r2, [r4, #4]
  4036b0:	2100      	movs	r1, #0
  4036b2:	4628      	mov	r0, r5
  4036b4:	f000 f84c 	bl	403750 <memchr>
  4036b8:	b108      	cbz	r0, 4036be <_printf_i+0x1da>
  4036ba:	1b40      	subs	r0, r0, r5
  4036bc:	6060      	str	r0, [r4, #4]
  4036be:	6863      	ldr	r3, [r4, #4]
  4036c0:	6123      	str	r3, [r4, #16]
  4036c2:	2300      	movs	r3, #0
  4036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4036c8:	e79f      	b.n	40360a <_printf_i+0x126>
  4036ca:	6923      	ldr	r3, [r4, #16]
  4036cc:	462a      	mov	r2, r5
  4036ce:	4639      	mov	r1, r7
  4036d0:	4630      	mov	r0, r6
  4036d2:	47c0      	blx	r8
  4036d4:	3001      	adds	r0, #1
  4036d6:	d0a2      	beq.n	40361e <_printf_i+0x13a>
  4036d8:	6823      	ldr	r3, [r4, #0]
  4036da:	079b      	lsls	r3, r3, #30
  4036dc:	d507      	bpl.n	4036ee <_printf_i+0x20a>
  4036de:	2500      	movs	r5, #0
  4036e0:	f104 0919 	add.w	r9, r4, #25
  4036e4:	68e3      	ldr	r3, [r4, #12]
  4036e6:	9a03      	ldr	r2, [sp, #12]
  4036e8:	1a9b      	subs	r3, r3, r2
  4036ea:	429d      	cmp	r5, r3
  4036ec:	db05      	blt.n	4036fa <_printf_i+0x216>
  4036ee:	68e0      	ldr	r0, [r4, #12]
  4036f0:	9b03      	ldr	r3, [sp, #12]
  4036f2:	4298      	cmp	r0, r3
  4036f4:	bfb8      	it	lt
  4036f6:	4618      	movlt	r0, r3
  4036f8:	e793      	b.n	403622 <_printf_i+0x13e>
  4036fa:	2301      	movs	r3, #1
  4036fc:	464a      	mov	r2, r9
  4036fe:	4639      	mov	r1, r7
  403700:	4630      	mov	r0, r6
  403702:	47c0      	blx	r8
  403704:	3001      	adds	r0, #1
  403706:	d08a      	beq.n	40361e <_printf_i+0x13a>
  403708:	3501      	adds	r5, #1
  40370a:	e7eb      	b.n	4036e4 <_printf_i+0x200>
  40370c:	2b00      	cmp	r3, #0
  40370e:	d1a7      	bne.n	403660 <_printf_i+0x17c>
  403710:	780b      	ldrb	r3, [r1, #0]
  403712:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403716:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40371a:	e765      	b.n	4035e8 <_printf_i+0x104>
  40371c:	00403b56 	.word	0x00403b56
  403720:	00403b45 	.word	0x00403b45

00403724 <_sbrk_r>:
  403724:	b538      	push	{r3, r4, r5, lr}
  403726:	4c06      	ldr	r4, [pc, #24]	; (403740 <_sbrk_r+0x1c>)
  403728:	2300      	movs	r3, #0
  40372a:	4605      	mov	r5, r0
  40372c:	4608      	mov	r0, r1
  40372e:	6023      	str	r3, [r4, #0]
  403730:	f7fe f82c 	bl	40178c <_sbrk>
  403734:	1c43      	adds	r3, r0, #1
  403736:	d102      	bne.n	40373e <_sbrk_r+0x1a>
  403738:	6823      	ldr	r3, [r4, #0]
  40373a:	b103      	cbz	r3, 40373e <_sbrk_r+0x1a>
  40373c:	602b      	str	r3, [r5, #0]
  40373e:	bd38      	pop	{r3, r4, r5, pc}
  403740:	20401674 	.word	0x20401674
	...

00403750 <memchr>:
  403750:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403754:	2a10      	cmp	r2, #16
  403756:	db2b      	blt.n	4037b0 <memchr+0x60>
  403758:	f010 0f07 	tst.w	r0, #7
  40375c:	d008      	beq.n	403770 <memchr+0x20>
  40375e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403762:	3a01      	subs	r2, #1
  403764:	428b      	cmp	r3, r1
  403766:	d02d      	beq.n	4037c4 <memchr+0x74>
  403768:	f010 0f07 	tst.w	r0, #7
  40376c:	b342      	cbz	r2, 4037c0 <memchr+0x70>
  40376e:	d1f6      	bne.n	40375e <memchr+0xe>
  403770:	b4f0      	push	{r4, r5, r6, r7}
  403772:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403776:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40377a:	f022 0407 	bic.w	r4, r2, #7
  40377e:	f07f 0700 	mvns.w	r7, #0
  403782:	2300      	movs	r3, #0
  403784:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403788:	3c08      	subs	r4, #8
  40378a:	ea85 0501 	eor.w	r5, r5, r1
  40378e:	ea86 0601 	eor.w	r6, r6, r1
  403792:	fa85 f547 	uadd8	r5, r5, r7
  403796:	faa3 f587 	sel	r5, r3, r7
  40379a:	fa86 f647 	uadd8	r6, r6, r7
  40379e:	faa5 f687 	sel	r6, r5, r7
  4037a2:	b98e      	cbnz	r6, 4037c8 <memchr+0x78>
  4037a4:	d1ee      	bne.n	403784 <memchr+0x34>
  4037a6:	bcf0      	pop	{r4, r5, r6, r7}
  4037a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4037ac:	f002 0207 	and.w	r2, r2, #7
  4037b0:	b132      	cbz	r2, 4037c0 <memchr+0x70>
  4037b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4037b6:	3a01      	subs	r2, #1
  4037b8:	ea83 0301 	eor.w	r3, r3, r1
  4037bc:	b113      	cbz	r3, 4037c4 <memchr+0x74>
  4037be:	d1f8      	bne.n	4037b2 <memchr+0x62>
  4037c0:	2000      	movs	r0, #0
  4037c2:	4770      	bx	lr
  4037c4:	3801      	subs	r0, #1
  4037c6:	4770      	bx	lr
  4037c8:	2d00      	cmp	r5, #0
  4037ca:	bf06      	itte	eq
  4037cc:	4635      	moveq	r5, r6
  4037ce:	3803      	subeq	r0, #3
  4037d0:	3807      	subne	r0, #7
  4037d2:	f015 0f01 	tst.w	r5, #1
  4037d6:	d107      	bne.n	4037e8 <memchr+0x98>
  4037d8:	3001      	adds	r0, #1
  4037da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4037de:	bf02      	ittt	eq
  4037e0:	3001      	addeq	r0, #1
  4037e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4037e6:	3001      	addeq	r0, #1
  4037e8:	bcf0      	pop	{r4, r5, r6, r7}
  4037ea:	3801      	subs	r0, #1
  4037ec:	4770      	bx	lr
  4037ee:	bf00      	nop

004037f0 <memmove>:
  4037f0:	4288      	cmp	r0, r1
  4037f2:	b510      	push	{r4, lr}
  4037f4:	eb01 0302 	add.w	r3, r1, r2
  4037f8:	d803      	bhi.n	403802 <memmove+0x12>
  4037fa:	1e42      	subs	r2, r0, #1
  4037fc:	4299      	cmp	r1, r3
  4037fe:	d10c      	bne.n	40381a <memmove+0x2a>
  403800:	bd10      	pop	{r4, pc}
  403802:	4298      	cmp	r0, r3
  403804:	d2f9      	bcs.n	4037fa <memmove+0xa>
  403806:	1881      	adds	r1, r0, r2
  403808:	1ad2      	subs	r2, r2, r3
  40380a:	42d3      	cmn	r3, r2
  40380c:	d100      	bne.n	403810 <memmove+0x20>
  40380e:	bd10      	pop	{r4, pc}
  403810:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403814:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403818:	e7f7      	b.n	40380a <memmove+0x1a>
  40381a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40381e:	f802 4f01 	strb.w	r4, [r2, #1]!
  403822:	e7eb      	b.n	4037fc <memmove+0xc>

00403824 <__malloc_lock>:
  403824:	4770      	bx	lr

00403826 <__malloc_unlock>:
  403826:	4770      	bx	lr

00403828 <_free_r>:
  403828:	b538      	push	{r3, r4, r5, lr}
  40382a:	4605      	mov	r5, r0
  40382c:	2900      	cmp	r1, #0
  40382e:	d045      	beq.n	4038bc <_free_r+0x94>
  403830:	f851 3c04 	ldr.w	r3, [r1, #-4]
  403834:	1f0c      	subs	r4, r1, #4
  403836:	2b00      	cmp	r3, #0
  403838:	bfb8      	it	lt
  40383a:	18e4      	addlt	r4, r4, r3
  40383c:	f7ff fff2 	bl	403824 <__malloc_lock>
  403840:	4a1f      	ldr	r2, [pc, #124]	; (4038c0 <_free_r+0x98>)
  403842:	6813      	ldr	r3, [r2, #0]
  403844:	4610      	mov	r0, r2
  403846:	b933      	cbnz	r3, 403856 <_free_r+0x2e>
  403848:	6063      	str	r3, [r4, #4]
  40384a:	6014      	str	r4, [r2, #0]
  40384c:	4628      	mov	r0, r5
  40384e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403852:	f7ff bfe8 	b.w	403826 <__malloc_unlock>
  403856:	42a3      	cmp	r3, r4
  403858:	d90c      	bls.n	403874 <_free_r+0x4c>
  40385a:	6821      	ldr	r1, [r4, #0]
  40385c:	1862      	adds	r2, r4, r1
  40385e:	4293      	cmp	r3, r2
  403860:	bf04      	itt	eq
  403862:	681a      	ldreq	r2, [r3, #0]
  403864:	685b      	ldreq	r3, [r3, #4]
  403866:	6063      	str	r3, [r4, #4]
  403868:	bf04      	itt	eq
  40386a:	1852      	addeq	r2, r2, r1
  40386c:	6022      	streq	r2, [r4, #0]
  40386e:	6004      	str	r4, [r0, #0]
  403870:	e7ec      	b.n	40384c <_free_r+0x24>
  403872:	4613      	mov	r3, r2
  403874:	685a      	ldr	r2, [r3, #4]
  403876:	b10a      	cbz	r2, 40387c <_free_r+0x54>
  403878:	42a2      	cmp	r2, r4
  40387a:	d9fa      	bls.n	403872 <_free_r+0x4a>
  40387c:	6819      	ldr	r1, [r3, #0]
  40387e:	1858      	adds	r0, r3, r1
  403880:	42a0      	cmp	r0, r4
  403882:	d10b      	bne.n	40389c <_free_r+0x74>
  403884:	6820      	ldr	r0, [r4, #0]
  403886:	4401      	add	r1, r0
  403888:	1858      	adds	r0, r3, r1
  40388a:	4282      	cmp	r2, r0
  40388c:	6019      	str	r1, [r3, #0]
  40388e:	d1dd      	bne.n	40384c <_free_r+0x24>
  403890:	6810      	ldr	r0, [r2, #0]
  403892:	6852      	ldr	r2, [r2, #4]
  403894:	605a      	str	r2, [r3, #4]
  403896:	4401      	add	r1, r0
  403898:	6019      	str	r1, [r3, #0]
  40389a:	e7d7      	b.n	40384c <_free_r+0x24>
  40389c:	d902      	bls.n	4038a4 <_free_r+0x7c>
  40389e:	230c      	movs	r3, #12
  4038a0:	602b      	str	r3, [r5, #0]
  4038a2:	e7d3      	b.n	40384c <_free_r+0x24>
  4038a4:	6820      	ldr	r0, [r4, #0]
  4038a6:	1821      	adds	r1, r4, r0
  4038a8:	428a      	cmp	r2, r1
  4038aa:	bf04      	itt	eq
  4038ac:	6811      	ldreq	r1, [r2, #0]
  4038ae:	6852      	ldreq	r2, [r2, #4]
  4038b0:	6062      	str	r2, [r4, #4]
  4038b2:	bf04      	itt	eq
  4038b4:	1809      	addeq	r1, r1, r0
  4038b6:	6021      	streq	r1, [r4, #0]
  4038b8:	605c      	str	r4, [r3, #4]
  4038ba:	e7c7      	b.n	40384c <_free_r+0x24>
  4038bc:	bd38      	pop	{r3, r4, r5, pc}
  4038be:	bf00      	nop
  4038c0:	204004e4 	.word	0x204004e4

004038c4 <_realloc_r>:
  4038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4038c6:	4607      	mov	r7, r0
  4038c8:	4614      	mov	r4, r2
  4038ca:	460e      	mov	r6, r1
  4038cc:	b921      	cbnz	r1, 4038d8 <_realloc_r+0x14>
  4038ce:	4611      	mov	r1, r2
  4038d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  4038d4:	f7ff bbe2 	b.w	40309c <_malloc_r>
  4038d8:	b922      	cbnz	r2, 4038e4 <_realloc_r+0x20>
  4038da:	f7ff ffa5 	bl	403828 <_free_r>
  4038de:	4625      	mov	r5, r4
  4038e0:	4628      	mov	r0, r5
  4038e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038e4:	f000 f814 	bl	403910 <_malloc_usable_size_r>
  4038e8:	4284      	cmp	r4, r0
  4038ea:	d90f      	bls.n	40390c <_realloc_r+0x48>
  4038ec:	4621      	mov	r1, r4
  4038ee:	4638      	mov	r0, r7
  4038f0:	f7ff fbd4 	bl	40309c <_malloc_r>
  4038f4:	4605      	mov	r5, r0
  4038f6:	2800      	cmp	r0, #0
  4038f8:	d0f2      	beq.n	4038e0 <_realloc_r+0x1c>
  4038fa:	4631      	mov	r1, r6
  4038fc:	4622      	mov	r2, r4
  4038fe:	f7ff fb7d 	bl	402ffc <memcpy>
  403902:	4631      	mov	r1, r6
  403904:	4638      	mov	r0, r7
  403906:	f7ff ff8f 	bl	403828 <_free_r>
  40390a:	e7e9      	b.n	4038e0 <_realloc_r+0x1c>
  40390c:	4635      	mov	r5, r6
  40390e:	e7e7      	b.n	4038e0 <_realloc_r+0x1c>

00403910 <_malloc_usable_size_r>:
  403910:	f851 0c04 	ldr.w	r0, [r1, #-4]
  403914:	2800      	cmp	r0, #0
  403916:	f1a0 0004 	sub.w	r0, r0, #4
  40391a:	bfbc      	itt	lt
  40391c:	580b      	ldrlt	r3, [r1, r0]
  40391e:	18c0      	addlt	r0, r0, r3
  403920:	4770      	bx	lr
  403922:	0000      	movs	r0, r0
  403924:	682f2e2e 	.word	0x682f2e2e
  403928:	732f6c61 	.word	0x732f6c61
  40392c:	682f6372 	.word	0x682f6372
  403930:	695f6c61 	.word	0x695f6c61
  403934:	00632e6f 	.word	0x00632e6f
  403938:	682f2e2e 	.word	0x682f2e2e
  40393c:	732f6c61 	.word	0x732f6c61
  403940:	682f6372 	.word	0x682f6372
  403944:	725f6c61 	.word	0x725f6c61
  403948:	5f646e61 	.word	0x5f646e61
  40394c:	636e7973 	.word	0x636e7973
  403950:	0000632e 	.word	0x0000632e
  403954:	682f2e2e 	.word	0x682f2e2e
  403958:	732f6c61 	.word	0x732f6c61
  40395c:	682f6372 	.word	0x682f6372
  403960:	735f6c61 	.word	0x735f6c61
  403964:	6d5f6970 	.word	0x6d5f6970
  403968:	6e79735f 	.word	0x6e79735f
  40396c:	00632e63 	.word	0x00632e63
  403970:	682f2e2e 	.word	0x682f2e2e
  403974:	732f6c61 	.word	0x732f6c61
  403978:	682f6372 	.word	0x682f6372
  40397c:	745f6c61 	.word	0x745f6c61
  403980:	72656d69 	.word	0x72656d69
  403984:	0000632e 	.word	0x0000632e
  403988:	682f2e2e 	.word	0x682f2e2e
  40398c:	732f6c61 	.word	0x732f6c61
  403990:	682f6372 	.word	0x682f6372
  403994:	755f6c61 	.word	0x755f6c61
  403998:	74726173 	.word	0x74726173
  40399c:	7973615f 	.word	0x7973615f
  4039a0:	632e636e 	.word	0x632e636e
  4039a4:	00000000 	.word	0x00000000
  4039a8:	682f2e2e 	.word	0x682f2e2e
  4039ac:	752f6c61 	.word	0x752f6c61
  4039b0:	736c6974 	.word	0x736c6974
  4039b4:	6372732f 	.word	0x6372732f
  4039b8:	6974752f 	.word	0x6974752f
  4039bc:	6c5f736c 	.word	0x6c5f736c
  4039c0:	2e747369 	.word	0x2e747369
  4039c4:	00000063 	.word	0x00000063
  4039c8:	682f2e2e 	.word	0x682f2e2e
  4039cc:	752f6c61 	.word	0x752f6c61
  4039d0:	736c6974 	.word	0x736c6974
  4039d4:	6372732f 	.word	0x6372732f
  4039d8:	6974752f 	.word	0x6974752f
  4039dc:	725f736c 	.word	0x725f736c
  4039e0:	62676e69 	.word	0x62676e69
  4039e4:	65666675 	.word	0x65666675
  4039e8:	00632e72 	.word	0x00632e72

004039ec <spi_regs>:
  4039ec:	00000000 80000000 00000001 04961602     ................
  4039fc:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  403a0c:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  403a1c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
  403a2c:	682f2e2e 742f6c70 2f676e72 5f6c7068     ../hpl/trng/hpl_
  403a3c:	676e7274 0000632e                       trng.c..

00403a44 <_usarts>:
  403a44:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  403a54:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  403a64:	632e7472 00000000 1f1e1d79 706d6554     rt.c....y...Temp
  403a74:	74617265 3a657275 2e302520 43206632     erature: %0.2f C
  403a84:	7250202c 75737365 203a6572 322e3025     , Pressure: %0.2
  403a94:	50682066 48202c61 64696d75 3a797469     f hPa, Humidity:
  403aa4:	2e302520 25256632 00000a0d 6f727245      %0.2f%%....Erro
  403ab4:	65722072 6e696461 4d422067 30383245     r reading BME280
  403ac4:	6e657320 20726f73 61746164 00000a0d      sensor data....

00403ad4 <__sf_fake_stderr>:
	...

00403af4 <__sf_fake_stdin>:
	...

00403b14 <__sf_fake_stdout>:
	...
  403b34:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  403b44:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  403b54:	31300046 35343332 39383736 64636261     F.0123456789abcd
  403b64:	00006665                                ef..

00403b68 <_init>:
  403b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b6a:	bf00      	nop
  403b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403b6e:	bc08      	pop	{r3}
  403b70:	469e      	mov	lr, r3
  403b72:	4770      	bx	lr

00403b74 <__init_array_start>:
  403b74:	0040018d 	.word	0x0040018d

00403b78 <_fini>:
  403b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b7a:	bf00      	nop
  403b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403b7e:	bc08      	pop	{r3}
  403b80:	469e      	mov	lr, r3
  403b82:	4770      	bx	lr

00403b84 <__fini_array_start>:
  403b84:	00400169 	.word	0x00400169
