
ADCSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002030  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20400000  00402030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000015b4  20400050  00402080  00020050  2**2
                  ALLOC
  3 .heap         00000204  20401604  00403634  00020050  2**0
                  ALLOC
  4 .stack        00000400  20401808  00403838  00020050  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY
  7 .debug_info   000152a5  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f83  00000000  00000000  0003537c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009d3e  00000000  00000000  000382ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b98  00000000  00000000  0004203d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ac8  00000000  00000000  00042bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003e27d  00000000  00000000  0004369d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012706  00000000  00000000  0008191a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00147a74  00000000  00000000  00094020  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ffc  00000000  00000000  001dba94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 1c 40 20 b1 06 40 00 ad 06 40 00 ad 06 40 00     ..@ ..@...@...@.
  400010:	ad 06 40 00 ad 06 40 00 ad 06 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ad 06 40 00 ad 06 40 00 00 00 00 00 ad 06 40 00     ..@...@.......@.
  40003c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40004c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40005c:	ad 06 40 00 ad 06 40 00 00 00 00 00 ad 06 40 00     ..@...@.......@.
  40006c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ed 19 40 00     ..@...@...@...@.
  40007c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40008c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40009c:	ed 15 40 00 ad 06 40 00 ad 06 40 00 01 16 40 00     ..@...@...@...@.
  4000ac:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  4000bc:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  4000cc:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  4000dc:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  4000ec:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  4000fc:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40010c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ......@...@...@.
  40012c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40013c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40014c:	ad 06 40 00 ad 06 40 00 ad 06 40 00 ad 06 40 00     ..@...@...@...@.
  40015c:	ad 06 40 00 ad 06 40 00 ad 06 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400050 	.word	0x20400050
  400184:	00000000 	.word	0x00000000
  400188:	00402030 	.word	0x00402030

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00402030 	.word	0x00402030
  4001c8:	20400054 	.word	0x20400054
  4001cc:	00402030 	.word	0x00402030
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:
  4001d4:	b508      	push	{r3, lr}
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	0040090d 	.word	0x0040090d

004001e0 <interleave_reg_addr>:
  4001e0:	b470      	push	{r4, r5, r6}
  4001e2:	2401      	movs	r4, #1
  4001e4:	e007      	b.n	4001f6 <interleave_reg_addr+0x16>
  4001e6:	0065      	lsls	r5, r4, #1
  4001e8:	3d01      	subs	r5, #1
  4001ea:	5d06      	ldrb	r6, [r0, r4]
  4001ec:	554e      	strb	r6, [r1, r5]
  4001ee:	5d15      	ldrb	r5, [r2, r4]
  4001f0:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
  4001f4:	3401      	adds	r4, #1
  4001f6:	429c      	cmp	r4, r3
  4001f8:	d3f5      	bcc.n	4001e6 <interleave_reg_addr+0x6>
  4001fa:	bc70      	pop	{r4, r5, r6}
  4001fc:	4770      	bx	lr

004001fe <parse_temp_press_calib_data>:
  4001fe:	7842      	ldrb	r2, [r0, #1]
  400200:	7803      	ldrb	r3, [r0, #0]
  400202:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400206:	830b      	strh	r3, [r1, #24]
  400208:	78c2      	ldrb	r2, [r0, #3]
  40020a:	7883      	ldrb	r3, [r0, #2]
  40020c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400210:	834b      	strh	r3, [r1, #26]
  400212:	7942      	ldrb	r2, [r0, #5]
  400214:	7903      	ldrb	r3, [r0, #4]
  400216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40021a:	838b      	strh	r3, [r1, #28]
  40021c:	79c2      	ldrb	r2, [r0, #7]
  40021e:	7983      	ldrb	r3, [r0, #6]
  400220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400224:	83cb      	strh	r3, [r1, #30]
  400226:	7a42      	ldrb	r2, [r0, #9]
  400228:	7a03      	ldrb	r3, [r0, #8]
  40022a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40022e:	840b      	strh	r3, [r1, #32]
  400230:	7ac2      	ldrb	r2, [r0, #11]
  400232:	7a83      	ldrb	r3, [r0, #10]
  400234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400238:	844b      	strh	r3, [r1, #34]	; 0x22
  40023a:	7b42      	ldrb	r2, [r0, #13]
  40023c:	7b03      	ldrb	r3, [r0, #12]
  40023e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400242:	848b      	strh	r3, [r1, #36]	; 0x24
  400244:	7bc2      	ldrb	r2, [r0, #15]
  400246:	7b83      	ldrb	r3, [r0, #14]
  400248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40024c:	84cb      	strh	r3, [r1, #38]	; 0x26
  40024e:	7c42      	ldrb	r2, [r0, #17]
  400250:	7c03      	ldrb	r3, [r0, #16]
  400252:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400256:	850b      	strh	r3, [r1, #40]	; 0x28
  400258:	7cc2      	ldrb	r2, [r0, #19]
  40025a:	7c83      	ldrb	r3, [r0, #18]
  40025c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400260:	854b      	strh	r3, [r1, #42]	; 0x2a
  400262:	7d42      	ldrb	r2, [r0, #21]
  400264:	7d03      	ldrb	r3, [r0, #20]
  400266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40026a:	858b      	strh	r3, [r1, #44]	; 0x2c
  40026c:	7dc2      	ldrb	r2, [r0, #23]
  40026e:	7d83      	ldrb	r3, [r0, #22]
  400270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400274:	85cb      	strh	r3, [r1, #46]	; 0x2e
  400276:	7e43      	ldrb	r3, [r0, #25]
  400278:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
  40027c:	4770      	bx	lr

0040027e <parse_humidity_calib_data>:
  40027e:	7842      	ldrb	r2, [r0, #1]
  400280:	7803      	ldrb	r3, [r0, #0]
  400282:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400286:	864b      	strh	r3, [r1, #50]	; 0x32
  400288:	7883      	ldrb	r3, [r0, #2]
  40028a:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  40028e:	f990 3003 	ldrsb.w	r3, [r0, #3]
  400292:	b29b      	uxth	r3, r3
  400294:	011b      	lsls	r3, r3, #4
  400296:	b21b      	sxth	r3, r3
  400298:	7902      	ldrb	r2, [r0, #4]
  40029a:	f002 020f 	and.w	r2, r2, #15
  40029e:	4313      	orrs	r3, r2
  4002a0:	86cb      	strh	r3, [r1, #54]	; 0x36
  4002a2:	f990 3005 	ldrsb.w	r3, [r0, #5]
  4002a6:	b29b      	uxth	r3, r3
  4002a8:	011b      	lsls	r3, r3, #4
  4002aa:	b21b      	sxth	r3, r3
  4002ac:	7902      	ldrb	r2, [r0, #4]
  4002ae:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
  4002b2:	870b      	strh	r3, [r1, #56]	; 0x38
  4002b4:	f990 3006 	ldrsb.w	r3, [r0, #6]
  4002b8:	f881 303a 	strb.w	r3, [r1, #58]	; 0x3a
  4002bc:	4770      	bx	lr

004002be <null_ptr_check>:
  4002be:	b150      	cbz	r0, 4002d6 <null_ptr_check+0x18>
  4002c0:	68c2      	ldr	r2, [r0, #12]
  4002c2:	b15a      	cbz	r2, 4002dc <null_ptr_check+0x1e>
  4002c4:	6902      	ldr	r2, [r0, #16]
  4002c6:	b162      	cbz	r2, 4002e2 <null_ptr_check+0x24>
  4002c8:	6943      	ldr	r3, [r0, #20]
  4002ca:	b10b      	cbz	r3, 4002d0 <null_ptr_check+0x12>
  4002cc:	2000      	movs	r0, #0
  4002ce:	4770      	bx	lr
  4002d0:	f04f 30ff 	mov.w	r0, #4294967295
  4002d4:	4770      	bx	lr
  4002d6:	f04f 30ff 	mov.w	r0, #4294967295
  4002da:	4770      	bx	lr
  4002dc:	f04f 30ff 	mov.w	r0, #4294967295
  4002e0:	4770      	bx	lr
  4002e2:	f04f 30ff 	mov.w	r0, #4294967295
  4002e6:	4770      	bx	lr

004002e8 <bme280_get_regs>:
  4002e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4002ec:	4605      	mov	r5, r0
  4002ee:	460e      	mov	r6, r1
  4002f0:	4691      	mov	r9, r2
  4002f2:	461c      	mov	r4, r3
  4002f4:	4618      	mov	r0, r3
  4002f6:	4b10      	ldr	r3, [pc, #64]	; (400338 <bme280_get_regs+0x50>)
  4002f8:	4798      	blx	r3
  4002fa:	4680      	mov	r8, r0
  4002fc:	fab0 f080 	clz	r0, r0
  400300:	0940      	lsrs	r0, r0, #5
  400302:	2e00      	cmp	r6, #0
  400304:	bf08      	it	eq
  400306:	2000      	moveq	r0, #0
  400308:	b178      	cbz	r0, 40032a <bme280_get_regs+0x42>
  40030a:	7863      	ldrb	r3, [r4, #1]
  40030c:	2b01      	cmp	r3, #1
  40030e:	d001      	beq.n	400314 <bme280_get_regs+0x2c>
  400310:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  400314:	68e7      	ldr	r7, [r4, #12]
  400316:	6863      	ldr	r3, [r4, #4]
  400318:	464a      	mov	r2, r9
  40031a:	4631      	mov	r1, r6
  40031c:	4628      	mov	r0, r5
  40031e:	47b8      	blx	r7
  400320:	7220      	strb	r0, [r4, #8]
  400322:	b928      	cbnz	r0, 400330 <bme280_get_regs+0x48>
  400324:	4640      	mov	r0, r8
  400326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40032a:	f04f 38ff 	mov.w	r8, #4294967295
  40032e:	e7f9      	b.n	400324 <bme280_get_regs+0x3c>
  400330:	f06f 0801 	mvn.w	r8, #1
  400334:	e7f6      	b.n	400324 <bme280_get_regs+0x3c>
  400336:	bf00      	nop
  400338:	004002bf 	.word	0x004002bf

0040033c <get_calib_data>:
  40033c:	b530      	push	{r4, r5, lr}
  40033e:	b089      	sub	sp, #36	; 0x24
  400340:	4604      	mov	r4, r0
  400342:	2300      	movs	r3, #0
  400344:	9301      	str	r3, [sp, #4]
  400346:	9302      	str	r3, [sp, #8]
  400348:	9303      	str	r3, [sp, #12]
  40034a:	9304      	str	r3, [sp, #16]
  40034c:	9305      	str	r3, [sp, #20]
  40034e:	9306      	str	r3, [sp, #24]
  400350:	f8ad 301c 	strh.w	r3, [sp, #28]
  400354:	4603      	mov	r3, r0
  400356:	221a      	movs	r2, #26
  400358:	a901      	add	r1, sp, #4
  40035a:	2088      	movs	r0, #136	; 0x88
  40035c:	4d0c      	ldr	r5, [pc, #48]	; (400390 <get_calib_data+0x54>)
  40035e:	47a8      	blx	r5
  400360:	4605      	mov	r5, r0
  400362:	b110      	cbz	r0, 40036a <get_calib_data+0x2e>
  400364:	4628      	mov	r0, r5
  400366:	b009      	add	sp, #36	; 0x24
  400368:	bd30      	pop	{r4, r5, pc}
  40036a:	4621      	mov	r1, r4
  40036c:	a801      	add	r0, sp, #4
  40036e:	4b09      	ldr	r3, [pc, #36]	; (400394 <get_calib_data+0x58>)
  400370:	4798      	blx	r3
  400372:	4623      	mov	r3, r4
  400374:	2207      	movs	r2, #7
  400376:	a901      	add	r1, sp, #4
  400378:	20e1      	movs	r0, #225	; 0xe1
  40037a:	4d05      	ldr	r5, [pc, #20]	; (400390 <get_calib_data+0x54>)
  40037c:	47a8      	blx	r5
  40037e:	4605      	mov	r5, r0
  400380:	2800      	cmp	r0, #0
  400382:	d1ef      	bne.n	400364 <get_calib_data+0x28>
  400384:	4621      	mov	r1, r4
  400386:	a801      	add	r0, sp, #4
  400388:	4b03      	ldr	r3, [pc, #12]	; (400398 <get_calib_data+0x5c>)
  40038a:	4798      	blx	r3
  40038c:	e7ea      	b.n	400364 <get_calib_data+0x28>
  40038e:	bf00      	nop
  400390:	004002e9 	.word	0x004002e9
  400394:	004001ff 	.word	0x004001ff
  400398:	0040027f 	.word	0x0040027f

0040039c <bme280_set_regs>:
  40039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003a0:	b086      	sub	sp, #24
  4003a2:	4604      	mov	r4, r0
  4003a4:	460f      	mov	r7, r1
  4003a6:	4615      	mov	r5, r2
  4003a8:	461e      	mov	r6, r3
  4003aa:	2a0a      	cmp	r2, #10
  4003ac:	d900      	bls.n	4003b0 <bme280_set_regs+0x14>
  4003ae:	250a      	movs	r5, #10
  4003b0:	4630      	mov	r0, r6
  4003b2:	4b1e      	ldr	r3, [pc, #120]	; (40042c <bme280_set_regs+0x90>)
  4003b4:	4798      	blx	r3
  4003b6:	4680      	mov	r8, r0
  4003b8:	fab0 f080 	clz	r0, r0
  4003bc:	0940      	lsrs	r0, r0, #5
  4003be:	2c00      	cmp	r4, #0
  4003c0:	bf08      	it	eq
  4003c2:	2000      	moveq	r0, #0
  4003c4:	b330      	cbz	r0, 400414 <bme280_set_regs+0x78>
  4003c6:	b347      	cbz	r7, 40041a <bme280_set_regs+0x7e>
  4003c8:	b355      	cbz	r5, 400420 <bme280_set_regs+0x84>
  4003ca:	783b      	ldrb	r3, [r7, #0]
  4003cc:	f88d 3004 	strb.w	r3, [sp, #4]
  4003d0:	7873      	ldrb	r3, [r6, #1]
  4003d2:	2b01      	cmp	r3, #1
  4003d4:	d008      	beq.n	4003e8 <bme280_set_regs+0x4c>
  4003d6:	2300      	movs	r3, #0
  4003d8:	e004      	b.n	4003e4 <bme280_set_regs+0x48>
  4003da:	5ce2      	ldrb	r2, [r4, r3]
  4003dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  4003e0:	54e2      	strb	r2, [r4, r3]
  4003e2:	3301      	adds	r3, #1
  4003e4:	429d      	cmp	r5, r3
  4003e6:	d8f8      	bhi.n	4003da <bme280_set_regs+0x3e>
  4003e8:	2d01      	cmp	r5, #1
  4003ea:	d907      	bls.n	4003fc <bme280_set_regs+0x60>
  4003ec:	462b      	mov	r3, r5
  4003ee:	463a      	mov	r2, r7
  4003f0:	a901      	add	r1, sp, #4
  4003f2:	4620      	mov	r0, r4
  4003f4:	4f0e      	ldr	r7, [pc, #56]	; (400430 <bme280_set_regs+0x94>)
  4003f6:	47b8      	blx	r7
  4003f8:	006d      	lsls	r5, r5, #1
  4003fa:	3d01      	subs	r5, #1
  4003fc:	6937      	ldr	r7, [r6, #16]
  4003fe:	6873      	ldr	r3, [r6, #4]
  400400:	462a      	mov	r2, r5
  400402:	a901      	add	r1, sp, #4
  400404:	7820      	ldrb	r0, [r4, #0]
  400406:	47b8      	blx	r7
  400408:	7230      	strb	r0, [r6, #8]
  40040a:	b960      	cbnz	r0, 400426 <bme280_set_regs+0x8a>
  40040c:	4640      	mov	r0, r8
  40040e:	b006      	add	sp, #24
  400410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400414:	f04f 38ff 	mov.w	r8, #4294967295
  400418:	e7f8      	b.n	40040c <bme280_set_regs+0x70>
  40041a:	f04f 38ff 	mov.w	r8, #4294967295
  40041e:	e7f5      	b.n	40040c <bme280_set_regs+0x70>
  400420:	f06f 0802 	mvn.w	r8, #2
  400424:	e7f2      	b.n	40040c <bme280_set_regs+0x70>
  400426:	f06f 0801 	mvn.w	r8, #1
  40042a:	e7ef      	b.n	40040c <bme280_set_regs+0x70>
  40042c:	004002bf 	.word	0x004002bf
  400430:	004001e1 	.word	0x004001e1

00400434 <bme280_soft_reset>:
  400434:	b570      	push	{r4, r5, r6, lr}
  400436:	b082      	sub	sp, #8
  400438:	4604      	mov	r4, r0
  40043a:	23e0      	movs	r3, #224	; 0xe0
  40043c:	f88d 3007 	strb.w	r3, [sp, #7]
  400440:	2300      	movs	r3, #0
  400442:	f88d 3006 	strb.w	r3, [sp, #6]
  400446:	a902      	add	r1, sp, #8
  400448:	23b6      	movs	r3, #182	; 0xb6
  40044a:	f801 3d03 	strb.w	r3, [r1, #-3]!
  40044e:	4603      	mov	r3, r0
  400450:	2201      	movs	r2, #1
  400452:	f10d 0007 	add.w	r0, sp, #7
  400456:	4d14      	ldr	r5, [pc, #80]	; (4004a8 <bme280_soft_reset+0x74>)
  400458:	47a8      	blx	r5
  40045a:	4602      	mov	r2, r0
  40045c:	b9e8      	cbnz	r0, 40049a <bme280_soft_reset+0x66>
  40045e:	2505      	movs	r5, #5
  400460:	e000      	b.n	400464 <bme280_soft_reset+0x30>
  400462:	461d      	mov	r5, r3
  400464:	6963      	ldr	r3, [r4, #20]
  400466:	6861      	ldr	r1, [r4, #4]
  400468:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  40046c:	4798      	blx	r3
  40046e:	4623      	mov	r3, r4
  400470:	2201      	movs	r2, #1
  400472:	f10d 0106 	add.w	r1, sp, #6
  400476:	20f3      	movs	r0, #243	; 0xf3
  400478:	4e0c      	ldr	r6, [pc, #48]	; (4004ac <bme280_soft_reset+0x78>)
  40047a:	47b0      	blx	r6
  40047c:	4602      	mov	r2, r0
  40047e:	b938      	cbnz	r0, 400490 <bme280_soft_reset+0x5c>
  400480:	1e6b      	subs	r3, r5, #1
  400482:	b2db      	uxtb	r3, r3
  400484:	b125      	cbz	r5, 400490 <bme280_soft_reset+0x5c>
  400486:	f89d 1006 	ldrb.w	r1, [sp, #6]
  40048a:	f011 0f01 	tst.w	r1, #1
  40048e:	d1e8      	bne.n	400462 <bme280_soft_reset+0x2e>
  400490:	f89d 3006 	ldrb.w	r3, [sp, #6]
  400494:	f013 0f01 	tst.w	r3, #1
  400498:	d102      	bne.n	4004a0 <bme280_soft_reset+0x6c>
  40049a:	4610      	mov	r0, r2
  40049c:	b002      	add	sp, #8
  40049e:	bd70      	pop	{r4, r5, r6, pc}
  4004a0:	f06f 0205 	mvn.w	r2, #5
  4004a4:	e7f9      	b.n	40049a <bme280_soft_reset+0x66>
  4004a6:	bf00      	nop
  4004a8:	0040039d 	.word	0x0040039d
  4004ac:	004002e9 	.word	0x004002e9

004004b0 <bme280_init>:
  4004b0:	b530      	push	{r4, r5, lr}
  4004b2:	b083      	sub	sp, #12
  4004b4:	4604      	mov	r4, r0
  4004b6:	a902      	add	r1, sp, #8
  4004b8:	2300      	movs	r3, #0
  4004ba:	f801 3d01 	strb.w	r3, [r1, #-1]!
  4004be:	4603      	mov	r3, r0
  4004c0:	2201      	movs	r2, #1
  4004c2:	20d0      	movs	r0, #208	; 0xd0
  4004c4:	4d0c      	ldr	r5, [pc, #48]	; (4004f8 <bme280_init+0x48>)
  4004c6:	47a8      	blx	r5
  4004c8:	4603      	mov	r3, r0
  4004ca:	b948      	cbnz	r0, 4004e0 <bme280_init+0x30>
  4004cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4004d0:	2b60      	cmp	r3, #96	; 0x60
  4004d2:	d10d      	bne.n	4004f0 <bme280_init+0x40>
  4004d4:	7023      	strb	r3, [r4, #0]
  4004d6:	4620      	mov	r0, r4
  4004d8:	4b08      	ldr	r3, [pc, #32]	; (4004fc <bme280_init+0x4c>)
  4004da:	4798      	blx	r3
  4004dc:	4603      	mov	r3, r0
  4004de:	b110      	cbz	r0, 4004e6 <bme280_init+0x36>
  4004e0:	4618      	mov	r0, r3
  4004e2:	b003      	add	sp, #12
  4004e4:	bd30      	pop	{r4, r5, pc}
  4004e6:	4620      	mov	r0, r4
  4004e8:	4b05      	ldr	r3, [pc, #20]	; (400500 <bme280_init+0x50>)
  4004ea:	4798      	blx	r3
  4004ec:	4603      	mov	r3, r0
  4004ee:	e7f7      	b.n	4004e0 <bme280_init+0x30>
  4004f0:	f06f 0303 	mvn.w	r3, #3
  4004f4:	e7f4      	b.n	4004e0 <bme280_init+0x30>
  4004f6:	bf00      	nop
  4004f8:	004002e9 	.word	0x004002e9
  4004fc:	00400435 	.word	0x00400435
  400500:	0040033d 	.word	0x0040033d

00400504 <bin_buffer_enqueue>:
  400504:	b084      	sub	sp, #16
  400506:	b570      	push	{r4, r5, r6, lr}
  400508:	ac04      	add	r4, sp, #16
  40050a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  40050e:	4b11      	ldr	r3, [pc, #68]	; (400554 <bin_buffer_enqueue+0x50>)
  400510:	f893 52fa 	ldrb.w	r5, [r3, #762]	; 0x2fa
  400514:	2d09      	cmp	r5, #9
  400516:	d819      	bhi.n	40054c <bin_buffer_enqueue+0x48>
  400518:	461e      	mov	r6, r3
  40051a:	f893 42f9 	ldrb.w	r4, [r3, #761]	; 0x2f9
  40051e:	204c      	movs	r0, #76	; 0x4c
  400520:	4602      	mov	r2, r0
  400522:	a904      	add	r1, sp, #16
  400524:	fb00 3004 	mla	r0, r0, r4, r3
  400528:	4b0b      	ldr	r3, [pc, #44]	; (400558 <bin_buffer_enqueue+0x54>)
  40052a:	4798      	blx	r3
  40052c:	1c62      	adds	r2, r4, #1
  40052e:	490b      	ldr	r1, [pc, #44]	; (40055c <bin_buffer_enqueue+0x58>)
  400530:	fb81 3102 	smull	r3, r1, r1, r2
  400534:	17d3      	asrs	r3, r2, #31
  400536:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  40053a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40053e:	0059      	lsls	r1, r3, #1
  400540:	1a53      	subs	r3, r2, r1
  400542:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  400546:	3501      	adds	r5, #1
  400548:	f886 52fa 	strb.w	r5, [r6, #762]	; 0x2fa
  40054c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  400550:	b004      	add	sp, #16
  400552:	4770      	bx	lr
  400554:	2040006c 	.word	0x2040006c
  400558:	00401e9d 	.word	0x00401e9d
  40055c:	66666667 	.word	0x66666667

00400560 <bin_buffer_dequeue>:
  400560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400564:	b0a7      	sub	sp, #156	; 0x9c
  400566:	4605      	mov	r5, r0
  400568:	4b1a      	ldr	r3, [pc, #104]	; (4005d4 <bin_buffer_dequeue+0x74>)
  40056a:	f893 42fa 	ldrb.w	r4, [r3, #762]	; 0x2fa
  40056e:	b984      	cbnz	r4, 400592 <bin_buffer_dequeue+0x32>
  400570:	244c      	movs	r4, #76	; 0x4c
  400572:	4622      	mov	r2, r4
  400574:	2100      	movs	r1, #0
  400576:	eb0d 0004 	add.w	r0, sp, r4
  40057a:	4b17      	ldr	r3, [pc, #92]	; (4005d8 <bin_buffer_dequeue+0x78>)
  40057c:	4798      	blx	r3
  40057e:	4622      	mov	r2, r4
  400580:	eb0d 0104 	add.w	r1, sp, r4
  400584:	4628      	mov	r0, r5
  400586:	4b15      	ldr	r3, [pc, #84]	; (4005dc <bin_buffer_dequeue+0x7c>)
  400588:	4798      	blx	r3
  40058a:	4628      	mov	r0, r5
  40058c:	b027      	add	sp, #156	; 0x9c
  40058e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400592:	461e      	mov	r6, r3
  400594:	f893 92f8 	ldrb.w	r9, [r3, #760]	; 0x2f8
  400598:	274c      	movs	r7, #76	; 0x4c
  40059a:	463a      	mov	r2, r7
  40059c:	fb07 3109 	mla	r1, r7, r9, r3
  4005a0:	4668      	mov	r0, sp
  4005a2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4005dc <bin_buffer_dequeue+0x7c>
  4005a6:	47c0      	blx	r8
  4005a8:	f109 0201 	add.w	r2, r9, #1
  4005ac:	490c      	ldr	r1, [pc, #48]	; (4005e0 <bin_buffer_dequeue+0x80>)
  4005ae:	fb81 3102 	smull	r3, r1, r1, r2
  4005b2:	17d3      	asrs	r3, r2, #31
  4005b4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  4005b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4005bc:	0059      	lsls	r1, r3, #1
  4005be:	1a53      	subs	r3, r2, r1
  4005c0:	f886 32f8 	strb.w	r3, [r6, #760]	; 0x2f8
  4005c4:	3c01      	subs	r4, #1
  4005c6:	f886 42fa 	strb.w	r4, [r6, #762]	; 0x2fa
  4005ca:	463a      	mov	r2, r7
  4005cc:	4669      	mov	r1, sp
  4005ce:	4628      	mov	r0, r5
  4005d0:	47c0      	blx	r8
  4005d2:	e7da      	b.n	40058a <bin_buffer_dequeue+0x2a>
  4005d4:	2040006c 	.word	0x2040006c
  4005d8:	00401eb3 	.word	0x00401eb3
  4005dc:	00401e9d 	.word	0x00401e9d
  4005e0:	66666667 	.word	0x66666667

004005e4 <event_buffer_enqueue>:
  4005e4:	b4f0      	push	{r4, r5, r6, r7}
  4005e6:	b084      	sub	sp, #16
  4005e8:	ac04      	add	r4, sp, #16
  4005ea:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  4005ee:	4b12      	ldr	r3, [pc, #72]	; (400638 <event_buffer_enqueue+0x54>)
  4005f0:	f893 639e 	ldrb.w	r6, [r3, #926]	; 0x39e
  4005f4:	2e09      	cmp	r6, #9
  4005f6:	d81b      	bhi.n	400630 <event_buffer_enqueue+0x4c>
  4005f8:	461f      	mov	r7, r3
  4005fa:	f893 439d 	ldrb.w	r4, [r3, #925]	; 0x39d
  4005fe:	eb03 1504 	add.w	r5, r3, r4, lsl #4
  400602:	f505 753f 	add.w	r5, r5, #764	; 0x2fc
  400606:	ab04      	add	r3, sp, #16
  400608:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
  40060c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  400610:	1c62      	adds	r2, r4, #1
  400612:	490a      	ldr	r1, [pc, #40]	; (40063c <event_buffer_enqueue+0x58>)
  400614:	fb81 3102 	smull	r3, r1, r1, r2
  400618:	17d3      	asrs	r3, r2, #31
  40061a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  40061e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400622:	0059      	lsls	r1, r3, #1
  400624:	1a53      	subs	r3, r2, r1
  400626:	f887 339d 	strb.w	r3, [r7, #925]	; 0x39d
  40062a:	3601      	adds	r6, #1
  40062c:	f887 639e 	strb.w	r6, [r7, #926]	; 0x39e
  400630:	b004      	add	sp, #16
  400632:	bcf0      	pop	{r4, r5, r6, r7}
  400634:	4770      	bx	lr
  400636:	bf00      	nop
  400638:	2040006c 	.word	0x2040006c
  40063c:	66666667 	.word	0x66666667

00400640 <event_buffer_dequeue>:
  400640:	b5f0      	push	{r4, r5, r6, r7, lr}
  400642:	b089      	sub	sp, #36	; 0x24
  400644:	4604      	mov	r4, r0
  400646:	4b17      	ldr	r3, [pc, #92]	; (4006a4 <event_buffer_dequeue+0x64>)
  400648:	f893 639e 	ldrb.w	r6, [r3, #926]	; 0x39e
  40064c:	b95e      	cbnz	r6, 400666 <event_buffer_dequeue+0x26>
  40064e:	ab04      	add	r3, sp, #16
  400650:	2200      	movs	r2, #0
  400652:	9204      	str	r2, [sp, #16]
  400654:	9205      	str	r2, [sp, #20]
  400656:	9206      	str	r2, [sp, #24]
  400658:	9207      	str	r2, [sp, #28]
  40065a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40065c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  400660:	4620      	mov	r0, r4
  400662:	b009      	add	sp, #36	; 0x24
  400664:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400666:	469e      	mov	lr, r3
  400668:	f893 739c 	ldrb.w	r7, [r3, #924]	; 0x39c
  40066c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  400670:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
  400674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400676:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  40067a:	1c7a      	adds	r2, r7, #1
  40067c:	490a      	ldr	r1, [pc, #40]	; (4006a8 <event_buffer_dequeue+0x68>)
  40067e:	fb81 3102 	smull	r3, r1, r1, r2
  400682:	17d3      	asrs	r3, r2, #31
  400684:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40068c:	0059      	lsls	r1, r3, #1
  40068e:	1a53      	subs	r3, r2, r1
  400690:	f88e 339c 	strb.w	r3, [lr, #924]	; 0x39c
  400694:	3e01      	subs	r6, #1
  400696:	f88e 639e 	strb.w	r6, [lr, #926]	; 0x39e
  40069a:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
  40069e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4006a2:	e7dd      	b.n	400660 <event_buffer_dequeue+0x20>
  4006a4:	2040006c 	.word	0x2040006c
  4006a8:	66666667 	.word	0x66666667

004006ac <Dummy_Handler>:
  4006ac:	e7fe      	b.n	4006ac <Dummy_Handler>
	...

004006b0 <Reset_Handler>:
  4006b0:	b508      	push	{r3, lr}
  4006b2:	4b10      	ldr	r3, [pc, #64]	; (4006f4 <Reset_Handler+0x44>)
  4006b4:	4a10      	ldr	r2, [pc, #64]	; (4006f8 <Reset_Handler+0x48>)
  4006b6:	429a      	cmp	r2, r3
  4006b8:	d009      	beq.n	4006ce <Reset_Handler+0x1e>
  4006ba:	4b0e      	ldr	r3, [pc, #56]	; (4006f4 <Reset_Handler+0x44>)
  4006bc:	4a0e      	ldr	r2, [pc, #56]	; (4006f8 <Reset_Handler+0x48>)
  4006be:	e003      	b.n	4006c8 <Reset_Handler+0x18>
  4006c0:	6811      	ldr	r1, [r2, #0]
  4006c2:	6019      	str	r1, [r3, #0]
  4006c4:	3304      	adds	r3, #4
  4006c6:	3204      	adds	r2, #4
  4006c8:	490c      	ldr	r1, [pc, #48]	; (4006fc <Reset_Handler+0x4c>)
  4006ca:	428b      	cmp	r3, r1
  4006cc:	d3f8      	bcc.n	4006c0 <Reset_Handler+0x10>
  4006ce:	4b0c      	ldr	r3, [pc, #48]	; (400700 <Reset_Handler+0x50>)
  4006d0:	e002      	b.n	4006d8 <Reset_Handler+0x28>
  4006d2:	2200      	movs	r2, #0
  4006d4:	601a      	str	r2, [r3, #0]
  4006d6:	3304      	adds	r3, #4
  4006d8:	4a0a      	ldr	r2, [pc, #40]	; (400704 <Reset_Handler+0x54>)
  4006da:	4293      	cmp	r3, r2
  4006dc:	d3f9      	bcc.n	4006d2 <Reset_Handler+0x22>
  4006de:	4a0a      	ldr	r2, [pc, #40]	; (400708 <Reset_Handler+0x58>)
  4006e0:	4b0a      	ldr	r3, [pc, #40]	; (40070c <Reset_Handler+0x5c>)
  4006e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4006e6:	6093      	str	r3, [r2, #8]
  4006e8:	4b09      	ldr	r3, [pc, #36]	; (400710 <Reset_Handler+0x60>)
  4006ea:	4798      	blx	r3
  4006ec:	4b09      	ldr	r3, [pc, #36]	; (400714 <Reset_Handler+0x64>)
  4006ee:	4798      	blx	r3
  4006f0:	e7fe      	b.n	4006f0 <Reset_Handler+0x40>
  4006f2:	bf00      	nop
  4006f4:	20400000 	.word	0x20400000
  4006f8:	00402030 	.word	0x00402030
  4006fc:	20400050 	.word	0x20400050
  400700:	20400050 	.word	0x20400050
  400704:	20401604 	.word	0x20401604
  400708:	e000ed00 	.word	0xe000ed00
  40070c:	00400000 	.word	0x00400000
  400710:	00401e55 	.word	0x00401e55
  400714:	00401bfd 	.word	0x00401bfd

00400718 <TIMER_0_init>:
  400718:	b508      	push	{r3, lr}
  40071a:	4b08      	ldr	r3, [pc, #32]	; (40073c <TIMER_0_init+0x24>)
  40071c:	699b      	ldr	r3, [r3, #24]
  40071e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400722:	d103      	bne.n	40072c <TIMER_0_init+0x14>
  400724:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400728:	4b04      	ldr	r3, [pc, #16]	; (40073c <TIMER_0_init+0x24>)
  40072a:	611a      	str	r2, [r3, #16]
  40072c:	4b04      	ldr	r3, [pc, #16]	; (400740 <TIMER_0_init+0x28>)
  40072e:	4798      	blx	r3
  400730:	4602      	mov	r2, r0
  400732:	4904      	ldr	r1, [pc, #16]	; (400744 <TIMER_0_init+0x2c>)
  400734:	4804      	ldr	r0, [pc, #16]	; (400748 <TIMER_0_init+0x30>)
  400736:	4b05      	ldr	r3, [pc, #20]	; (40074c <TIMER_0_init+0x34>)
  400738:	4798      	blx	r3
  40073a:	bd08      	pop	{r3, pc}
  40073c:	400e0600 	.word	0x400e0600
  400740:	004015e9 	.word	0x004015e9
  400744:	4000c000 	.word	0x4000c000
  400748:	20400508 	.word	0x20400508
  40074c:	00400c2d 	.word	0x00400c2d

00400750 <MICRO_Timer_init>:
  400750:	b508      	push	{r3, lr}
  400752:	4b08      	ldr	r3, [pc, #32]	; (400774 <MICRO_Timer_init+0x24>)
  400754:	699b      	ldr	r3, [r3, #24]
  400756:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40075a:	d103      	bne.n	400764 <MICRO_Timer_init+0x14>
  40075c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400760:	4b04      	ldr	r3, [pc, #16]	; (400774 <MICRO_Timer_init+0x24>)
  400762:	611a      	str	r2, [r3, #16]
  400764:	4b04      	ldr	r3, [pc, #16]	; (400778 <MICRO_Timer_init+0x28>)
  400766:	4798      	blx	r3
  400768:	4602      	mov	r2, r0
  40076a:	4904      	ldr	r1, [pc, #16]	; (40077c <MICRO_Timer_init+0x2c>)
  40076c:	4804      	ldr	r0, [pc, #16]	; (400780 <MICRO_Timer_init+0x30>)
  40076e:	4b05      	ldr	r3, [pc, #20]	; (400784 <MICRO_Timer_init+0x34>)
  400770:	4798      	blx	r3
  400772:	bd08      	pop	{r3, pc}
  400774:	400e0600 	.word	0x400e0600
  400778:	004015e9 	.word	0x004015e9
  40077c:	40010000 	.word	0x40010000
  400780:	2040047c 	.word	0x2040047c
  400784:	00400c2d 	.word	0x00400c2d

00400788 <SPI_0_PORT_init>:
  400788:	4b11      	ldr	r3, [pc, #68]	; (4007d0 <SPI_0_PORT_init+0x48>)
  40078a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40078c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400790:	671a      	str	r2, [r3, #112]	; 0x70
  400792:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400794:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400798:	675a      	str	r2, [r3, #116]	; 0x74
  40079a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40079e:	605a      	str	r2, [r3, #4]
  4007a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007a2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4007a6:	671a      	str	r2, [r3, #112]	; 0x70
  4007a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007aa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4007ae:	675a      	str	r2, [r3, #116]	; 0x74
  4007b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007b4:	605a      	str	r2, [r3, #4]
  4007b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4007bc:	671a      	str	r2, [r3, #112]	; 0x70
  4007be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007c0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4007c4:	675a      	str	r2, [r3, #116]	; 0x74
  4007c6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4007ca:	605a      	str	r2, [r3, #4]
  4007cc:	4770      	bx	lr
  4007ce:	bf00      	nop
  4007d0:	400e1400 	.word	0x400e1400

004007d4 <SPI_0_CLOCK_init>:
  4007d4:	4b04      	ldr	r3, [pc, #16]	; (4007e8 <SPI_0_CLOCK_init+0x14>)
  4007d6:	699b      	ldr	r3, [r3, #24]
  4007d8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4007dc:	d103      	bne.n	4007e6 <SPI_0_CLOCK_init+0x12>
  4007de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007e2:	4b01      	ldr	r3, [pc, #4]	; (4007e8 <SPI_0_CLOCK_init+0x14>)
  4007e4:	611a      	str	r2, [r3, #16]
  4007e6:	4770      	bx	lr
  4007e8:	400e0600 	.word	0x400e0600

004007ec <SPI_0_init>:
  4007ec:	b510      	push	{r4, lr}
  4007ee:	4b08      	ldr	r3, [pc, #32]	; (400810 <SPI_0_init+0x24>)
  4007f0:	4798      	blx	r3
  4007f2:	4b08      	ldr	r3, [pc, #32]	; (400814 <SPI_0_init+0x28>)
  4007f4:	4798      	blx	r3
  4007f6:	4c08      	ldr	r4, [pc, #32]	; (400818 <SPI_0_init+0x2c>)
  4007f8:	4601      	mov	r1, r0
  4007fa:	4620      	mov	r0, r4
  4007fc:	4b07      	ldr	r3, [pc, #28]	; (40081c <SPI_0_init+0x30>)
  4007fe:	4798      	blx	r3
  400800:	4907      	ldr	r1, [pc, #28]	; (400820 <SPI_0_init+0x34>)
  400802:	4620      	mov	r0, r4
  400804:	4b07      	ldr	r3, [pc, #28]	; (400824 <SPI_0_init+0x38>)
  400806:	4798      	blx	r3
  400808:	4b07      	ldr	r3, [pc, #28]	; (400828 <SPI_0_init+0x3c>)
  40080a:	4798      	blx	r3
  40080c:	bd10      	pop	{r4, pc}
  40080e:	bf00      	nop
  400810:	004007d5 	.word	0x004007d5
  400814:	0040147d 	.word	0x0040147d
  400818:	204004a0 	.word	0x204004a0
  40081c:	004009f9 	.word	0x004009f9
  400820:	40008000 	.word	0x40008000
  400824:	00400a19 	.word	0x00400a19
  400828:	00400789 	.word	0x00400789

0040082c <RAND_0_CLOCK_init>:
  40082c:	4b05      	ldr	r3, [pc, #20]	; (400844 <RAND_0_CLOCK_init+0x18>)
  40082e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400832:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  400836:	d104      	bne.n	400842 <RAND_0_CLOCK_init+0x16>
  400838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40083c:	4b01      	ldr	r3, [pc, #4]	; (400844 <RAND_0_CLOCK_init+0x18>)
  40083e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400842:	4770      	bx	lr
  400844:	400e0600 	.word	0x400e0600

00400848 <RAND_0_init>:
  400848:	b508      	push	{r3, lr}
  40084a:	4b03      	ldr	r3, [pc, #12]	; (400858 <RAND_0_init+0x10>)
  40084c:	4798      	blx	r3
  40084e:	4903      	ldr	r1, [pc, #12]	; (40085c <RAND_0_init+0x14>)
  400850:	4803      	ldr	r0, [pc, #12]	; (400860 <RAND_0_init+0x18>)
  400852:	4b04      	ldr	r3, [pc, #16]	; (400864 <RAND_0_init+0x1c>)
  400854:	4798      	blx	r3
  400856:	bd08      	pop	{r3, pc}
  400858:	0040082d 	.word	0x0040082d
  40085c:	40070000 	.word	0x40070000
  400860:	20400498 	.word	0x20400498
  400864:	004009cd 	.word	0x004009cd

00400868 <USART_0_CLOCK_init>:
  400868:	4b04      	ldr	r3, [pc, #16]	; (40087c <USART_0_CLOCK_init+0x14>)
  40086a:	699b      	ldr	r3, [r3, #24]
  40086c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400870:	d103      	bne.n	40087a <USART_0_CLOCK_init+0x12>
  400872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400876:	4b01      	ldr	r3, [pc, #4]	; (40087c <USART_0_CLOCK_init+0x14>)
  400878:	611a      	str	r2, [r3, #16]
  40087a:	4770      	bx	lr
  40087c:	400e0600 	.word	0x400e0600

00400880 <USART_0_PORT_init>:
  400880:	4b0f      	ldr	r3, [pc, #60]	; (4008c0 <USART_0_PORT_init+0x40>)
  400882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400884:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400888:	671a      	str	r2, [r3, #112]	; 0x70
  40088a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40088c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400890:	675a      	str	r2, [r3, #116]	; 0x74
  400892:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400896:	605a      	str	r2, [r3, #4]
  400898:	4a0a      	ldr	r2, [pc, #40]	; (4008c4 <USART_0_PORT_init+0x44>)
  40089a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40089e:	f043 0310 	orr.w	r3, r3, #16
  4008a2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  4008a6:	4b08      	ldr	r3, [pc, #32]	; (4008c8 <USART_0_PORT_init+0x48>)
  4008a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008aa:	f042 0210 	orr.w	r2, r2, #16
  4008ae:	671a      	str	r2, [r3, #112]	; 0x70
  4008b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008b2:	f042 0210 	orr.w	r2, r2, #16
  4008b6:	675a      	str	r2, [r3, #116]	; 0x74
  4008b8:	2210      	movs	r2, #16
  4008ba:	605a      	str	r2, [r3, #4]
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	400e0e00 	.word	0x400e0e00
  4008c4:	40088000 	.word	0x40088000
  4008c8:	400e1000 	.word	0x400e1000

004008cc <USART_0_init>:
  4008cc:	b510      	push	{r4, lr}
  4008ce:	b082      	sub	sp, #8
  4008d0:	4b07      	ldr	r3, [pc, #28]	; (4008f0 <USART_0_init+0x24>)
  4008d2:	4798      	blx	r3
  4008d4:	4b07      	ldr	r3, [pc, #28]	; (4008f4 <USART_0_init+0x28>)
  4008d6:	4798      	blx	r3
  4008d8:	4b07      	ldr	r3, [pc, #28]	; (4008f8 <USART_0_init+0x2c>)
  4008da:	4798      	blx	r3
  4008dc:	9000      	str	r0, [sp, #0]
  4008de:	2310      	movs	r3, #16
  4008e0:	4a06      	ldr	r2, [pc, #24]	; (4008fc <USART_0_init+0x30>)
  4008e2:	4907      	ldr	r1, [pc, #28]	; (400900 <USART_0_init+0x34>)
  4008e4:	4807      	ldr	r0, [pc, #28]	; (400904 <USART_0_init+0x38>)
  4008e6:	4c08      	ldr	r4, [pc, #32]	; (400908 <USART_0_init+0x3c>)
  4008e8:	47a0      	blx	r4
  4008ea:	b002      	add	sp, #8
  4008ec:	bd10      	pop	{r4, pc}
  4008ee:	bf00      	nop
  4008f0:	00400869 	.word	0x00400869
  4008f4:	00400881 	.word	0x00400881
  4008f8:	004019e9 	.word	0x004019e9
  4008fc:	2040040c 	.word	0x2040040c
  400900:	40028000 	.word	0x40028000
  400904:	204004b8 	.word	0x204004b8
  400908:	00400edd 	.word	0x00400edd

0040090c <system_init>:
  40090c:	b508      	push	{r3, lr}
  40090e:	4b09      	ldr	r3, [pc, #36]	; (400934 <system_init+0x28>)
  400910:	4798      	blx	r3
  400912:	4a09      	ldr	r2, [pc, #36]	; (400938 <system_init+0x2c>)
  400914:	6853      	ldr	r3, [r2, #4]
  400916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40091a:	6053      	str	r3, [r2, #4]
  40091c:	4b07      	ldr	r3, [pc, #28]	; (40093c <system_init+0x30>)
  40091e:	4798      	blx	r3
  400920:	4b07      	ldr	r3, [pc, #28]	; (400940 <system_init+0x34>)
  400922:	4798      	blx	r3
  400924:	4b07      	ldr	r3, [pc, #28]	; (400944 <system_init+0x38>)
  400926:	4798      	blx	r3
  400928:	4b07      	ldr	r3, [pc, #28]	; (400948 <system_init+0x3c>)
  40092a:	4798      	blx	r3
  40092c:	4b07      	ldr	r3, [pc, #28]	; (40094c <system_init+0x40>)
  40092e:	4798      	blx	r3
  400930:	bd08      	pop	{r3, pc}
  400932:	bf00      	nop
  400934:	0040117d 	.word	0x0040117d
  400938:	400e1850 	.word	0x400e1850
  40093c:	004007ed 	.word	0x004007ed
  400940:	00400719 	.word	0x00400719
  400944:	00400751 	.word	0x00400751
  400948:	00400849 	.word	0x00400849
  40094c:	004008cd 	.word	0x004008cd

00400950 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400950:	f3ef 8310 	mrs	r3, PRIMASK
  400954:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400956:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400958:	f3bf 8f5f 	dmb	sy
  40095c:	4770      	bx	lr

0040095e <atomic_leave_critical>:
  40095e:	f3bf 8f5f 	dmb	sy
  400962:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400964:	f383 8810 	msr	PRIMASK, r3
  400968:	4770      	bx	lr
	...

0040096c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  40096c:	b570      	push	{r4, r5, r6, lr}
  40096e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400970:	4604      	mov	r4, r0
  400972:	460d      	mov	r5, r1
  400974:	2800      	cmp	r0, #0
  400976:	bf18      	it	ne
  400978:	2900      	cmpne	r1, #0
  40097a:	bf14      	ite	ne
  40097c:	2001      	movne	r0, #1
  40097e:	2000      	moveq	r0, #0
  400980:	2234      	movs	r2, #52	; 0x34
  400982:	4904      	ldr	r1, [pc, #16]	; (400994 <io_write+0x28>)
  400984:	4b04      	ldr	r3, [pc, #16]	; (400998 <io_write+0x2c>)
  400986:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400988:	6823      	ldr	r3, [r4, #0]
  40098a:	4632      	mov	r2, r6
  40098c:	4629      	mov	r1, r5
  40098e:	4620      	mov	r0, r4
  400990:	4798      	blx	r3
}
  400992:	bd70      	pop	{r4, r5, r6, pc}
  400994:	00401ec4 	.word	0x00401ec4
  400998:	00401011 	.word	0x00401011

0040099c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40099c:	b570      	push	{r4, r5, r6, lr}
  40099e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4009a0:	4604      	mov	r4, r0
  4009a2:	460d      	mov	r5, r1
  4009a4:	2800      	cmp	r0, #0
  4009a6:	bf18      	it	ne
  4009a8:	2900      	cmpne	r1, #0
  4009aa:	bf14      	ite	ne
  4009ac:	2001      	movne	r0, #1
  4009ae:	2000      	moveq	r0, #0
  4009b0:	223d      	movs	r2, #61	; 0x3d
  4009b2:	4904      	ldr	r1, [pc, #16]	; (4009c4 <io_read+0x28>)
  4009b4:	4b04      	ldr	r3, [pc, #16]	; (4009c8 <io_read+0x2c>)
  4009b6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4009b8:	6863      	ldr	r3, [r4, #4]
  4009ba:	4632      	mov	r2, r6
  4009bc:	4629      	mov	r1, r5
  4009be:	4620      	mov	r0, r4
  4009c0:	4798      	blx	r3
}
  4009c2:	bd70      	pop	{r4, r5, r6, pc}
  4009c4:	00401ec4 	.word	0x00401ec4
  4009c8:	00401011 	.word	0x00401011

004009cc <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
  4009cc:	b538      	push	{r3, r4, r5, lr}
  4009ce:	460d      	mov	r5, r1
	ASSERT(desc);
  4009d0:	4604      	mov	r4, r0
  4009d2:	2229      	movs	r2, #41	; 0x29
  4009d4:	4905      	ldr	r1, [pc, #20]	; (4009ec <rand_sync_init+0x20>)
  4009d6:	3000      	adds	r0, #0
  4009d8:	bf18      	it	ne
  4009da:	2001      	movne	r0, #1
  4009dc:	4b04      	ldr	r3, [pc, #16]	; (4009f0 <rand_sync_init+0x24>)
  4009de:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
  4009e0:	4629      	mov	r1, r5
  4009e2:	4620      	mov	r0, r4
  4009e4:	4b03      	ldr	r3, [pc, #12]	; (4009f4 <rand_sync_init+0x28>)
  4009e6:	4798      	blx	r3
}
  4009e8:	bd38      	pop	{r3, r4, r5, pc}
  4009ea:	bf00      	nop
  4009ec:	00401ed8 	.word	0x00401ed8
  4009f0:	00401011 	.word	0x00401011
  4009f4:	00401615 	.word	0x00401615

004009f8 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  4009f8:	b538      	push	{r3, r4, r5, lr}
  4009fa:	460d      	mov	r5, r1
	ASSERT(spi);
  4009fc:	4604      	mov	r4, r0
  4009fe:	2239      	movs	r2, #57	; 0x39
  400a00:	4903      	ldr	r1, [pc, #12]	; (400a10 <spi_m_sync_set_func_ptr+0x18>)
  400a02:	3000      	adds	r0, #0
  400a04:	bf18      	it	ne
  400a06:	2001      	movne	r0, #1
  400a08:	4b02      	ldr	r3, [pc, #8]	; (400a14 <spi_m_sync_set_func_ptr+0x1c>)
  400a0a:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400a0c:	6025      	str	r5, [r4, #0]
  400a0e:	bd38      	pop	{r3, r4, r5, pc}
  400a10:	00401ef4 	.word	0x00401ef4
  400a14:	00401011 	.word	0x00401011

00400a18 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400a18:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400a1a:	4604      	mov	r4, r0
  400a1c:	460d      	mov	r5, r1
  400a1e:	2800      	cmp	r0, #0
  400a20:	bf18      	it	ne
  400a22:	2900      	cmpne	r1, #0
  400a24:	bf14      	ite	ne
  400a26:	2001      	movne	r0, #1
  400a28:	2000      	moveq	r0, #0
  400a2a:	2240      	movs	r2, #64	; 0x40
  400a2c:	4909      	ldr	r1, [pc, #36]	; (400a54 <spi_m_sync_init+0x3c>)
  400a2e:	4b0a      	ldr	r3, [pc, #40]	; (400a58 <spi_m_sync_init+0x40>)
  400a30:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400a32:	4620      	mov	r0, r4
  400a34:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400a38:	4629      	mov	r1, r5
  400a3a:	4b08      	ldr	r3, [pc, #32]	; (400a5c <spi_m_sync_init+0x44>)
  400a3c:	4798      	blx	r3

	if (rc < 0) {
  400a3e:	2800      	cmp	r0, #0
  400a40:	db07      	blt.n	400a52 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a46:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400a48:	4b05      	ldr	r3, [pc, #20]	; (400a60 <spi_m_sync_init+0x48>)
  400a4a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400a4c:	4b05      	ldr	r3, [pc, #20]	; (400a64 <spi_m_sync_init+0x4c>)
  400a4e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400a50:	2000      	movs	r0, #0
}
  400a52:	bd38      	pop	{r3, r4, r5, pc}
  400a54:	00401ef4 	.word	0x00401ef4
  400a58:	00401011 	.word	0x00401011
  400a5c:	004012a1 	.word	0x004012a1
  400a60:	00400b0d 	.word	0x00400b0d
  400a64:	00400ad1 	.word	0x00400ad1

00400a68 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400a68:	b510      	push	{r4, lr}
	ASSERT(spi);
  400a6a:	4604      	mov	r4, r0
  400a6c:	2257      	movs	r2, #87	; 0x57
  400a6e:	4905      	ldr	r1, [pc, #20]	; (400a84 <spi_m_sync_enable+0x1c>)
  400a70:	3000      	adds	r0, #0
  400a72:	bf18      	it	ne
  400a74:	2001      	movne	r0, #1
  400a76:	4b04      	ldr	r3, [pc, #16]	; (400a88 <spi_m_sync_enable+0x20>)
  400a78:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400a7a:	1d20      	adds	r0, r4, #4
  400a7c:	4b03      	ldr	r3, [pc, #12]	; (400a8c <spi_m_sync_enable+0x24>)
  400a7e:	4798      	blx	r3
  400a80:	bd10      	pop	{r4, pc}
  400a82:	bf00      	nop
  400a84:	00401ef4 	.word	0x00401ef4
  400a88:	00401011 	.word	0x00401011
  400a8c:	00401349 	.word	0x00401349

00400a90 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400a90:	b530      	push	{r4, r5, lr}
  400a92:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400a94:	4605      	mov	r5, r0
  400a96:	460c      	mov	r4, r1
  400a98:	2800      	cmp	r0, #0
  400a9a:	bf18      	it	ne
  400a9c:	2900      	cmpne	r1, #0
  400a9e:	bf14      	ite	ne
  400aa0:	2001      	movne	r0, #1
  400aa2:	2000      	moveq	r0, #0
  400aa4:	22b3      	movs	r2, #179	; 0xb3
  400aa6:	4907      	ldr	r1, [pc, #28]	; (400ac4 <spi_m_sync_transfer+0x34>)
  400aa8:	4b07      	ldr	r3, [pc, #28]	; (400ac8 <spi_m_sync_transfer+0x38>)
  400aaa:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400aac:	6823      	ldr	r3, [r4, #0]
  400aae:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400ab0:	6863      	ldr	r3, [r4, #4]
  400ab2:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400ab4:	68a3      	ldr	r3, [r4, #8]
  400ab6:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400ab8:	a901      	add	r1, sp, #4
  400aba:	1d28      	adds	r0, r5, #4
  400abc:	4b03      	ldr	r3, [pc, #12]	; (400acc <spi_m_sync_transfer+0x3c>)
  400abe:	4798      	blx	r3
}
  400ac0:	b005      	add	sp, #20
  400ac2:	bd30      	pop	{r4, r5, pc}
  400ac4:	00401ef4 	.word	0x00401ef4
  400ac8:	00401011 	.word	0x00401011
  400acc:	0040137d 	.word	0x0040137d

00400ad0 <_spi_m_sync_io_write>:
{
  400ad0:	b570      	push	{r4, r5, r6, lr}
  400ad2:	b084      	sub	sp, #16
  400ad4:	460e      	mov	r6, r1
  400ad6:	4615      	mov	r5, r2
	ASSERT(io);
  400ad8:	4604      	mov	r4, r0
  400ada:	22a3      	movs	r2, #163	; 0xa3
  400adc:	4908      	ldr	r1, [pc, #32]	; (400b00 <_spi_m_sync_io_write+0x30>)
  400ade:	3000      	adds	r0, #0
  400ae0:	bf18      	it	ne
  400ae2:	2001      	movne	r0, #1
  400ae4:	4b07      	ldr	r3, [pc, #28]	; (400b04 <_spi_m_sync_io_write+0x34>)
  400ae6:	4798      	blx	r3
	xfer.rxbuf = 0;
  400ae8:	2300      	movs	r3, #0
  400aea:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400aec:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400aee:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400af0:	a901      	add	r1, sp, #4
  400af2:	f1a4 000c 	sub.w	r0, r4, #12
  400af6:	4b04      	ldr	r3, [pc, #16]	; (400b08 <_spi_m_sync_io_write+0x38>)
  400af8:	4798      	blx	r3
}
  400afa:	b004      	add	sp, #16
  400afc:	bd70      	pop	{r4, r5, r6, pc}
  400afe:	bf00      	nop
  400b00:	00401ef4 	.word	0x00401ef4
  400b04:	00401011 	.word	0x00401011
  400b08:	00400a91 	.word	0x00400a91

00400b0c <_spi_m_sync_io_read>:
{
  400b0c:	b570      	push	{r4, r5, r6, lr}
  400b0e:	b084      	sub	sp, #16
  400b10:	460e      	mov	r6, r1
  400b12:	4615      	mov	r5, r2
	ASSERT(io);
  400b14:	4604      	mov	r4, r0
  400b16:	2287      	movs	r2, #135	; 0x87
  400b18:	4908      	ldr	r1, [pc, #32]	; (400b3c <_spi_m_sync_io_read+0x30>)
  400b1a:	3000      	adds	r0, #0
  400b1c:	bf18      	it	ne
  400b1e:	2001      	movne	r0, #1
  400b20:	4b07      	ldr	r3, [pc, #28]	; (400b40 <_spi_m_sync_io_read+0x34>)
  400b22:	4798      	blx	r3
	xfer.rxbuf = buf;
  400b24:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400b26:	2300      	movs	r3, #0
  400b28:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400b2a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400b2c:	a901      	add	r1, sp, #4
  400b2e:	f1a4 000c 	sub.w	r0, r4, #12
  400b32:	4b04      	ldr	r3, [pc, #16]	; (400b44 <_spi_m_sync_io_read+0x38>)
  400b34:	4798      	blx	r3
}
  400b36:	b004      	add	sp, #16
  400b38:	bd70      	pop	{r4, r5, r6, pc}
  400b3a:	bf00      	nop
  400b3c:	00401ef4 	.word	0x00401ef4
  400b40:	00401011 	.word	0x00401011
  400b44:	00400a91 	.word	0x00400a91

00400b48 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400b48:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400b4a:	4604      	mov	r4, r0
  400b4c:	460d      	mov	r5, r1
  400b4e:	2800      	cmp	r0, #0
  400b50:	bf18      	it	ne
  400b52:	2900      	cmpne	r1, #0
  400b54:	bf14      	ite	ne
  400b56:	2001      	movne	r0, #1
  400b58:	2000      	moveq	r0, #0
  400b5a:	22bd      	movs	r2, #189	; 0xbd
  400b5c:	4903      	ldr	r1, [pc, #12]	; (400b6c <spi_m_sync_get_io_descriptor+0x24>)
  400b5e:	4b04      	ldr	r3, [pc, #16]	; (400b70 <spi_m_sync_get_io_descriptor+0x28>)
  400b60:	4798      	blx	r3
	*io = &spi->io;
  400b62:	340c      	adds	r4, #12
  400b64:	602c      	str	r4, [r5, #0]
	return 0;
}
  400b66:	2000      	movs	r0, #0
  400b68:	bd38      	pop	{r3, r4, r5, pc}
  400b6a:	bf00      	nop
  400b6c:	00401ef4 	.word	0x00401ef4
  400b70:	00401011 	.word	0x00401011

00400b74 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400b76:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400b78:	b117      	cbz	r7, 400b80 <timer_add_timer_task+0xc>
  400b7a:	463c      	mov	r4, r7
  400b7c:	2600      	movs	r6, #0
  400b7e:	e00b      	b.n	400b98 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400b80:	4b0e      	ldr	r3, [pc, #56]	; (400bbc <timer_add_timer_task+0x48>)
  400b82:	4798      	blx	r3
		return;
  400b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400b86:	68a5      	ldr	r5, [r4, #8]
  400b88:	442b      	add	r3, r5
  400b8a:	1a9b      	subs	r3, r3, r2
  400b8c:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400b8e:	688d      	ldr	r5, [r1, #8]
  400b90:	42ab      	cmp	r3, r5
  400b92:	d209      	bcs.n	400ba8 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400b94:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400b96:	6824      	ldr	r4, [r4, #0]
  400b98:	b134      	cbz	r4, 400ba8 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400b9a:	6863      	ldr	r3, [r4, #4]
  400b9c:	4293      	cmp	r3, r2
  400b9e:	d8f2      	bhi.n	400b86 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400ba0:	68a5      	ldr	r5, [r4, #8]
  400ba2:	1a9b      	subs	r3, r3, r2
  400ba4:	442b      	add	r3, r5
  400ba6:	e7f2      	b.n	400b8e <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400ba8:	42bc      	cmp	r4, r7
  400baa:	d003      	beq.n	400bb4 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400bac:	4630      	mov	r0, r6
  400bae:	4b04      	ldr	r3, [pc, #16]	; (400bc0 <timer_add_timer_task+0x4c>)
  400bb0:	4798      	blx	r3
  400bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400bb4:	4b01      	ldr	r3, [pc, #4]	; (400bbc <timer_add_timer_task+0x48>)
  400bb6:	4798      	blx	r3
  400bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bba:	bf00      	nop
  400bbc:	0040102d 	.word	0x0040102d
  400bc0:	00401059 	.word	0x00401059

00400bc4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bc6:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400bc8:	6906      	ldr	r6, [r0, #16]
  400bca:	3601      	adds	r6, #1
  400bcc:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400bce:	7e03      	ldrb	r3, [r0, #24]
  400bd0:	f013 0f01 	tst.w	r3, #1
  400bd4:	d105      	bne.n	400be2 <timer_process_counted+0x1e>
  400bd6:	7e03      	ldrb	r3, [r0, #24]
  400bd8:	f013 0f02 	tst.w	r3, #2
  400bdc:	d101      	bne.n	400be2 <timer_process_counted+0x1e>
  400bde:	4605      	mov	r5, r0
  400be0:	e009      	b.n	400bf6 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400be2:	7e03      	ldrb	r3, [r0, #24]
  400be4:	f043 0302 	orr.w	r3, r3, #2
  400be8:	7603      	strb	r3, [r0, #24]
		return;
  400bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bec:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400bee:	68e3      	ldr	r3, [r4, #12]
  400bf0:	4620      	mov	r0, r4
  400bf2:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400bf4:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400bf6:	b19c      	cbz	r4, 400c20 <timer_process_counted+0x5c>
  400bf8:	6863      	ldr	r3, [r4, #4]
  400bfa:	1af3      	subs	r3, r6, r3
  400bfc:	68a2      	ldr	r2, [r4, #8]
  400bfe:	4293      	cmp	r3, r2
  400c00:	d30e      	bcc.n	400c20 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400c02:	f105 0714 	add.w	r7, r5, #20
  400c06:	4638      	mov	r0, r7
  400c08:	4b06      	ldr	r3, [pc, #24]	; (400c24 <timer_process_counted+0x60>)
  400c0a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400c0c:	7c23      	ldrb	r3, [r4, #16]
  400c0e:	2b01      	cmp	r3, #1
  400c10:	d1ec      	bne.n	400bec <timer_process_counted+0x28>
			tmp->time_label = time;
  400c12:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400c14:	4632      	mov	r2, r6
  400c16:	4621      	mov	r1, r4
  400c18:	4638      	mov	r0, r7
  400c1a:	4b03      	ldr	r3, [pc, #12]	; (400c28 <timer_process_counted+0x64>)
  400c1c:	4798      	blx	r3
  400c1e:	e7e5      	b.n	400bec <timer_process_counted+0x28>
  400c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c22:	bf00      	nop
  400c24:	00401061 	.word	0x00401061
  400c28:	00400b75 	.word	0x00400b75

00400c2c <timer_init>:
{
  400c2c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400c2e:	4604      	mov	r4, r0
  400c30:	460d      	mov	r5, r1
  400c32:	2800      	cmp	r0, #0
  400c34:	bf18      	it	ne
  400c36:	2900      	cmpne	r1, #0
  400c38:	bf14      	ite	ne
  400c3a:	2001      	movne	r0, #1
  400c3c:	2000      	moveq	r0, #0
  400c3e:	223b      	movs	r2, #59	; 0x3b
  400c40:	4905      	ldr	r1, [pc, #20]	; (400c58 <timer_init+0x2c>)
  400c42:	4b06      	ldr	r3, [pc, #24]	; (400c5c <timer_init+0x30>)
  400c44:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400c46:	4629      	mov	r1, r5
  400c48:	4620      	mov	r0, r4
  400c4a:	4b05      	ldr	r3, [pc, #20]	; (400c60 <timer_init+0x34>)
  400c4c:	4798      	blx	r3
	descr->time                           = 0;
  400c4e:	2000      	movs	r0, #0
  400c50:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400c52:	4b04      	ldr	r3, [pc, #16]	; (400c64 <timer_init+0x38>)
  400c54:	6023      	str	r3, [r4, #0]
}
  400c56:	bd38      	pop	{r3, r4, r5, pc}
  400c58:	00401f10 	.word	0x00401f10
  400c5c:	00401011 	.word	0x00401011
  400c60:	004014f9 	.word	0x004014f9
  400c64:	00400bc5 	.word	0x00400bc5

00400c68 <timer_start>:
{
  400c68:	b510      	push	{r4, lr}
	ASSERT(descr);
  400c6a:	4604      	mov	r4, r0
  400c6c:	2253      	movs	r2, #83	; 0x53
  400c6e:	4909      	ldr	r1, [pc, #36]	; (400c94 <timer_start+0x2c>)
  400c70:	3000      	adds	r0, #0
  400c72:	bf18      	it	ne
  400c74:	2001      	movne	r0, #1
  400c76:	4b08      	ldr	r3, [pc, #32]	; (400c98 <timer_start+0x30>)
  400c78:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400c7a:	4620      	mov	r0, r4
  400c7c:	4b07      	ldr	r3, [pc, #28]	; (400c9c <timer_start+0x34>)
  400c7e:	4798      	blx	r3
  400c80:	b920      	cbnz	r0, 400c8c <timer_start+0x24>
	_timer_start(&descr->device);
  400c82:	4620      	mov	r0, r4
  400c84:	4b06      	ldr	r3, [pc, #24]	; (400ca0 <timer_start+0x38>)
  400c86:	4798      	blx	r3
	return ERR_NONE;
  400c88:	2000      	movs	r0, #0
  400c8a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400c8c:	f06f 0010 	mvn.w	r0, #16
}
  400c90:	bd10      	pop	{r4, pc}
  400c92:	bf00      	nop
  400c94:	00401f10 	.word	0x00401f10
  400c98:	00401011 	.word	0x00401011
  400c9c:	004015c5 	.word	0x004015c5
  400ca0:	004015b5 	.word	0x004015b5

00400ca4 <timer_stop>:
{
  400ca4:	b510      	push	{r4, lr}
	ASSERT(descr);
  400ca6:	4604      	mov	r4, r0
  400ca8:	2261      	movs	r2, #97	; 0x61
  400caa:	4909      	ldr	r1, [pc, #36]	; (400cd0 <timer_stop+0x2c>)
  400cac:	3000      	adds	r0, #0
  400cae:	bf18      	it	ne
  400cb0:	2001      	movne	r0, #1
  400cb2:	4b08      	ldr	r3, [pc, #32]	; (400cd4 <timer_stop+0x30>)
  400cb4:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
  400cb6:	4620      	mov	r0, r4
  400cb8:	4b07      	ldr	r3, [pc, #28]	; (400cd8 <timer_stop+0x34>)
  400cba:	4798      	blx	r3
  400cbc:	b120      	cbz	r0, 400cc8 <timer_stop+0x24>
	_timer_stop(&descr->device);
  400cbe:	4620      	mov	r0, r4
  400cc0:	4b06      	ldr	r3, [pc, #24]	; (400cdc <timer_stop+0x38>)
  400cc2:	4798      	blx	r3
	return ERR_NONE;
  400cc4:	2000      	movs	r0, #0
  400cc6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400cc8:	f06f 0010 	mvn.w	r0, #16
}
  400ccc:	bd10      	pop	{r4, pc}
  400cce:	bf00      	nop
  400cd0:	00401f10 	.word	0x00401f10
  400cd4:	00401011 	.word	0x00401011
  400cd8:	004015c5 	.word	0x004015c5
  400cdc:	004015bd 	.word	0x004015bd

00400ce0 <timer_add_task>:
{
  400ce0:	b570      	push	{r4, r5, r6, lr}
  400ce2:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400ce4:	4604      	mov	r4, r0
  400ce6:	460d      	mov	r5, r1
  400ce8:	2800      	cmp	r0, #0
  400cea:	bf18      	it	ne
  400cec:	2900      	cmpne	r1, #0
  400cee:	bf14      	ite	ne
  400cf0:	2001      	movne	r0, #1
  400cf2:	2000      	moveq	r0, #0
  400cf4:	227a      	movs	r2, #122	; 0x7a
  400cf6:	491d      	ldr	r1, [pc, #116]	; (400d6c <timer_add_task+0x8c>)
  400cf8:	4b1d      	ldr	r3, [pc, #116]	; (400d70 <timer_add_task+0x90>)
  400cfa:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  400cfc:	7e23      	ldrb	r3, [r4, #24]
  400cfe:	f043 0301 	orr.w	r3, r3, #1
  400d02:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  400d04:	f104 0614 	add.w	r6, r4, #20
  400d08:	4629      	mov	r1, r5
  400d0a:	4630      	mov	r0, r6
  400d0c:	4b19      	ldr	r3, [pc, #100]	; (400d74 <timer_add_task+0x94>)
  400d0e:	4798      	blx	r3
  400d10:	b988      	cbnz	r0, 400d36 <timer_add_task+0x56>
	task->time_label = descr->time;
  400d12:	6923      	ldr	r3, [r4, #16]
  400d14:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  400d16:	6922      	ldr	r2, [r4, #16]
  400d18:	4629      	mov	r1, r5
  400d1a:	4630      	mov	r0, r6
  400d1c:	4b16      	ldr	r3, [pc, #88]	; (400d78 <timer_add_task+0x98>)
  400d1e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400d20:	7e23      	ldrb	r3, [r4, #24]
  400d22:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400d26:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400d28:	7e23      	ldrb	r3, [r4, #24]
  400d2a:	f013 0f02 	tst.w	r3, #2
  400d2e:	d10e      	bne.n	400d4e <timer_add_task+0x6e>
	return ERR_NONE;
  400d30:	2000      	movs	r0, #0
}
  400d32:	b002      	add	sp, #8
  400d34:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400d36:	7e23      	ldrb	r3, [r4, #24]
  400d38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400d3c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  400d3e:	227f      	movs	r2, #127	; 0x7f
  400d40:	490a      	ldr	r1, [pc, #40]	; (400d6c <timer_add_task+0x8c>)
  400d42:	2000      	movs	r0, #0
  400d44:	4b0a      	ldr	r3, [pc, #40]	; (400d70 <timer_add_task+0x90>)
  400d46:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  400d48:	f06f 0011 	mvn.w	r0, #17
  400d4c:	e7f1      	b.n	400d32 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  400d4e:	a801      	add	r0, sp, #4
  400d50:	4b0a      	ldr	r3, [pc, #40]	; (400d7c <timer_add_task+0x9c>)
  400d52:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400d54:	7e23      	ldrb	r3, [r4, #24]
  400d56:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400d5a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  400d5c:	4620      	mov	r0, r4
  400d5e:	4b08      	ldr	r3, [pc, #32]	; (400d80 <timer_add_task+0xa0>)
  400d60:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  400d62:	a801      	add	r0, sp, #4
  400d64:	4b07      	ldr	r3, [pc, #28]	; (400d84 <timer_add_task+0xa4>)
  400d66:	4798      	blx	r3
	return ERR_NONE;
  400d68:	2000      	movs	r0, #0
  400d6a:	e7e2      	b.n	400d32 <timer_add_task+0x52>
  400d6c:	00401f10 	.word	0x00401f10
  400d70:	00401011 	.word	0x00401011
  400d74:	00401017 	.word	0x00401017
  400d78:	00400b75 	.word	0x00400b75
  400d7c:	00400951 	.word	0x00400951
  400d80:	004015d1 	.word	0x004015d1
  400d84:	0040095f 	.word	0x0040095f

00400d88 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  400d88:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  400d8a:	2300      	movs	r3, #0
  400d8c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
  400d8e:	69c3      	ldr	r3, [r0, #28]
  400d90:	b11b      	cbz	r3, 400d9a <usart_transmission_complete+0x12>
  400d92:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
  400d96:	4610      	mov	r0, r2
  400d98:	4798      	blx	r3
  400d9a:	bd08      	pop	{r3, pc}

00400d9c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  400d9c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  400d9e:	2300      	movs	r3, #0
  400da0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
  400da2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400da4:	b11b      	cbz	r3, 400dae <usart_error+0x12>
  400da6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
  400daa:	4610      	mov	r0, r2
  400dac:	4798      	blx	r3
  400dae:	bd08      	pop	{r3, pc}

00400db0 <usart_fill_rx_buffer>:
{
  400db0:	b538      	push	{r3, r4, r5, lr}
  400db2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  400db4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
  400db8:	302c      	adds	r0, #44	; 0x2c
  400dba:	4b03      	ldr	r3, [pc, #12]	; (400dc8 <usart_fill_rx_buffer+0x18>)
  400dbc:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
  400dbe:	6a23      	ldr	r3, [r4, #32]
  400dc0:	b10b      	cbz	r3, 400dc6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
  400dc2:	4628      	mov	r0, r5
  400dc4:	4798      	blx	r3
  400dc6:	bd38      	pop	{r3, r4, r5, pc}
  400dc8:	004010f9 	.word	0x004010f9

00400dcc <usart_async_write>:
{
  400dcc:	b570      	push	{r4, r5, r6, lr}
  400dce:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
  400dd0:	4604      	mov	r4, r0
  400dd2:	460e      	mov	r6, r1
  400dd4:	2800      	cmp	r0, #0
  400dd6:	bf18      	it	ne
  400dd8:	2900      	cmpne	r1, #0
  400dda:	d002      	beq.n	400de2 <usart_async_write+0x16>
  400ddc:	b9da      	cbnz	r2, 400e16 <usart_async_write+0x4a>
  400dde:	2000      	movs	r0, #0
  400de0:	e000      	b.n	400de4 <usart_async_write+0x18>
  400de2:	2000      	movs	r0, #0
  400de4:	f240 123b 	movw	r2, #315	; 0x13b
  400de8:	490d      	ldr	r1, [pc, #52]	; (400e20 <usart_async_write+0x54>)
  400dea:	4b0e      	ldr	r3, [pc, #56]	; (400e24 <usart_async_write+0x58>)
  400dec:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
  400dee:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  400df2:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  400df6:	429a      	cmp	r2, r3
  400df8:	d10f      	bne.n	400e1a <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
  400dfa:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
  400dfc:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
  400e00:	2300      	movs	r3, #0
  400e02:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  400e06:	2301      	movs	r3, #1
  400e08:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  400e0a:	f104 0008 	add.w	r0, r4, #8
  400e0e:	4b06      	ldr	r3, [pc, #24]	; (400e28 <usart_async_write+0x5c>)
  400e10:	4798      	blx	r3
	return (int32_t)length;
  400e12:	4628      	mov	r0, r5
  400e14:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
  400e16:	2001      	movs	r0, #1
  400e18:	e7e4      	b.n	400de4 <usart_async_write+0x18>
		return ERR_NO_RESOURCE;
  400e1a:	f06f 001b 	mvn.w	r0, #27
}
  400e1e:	bd70      	pop	{r4, r5, r6, pc}
  400e20:	00401f28 	.word	0x00401f28
  400e24:	00401011 	.word	0x00401011
  400e28:	00401915 	.word	0x00401915

00400e2c <usart_process_byte_sent>:
{
  400e2c:	b510      	push	{r4, lr}
  400e2e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
  400e30:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  400e32:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  400e36:	4293      	cmp	r3, r2
  400e38:	d009      	beq.n	400e4e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  400e3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400e3c:	1c59      	adds	r1, r3, #1
  400e3e:	8781      	strh	r1, [r0, #60]	; 0x3c
  400e40:	5cd1      	ldrb	r1, [r2, r3]
  400e42:	4b04      	ldr	r3, [pc, #16]	; (400e54 <usart_process_byte_sent+0x28>)
  400e44:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  400e46:	4620      	mov	r0, r4
  400e48:	4b03      	ldr	r3, [pc, #12]	; (400e58 <usart_process_byte_sent+0x2c>)
  400e4a:	4798      	blx	r3
  400e4c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
  400e4e:	4b03      	ldr	r3, [pc, #12]	; (400e5c <usart_process_byte_sent+0x30>)
  400e50:	4798      	blx	r3
  400e52:	bd10      	pop	{r4, pc}
  400e54:	004018f1 	.word	0x004018f1
  400e58:	00401915 	.word	0x00401915
  400e5c:	00401939 	.word	0x00401939

00400e60 <usart_async_read>:
{
  400e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e64:	b082      	sub	sp, #8
  400e66:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
  400e68:	4605      	mov	r5, r0
  400e6a:	4688      	mov	r8, r1
  400e6c:	2800      	cmp	r0, #0
  400e6e:	bf18      	it	ne
  400e70:	2900      	cmpne	r1, #0
  400e72:	d002      	beq.n	400e7a <usart_async_read+0x1a>
  400e74:	b9a2      	cbnz	r2, 400ea0 <usart_async_read+0x40>
  400e76:	2000      	movs	r0, #0
  400e78:	e000      	b.n	400e7c <usart_async_read+0x1c>
  400e7a:	2000      	movs	r0, #0
  400e7c:	f44f 72ac 	mov.w	r2, #344	; 0x158
  400e80:	4910      	ldr	r1, [pc, #64]	; (400ec4 <usart_async_read+0x64>)
  400e82:	4b11      	ldr	r3, [pc, #68]	; (400ec8 <usart_async_read+0x68>)
  400e84:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
  400e86:	a801      	add	r0, sp, #4
  400e88:	4b10      	ldr	r3, [pc, #64]	; (400ecc <usart_async_read+0x6c>)
  400e8a:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  400e8c:	3534      	adds	r5, #52	; 0x34
  400e8e:	4628      	mov	r0, r5
  400e90:	4b0f      	ldr	r3, [pc, #60]	; (400ed0 <usart_async_read+0x70>)
  400e92:	4798      	blx	r3
  400e94:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
  400e96:	a801      	add	r0, sp, #4
  400e98:	4b0e      	ldr	r3, [pc, #56]	; (400ed4 <usart_async_read+0x74>)
  400e9a:	4798      	blx	r3
	uint16_t                       was_read = 0;
  400e9c:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
  400e9e:	e007      	b.n	400eb0 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
  400ea0:	2001      	movs	r0, #1
  400ea2:	e7eb      	b.n	400e7c <usart_async_read+0x1c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  400ea4:	3401      	adds	r4, #1
  400ea6:	b2a4      	uxth	r4, r4
  400ea8:	4441      	add	r1, r8
  400eaa:	4628      	mov	r0, r5
  400eac:	4b0a      	ldr	r3, [pc, #40]	; (400ed8 <usart_async_read+0x78>)
  400eae:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  400eb0:	4621      	mov	r1, r4
  400eb2:	42a6      	cmp	r6, r4
  400eb4:	d901      	bls.n	400eba <usart_async_read+0x5a>
  400eb6:	42bc      	cmp	r4, r7
  400eb8:	d3f4      	bcc.n	400ea4 <usart_async_read+0x44>
}
  400eba:	4620      	mov	r0, r4
  400ebc:	b002      	add	sp, #8
  400ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ec2:	bf00      	nop
  400ec4:	00401f28 	.word	0x00401f28
  400ec8:	00401011 	.word	0x00401011
  400ecc:	00400951 	.word	0x00400951
  400ed0:	00401139 	.word	0x00401139
  400ed4:	0040095f 	.word	0x0040095f
  400ed8:	004010b5 	.word	0x004010b5

00400edc <usart_async_init>:
{
  400edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ede:	4615      	mov	r5, r2
  400ee0:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  400ee2:	4604      	mov	r4, r0
  400ee4:	460f      	mov	r7, r1
  400ee6:	2800      	cmp	r0, #0
  400ee8:	bf18      	it	ne
  400eea:	2900      	cmpne	r1, #0
  400eec:	d008      	beq.n	400f00 <usart_async_init+0x24>
  400eee:	1c13      	adds	r3, r2, #0
  400ef0:	bf18      	it	ne
  400ef2:	2301      	movne	r3, #1
  400ef4:	b116      	cbz	r6, 400efc <usart_async_init+0x20>
  400ef6:	b10b      	cbz	r3, 400efc <usart_async_init+0x20>
  400ef8:	2001      	movs	r0, #1
  400efa:	e002      	b.n	400f02 <usart_async_init+0x26>
  400efc:	2000      	movs	r0, #0
  400efe:	e000      	b.n	400f02 <usart_async_init+0x26>
  400f00:	2000      	movs	r0, #0
  400f02:	223a      	movs	r2, #58	; 0x3a
  400f04:	4910      	ldr	r1, [pc, #64]	; (400f48 <usart_async_init+0x6c>)
  400f06:	4b11      	ldr	r3, [pc, #68]	; (400f4c <usart_async_init+0x70>)
  400f08:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  400f0a:	4632      	mov	r2, r6
  400f0c:	4629      	mov	r1, r5
  400f0e:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400f12:	4b0f      	ldr	r3, [pc, #60]	; (400f50 <usart_async_init+0x74>)
  400f14:	4798      	blx	r3
  400f16:	b9a0      	cbnz	r0, 400f42 <usart_async_init+0x66>
	init_status = _usart_async_init(&descr->device, hw);
  400f18:	4639      	mov	r1, r7
  400f1a:	f104 0008 	add.w	r0, r4, #8
  400f1e:	4b0d      	ldr	r3, [pc, #52]	; (400f54 <usart_async_init+0x78>)
  400f20:	4798      	blx	r3
	if (init_status) {
  400f22:	4603      	mov	r3, r0
  400f24:	b958      	cbnz	r0, 400f3e <usart_async_init+0x62>
	descr->io.read  = usart_async_read;
  400f26:	4a0c      	ldr	r2, [pc, #48]	; (400f58 <usart_async_init+0x7c>)
  400f28:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
  400f2a:	4a0c      	ldr	r2, [pc, #48]	; (400f5c <usart_async_init+0x80>)
  400f2c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  400f2e:	4a0c      	ldr	r2, [pc, #48]	; (400f60 <usart_async_init+0x84>)
  400f30:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  400f32:	4a0c      	ldr	r2, [pc, #48]	; (400f64 <usart_async_init+0x88>)
  400f34:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  400f36:	4a0c      	ldr	r2, [pc, #48]	; (400f68 <usart_async_init+0x8c>)
  400f38:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  400f3a:	4a0c      	ldr	r2, [pc, #48]	; (400f6c <usart_async_init+0x90>)
  400f3c:	6162      	str	r2, [r4, #20]
}
  400f3e:	4618      	mov	r0, r3
  400f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
  400f42:	f06f 030c 	mvn.w	r3, #12
  400f46:	e7fa      	b.n	400f3e <usart_async_init+0x62>
  400f48:	00401f28 	.word	0x00401f28
  400f4c:	00401011 	.word	0x00401011
  400f50:	00401071 	.word	0x00401071
  400f54:	00401811 	.word	0x00401811
  400f58:	00400e61 	.word	0x00400e61
  400f5c:	00400dcd 	.word	0x00400dcd
  400f60:	00400e2d 	.word	0x00400e2d
  400f64:	00400db1 	.word	0x00400db1
  400f68:	00400d89 	.word	0x00400d89
  400f6c:	00400d9d 	.word	0x00400d9d

00400f70 <usart_async_enable>:
{
  400f70:	b510      	push	{r4, lr}
	ASSERT(descr);
  400f72:	4604      	mov	r4, r0
  400f74:	2261      	movs	r2, #97	; 0x61
  400f76:	4906      	ldr	r1, [pc, #24]	; (400f90 <usart_async_enable+0x20>)
  400f78:	3000      	adds	r0, #0
  400f7a:	bf18      	it	ne
  400f7c:	2001      	movne	r0, #1
  400f7e:	4b05      	ldr	r3, [pc, #20]	; (400f94 <usart_async_enable+0x24>)
  400f80:	4798      	blx	r3
	_usart_async_enable(&descr->device);
  400f82:	f104 0008 	add.w	r0, r4, #8
  400f86:	4b04      	ldr	r3, [pc, #16]	; (400f98 <usart_async_enable+0x28>)
  400f88:	4798      	blx	r3
}
  400f8a:	2000      	movs	r0, #0
  400f8c:	bd10      	pop	{r4, pc}
  400f8e:	bf00      	nop
  400f90:	00401f28 	.word	0x00401f28
  400f94:	00401011 	.word	0x00401011
  400f98:	004018bd 	.word	0x004018bd

00400f9c <usart_async_register_callback>:
{
  400f9c:	b570      	push	{r4, r5, r6, lr}
  400f9e:	460c      	mov	r4, r1
  400fa0:	4616      	mov	r6, r2
	ASSERT(descr);
  400fa2:	4605      	mov	r5, r0
  400fa4:	2283      	movs	r2, #131	; 0x83
  400fa6:	4917      	ldr	r1, [pc, #92]	; (401004 <usart_async_register_callback+0x68>)
  400fa8:	3000      	adds	r0, #0
  400faa:	bf18      	it	ne
  400fac:	2001      	movne	r0, #1
  400fae:	4b16      	ldr	r3, [pc, #88]	; (401008 <usart_async_register_callback+0x6c>)
  400fb0:	4798      	blx	r3
	switch (type) {
  400fb2:	2c01      	cmp	r4, #1
  400fb4:	d010      	beq.n	400fd8 <usart_async_register_callback+0x3c>
  400fb6:	b124      	cbz	r4, 400fc2 <usart_async_register_callback+0x26>
  400fb8:	2c02      	cmp	r4, #2
  400fba:	d018      	beq.n	400fee <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
  400fbc:	f06f 000c 	mvn.w	r0, #12
}
  400fc0:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
  400fc2:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
  400fc4:	1c32      	adds	r2, r6, #0
  400fc6:	bf18      	it	ne
  400fc8:	2201      	movne	r2, #1
  400fca:	2101      	movs	r1, #1
  400fcc:	f105 0008 	add.w	r0, r5, #8
  400fd0:	4b0e      	ldr	r3, [pc, #56]	; (40100c <usart_async_register_callback+0x70>)
  400fd2:	4798      	blx	r3
	return ERR_NONE;
  400fd4:	2000      	movs	r0, #0
		break;
  400fd6:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
  400fd8:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
  400fda:	1c32      	adds	r2, r6, #0
  400fdc:	bf18      	it	ne
  400fde:	2201      	movne	r2, #1
  400fe0:	2102      	movs	r1, #2
  400fe2:	f105 0008 	add.w	r0, r5, #8
  400fe6:	4b09      	ldr	r3, [pc, #36]	; (40100c <usart_async_register_callback+0x70>)
  400fe8:	4798      	blx	r3
	return ERR_NONE;
  400fea:	2000      	movs	r0, #0
		break;
  400fec:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
  400fee:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
  400ff0:	1c32      	adds	r2, r6, #0
  400ff2:	bf18      	it	ne
  400ff4:	2201      	movne	r2, #1
  400ff6:	2103      	movs	r1, #3
  400ff8:	f105 0008 	add.w	r0, r5, #8
  400ffc:	4b03      	ldr	r3, [pc, #12]	; (40100c <usart_async_register_callback+0x70>)
  400ffe:	4798      	blx	r3
	return ERR_NONE;
  401000:	2000      	movs	r0, #0
		break;
  401002:	bd70      	pop	{r4, r5, r6, pc}
  401004:	00401f28 	.word	0x00401f28
  401008:	00401011 	.word	0x00401011
  40100c:	00401961 	.word	0x00401961

00401010 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401010:	b900      	cbnz	r0, 401014 <assert+0x4>
		__asm("BKPT #0");
  401012:	be00      	bkpt	0x0000
  401014:	4770      	bx	lr

00401016 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401016:	6803      	ldr	r3, [r0, #0]
  401018:	b11b      	cbz	r3, 401022 <is_list_element+0xc>
		if (it == element) {
  40101a:	428b      	cmp	r3, r1
  40101c:	d003      	beq.n	401026 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  40101e:	681b      	ldr	r3, [r3, #0]
  401020:	e7fa      	b.n	401018 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401022:	2000      	movs	r0, #0
  401024:	4770      	bx	lr
			return true;
  401026:	2001      	movs	r0, #1
}
  401028:	4770      	bx	lr
	...

0040102c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  40102c:	b538      	push	{r3, r4, r5, lr}
  40102e:	4604      	mov	r4, r0
  401030:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401032:	4b06      	ldr	r3, [pc, #24]	; (40104c <list_insert_as_head+0x20>)
  401034:	4798      	blx	r3
  401036:	f080 0001 	eor.w	r0, r0, #1
  40103a:	2239      	movs	r2, #57	; 0x39
  40103c:	4904      	ldr	r1, [pc, #16]	; (401050 <list_insert_as_head+0x24>)
  40103e:	b2c0      	uxtb	r0, r0
  401040:	4b04      	ldr	r3, [pc, #16]	; (401054 <list_insert_as_head+0x28>)
  401042:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401044:	6823      	ldr	r3, [r4, #0]
  401046:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401048:	6025      	str	r5, [r4, #0]
  40104a:	bd38      	pop	{r3, r4, r5, pc}
  40104c:	00401017 	.word	0x00401017
  401050:	00401f48 	.word	0x00401f48
  401054:	00401011 	.word	0x00401011

00401058 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401058:	6803      	ldr	r3, [r0, #0]
  40105a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  40105c:	6001      	str	r1, [r0, #0]
  40105e:	4770      	bx	lr

00401060 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401060:	6803      	ldr	r3, [r0, #0]
  401062:	b11b      	cbz	r3, 40106c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401064:	681a      	ldr	r2, [r3, #0]
  401066:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401068:	4618      	mov	r0, r3
  40106a:	4770      	bx	lr
	}

	return NULL;
  40106c:	2000      	movs	r0, #0
}
  40106e:	4770      	bx	lr

00401070 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401070:	b570      	push	{r4, r5, r6, lr}
  401072:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401074:	4604      	mov	r4, r0
  401076:	460e      	mov	r6, r1
  401078:	2800      	cmp	r0, #0
  40107a:	bf18      	it	ne
  40107c:	2900      	cmpne	r1, #0
  40107e:	d002      	beq.n	401086 <ringbuffer_init+0x16>
  401080:	b97a      	cbnz	r2, 4010a2 <ringbuffer_init+0x32>
  401082:	2000      	movs	r0, #0
  401084:	e000      	b.n	401088 <ringbuffer_init+0x18>
  401086:	2000      	movs	r0, #0
  401088:	2228      	movs	r2, #40	; 0x28
  40108a:	4908      	ldr	r1, [pc, #32]	; (4010ac <ringbuffer_init+0x3c>)
  40108c:	4b08      	ldr	r3, [pc, #32]	; (4010b0 <ringbuffer_init+0x40>)
  40108e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401090:	1e6b      	subs	r3, r5, #1
  401092:	421d      	tst	r5, r3
  401094:	d107      	bne.n	4010a6 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  401096:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  401098:	2000      	movs	r0, #0
  40109a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  40109c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  40109e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4010a0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4010a2:	2001      	movs	r0, #1
  4010a4:	e7f0      	b.n	401088 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4010a6:	f06f 000c 	mvn.w	r0, #12
}
  4010aa:	bd70      	pop	{r4, r5, r6, pc}
  4010ac:	00401f68 	.word	0x00401f68
  4010b0:	00401011 	.word	0x00401011

004010b4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  4010b4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb && data);
  4010b6:	4604      	mov	r4, r0
  4010b8:	460d      	mov	r5, r1
  4010ba:	2800      	cmp	r0, #0
  4010bc:	bf18      	it	ne
  4010be:	2900      	cmpne	r1, #0
  4010c0:	bf14      	ite	ne
  4010c2:	2001      	movne	r0, #1
  4010c4:	2000      	moveq	r0, #0
  4010c6:	2240      	movs	r2, #64	; 0x40
  4010c8:	4909      	ldr	r1, [pc, #36]	; (4010f0 <ringbuffer_get+0x3c>)
  4010ca:	4b0a      	ldr	r3, [pc, #40]	; (4010f4 <ringbuffer_get+0x40>)
  4010cc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  4010ce:	68e2      	ldr	r2, [r4, #12]
  4010d0:	68a3      	ldr	r3, [r4, #8]
  4010d2:	429a      	cmp	r2, r3
  4010d4:	d009      	beq.n	4010ea <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
  4010d6:	6822      	ldr	r2, [r4, #0]
  4010d8:	6861      	ldr	r1, [r4, #4]
  4010da:	400b      	ands	r3, r1
  4010dc:	5cd3      	ldrb	r3, [r2, r3]
  4010de:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
  4010e0:	68a3      	ldr	r3, [r4, #8]
  4010e2:	3301      	adds	r3, #1
  4010e4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
  4010e6:	2000      	movs	r0, #0
  4010e8:	bd38      	pop	{r3, r4, r5, pc}
	}

	return ERR_NOT_FOUND;
  4010ea:	f06f 0009 	mvn.w	r0, #9
}
  4010ee:	bd38      	pop	{r3, r4, r5, pc}
  4010f0:	00401f68 	.word	0x00401f68
  4010f4:	00401011 	.word	0x00401011

004010f8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4010f8:	b538      	push	{r3, r4, r5, lr}
  4010fa:	460d      	mov	r5, r1
	ASSERT(rb);
  4010fc:	4604      	mov	r4, r0
  4010fe:	2251      	movs	r2, #81	; 0x51
  401100:	490b      	ldr	r1, [pc, #44]	; (401130 <ringbuffer_put+0x38>)
  401102:	3000      	adds	r0, #0
  401104:	bf18      	it	ne
  401106:	2001      	movne	r0, #1
  401108:	4b0a      	ldr	r3, [pc, #40]	; (401134 <ringbuffer_put+0x3c>)
  40110a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  40110c:	6822      	ldr	r2, [r4, #0]
  40110e:	68e3      	ldr	r3, [r4, #12]
  401110:	6861      	ldr	r1, [r4, #4]
  401112:	400b      	ands	r3, r1
  401114:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401116:	68e3      	ldr	r3, [r4, #12]
  401118:	68a2      	ldr	r2, [r4, #8]
  40111a:	1a9a      	subs	r2, r3, r2
  40111c:	6861      	ldr	r1, [r4, #4]
  40111e:	428a      	cmp	r2, r1
  401120:	d901      	bls.n	401126 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401122:	1a59      	subs	r1, r3, r1
  401124:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401126:	3301      	adds	r3, #1
  401128:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  40112a:	2000      	movs	r0, #0
  40112c:	bd38      	pop	{r3, r4, r5, pc}
  40112e:	bf00      	nop
  401130:	00401f68 	.word	0x00401f68
  401134:	00401011 	.word	0x00401011

00401138 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  401138:	b510      	push	{r4, lr}
	ASSERT(rb);
  40113a:	4604      	mov	r4, r0
  40113c:	2267      	movs	r2, #103	; 0x67
  40113e:	4905      	ldr	r1, [pc, #20]	; (401154 <ringbuffer_num+0x1c>)
  401140:	3000      	adds	r0, #0
  401142:	bf18      	it	ne
  401144:	2001      	movne	r0, #1
  401146:	4b04      	ldr	r3, [pc, #16]	; (401158 <ringbuffer_num+0x20>)
  401148:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  40114a:	68e0      	ldr	r0, [r4, #12]
  40114c:	68a3      	ldr	r3, [r4, #8]
}
  40114e:	1ac0      	subs	r0, r0, r3
  401150:	bd10      	pop	{r4, pc}
  401152:	bf00      	nop
  401154:	00401f68 	.word	0x00401f68
  401158:	00401011 	.word	0x00401011

0040115c <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  40115c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40115e:	2b00      	cmp	r3, #0
  401160:	db09      	blt.n	401176 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401162:	095b      	lsrs	r3, r3, #5
  401164:	f000 001f 	and.w	r0, r0, #31
  401168:	2201      	movs	r2, #1
  40116a:	fa02 f000 	lsl.w	r0, r2, r0
  40116e:	3340      	adds	r3, #64	; 0x40
  401170:	4a01      	ldr	r2, [pc, #4]	; (401178 <_irq_set+0x1c>)
  401172:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  401176:	4770      	bx	lr
  401178:	e000e100 	.word	0xe000e100

0040117c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  40117c:	b500      	push	{lr}
  40117e:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401180:	a801      	add	r0, sp, #4
  401182:	4b0e      	ldr	r3, [pc, #56]	; (4011bc <_init_chip+0x40>)
  401184:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401186:	4a0e      	ldr	r2, [pc, #56]	; (4011c0 <_init_chip+0x44>)
  401188:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  40118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401194:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401198:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  40119c:	a801      	add	r0, sp, #4
  40119e:	4b09      	ldr	r3, [pc, #36]	; (4011c4 <_init_chip+0x48>)
  4011a0:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4011a2:	4a09      	ldr	r2, [pc, #36]	; (4011c8 <_init_chip+0x4c>)
  4011a4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4011a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4011aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4011ae:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4011b0:	4b06      	ldr	r3, [pc, #24]	; (4011cc <_init_chip+0x50>)
  4011b2:	4798      	blx	r3
}
  4011b4:	b003      	add	sp, #12
  4011b6:	f85d fb04 	ldr.w	pc, [sp], #4
  4011ba:	bf00      	nop
  4011bc:	00400951 	.word	0x00400951
  4011c0:	e000ed00 	.word	0xe000ed00
  4011c4:	0040095f 	.word	0x0040095f
  4011c8:	400e0c00 	.word	0x400e0c00
  4011cc:	0040126d 	.word	0x0040126d

004011d0 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4011d0:	490e      	ldr	r1, [pc, #56]	; (40120c <_pmc_init_sources+0x3c>)
  4011d2:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4011d4:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4011d8:	4b0d      	ldr	r3, [pc, #52]	; (401210 <_pmc_init_sources+0x40>)
  4011da:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4011dc:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4011de:	4b0b      	ldr	r3, [pc, #44]	; (40120c <_pmc_init_sources+0x3c>)
  4011e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4011e2:	f013 0f01 	tst.w	r3, #1
  4011e6:	d0fa      	beq.n	4011de <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4011e8:	4b08      	ldr	r3, [pc, #32]	; (40120c <_pmc_init_sources+0x3c>)
  4011ea:	6a19      	ldr	r1, [r3, #32]
  4011ec:	4a09      	ldr	r2, [pc, #36]	; (401214 <_pmc_init_sources+0x44>)
  4011ee:	430a      	orrs	r2, r1
  4011f0:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4011f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4011f4:	4a08      	ldr	r2, [pc, #32]	; (401218 <_pmc_init_sources+0x48>)
  4011f6:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4011f8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4011fa:	4a08      	ldr	r2, [pc, #32]	; (40121c <_pmc_init_sources+0x4c>)
  4011fc:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4011fe:	4b03      	ldr	r3, [pc, #12]	; (40120c <_pmc_init_sources+0x3c>)
  401200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401202:	f013 0f02 	tst.w	r3, #2
  401206:	d0fa      	beq.n	4011fe <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401208:	4770      	bx	lr
  40120a:	bf00      	nop
  40120c:	400e0600 	.word	0x400e0600
  401210:	00373e01 	.word	0x00373e01
  401214:	01370000 	.word	0x01370000
  401218:	f800ffff 	.word	0xf800ffff
  40121c:	20183f01 	.word	0x20183f01

00401220 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401220:	4a11      	ldr	r2, [pc, #68]	; (401268 <_pmc_init_master_clock+0x48>)
  401222:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401228:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40122a:	4b0f      	ldr	r3, [pc, #60]	; (401268 <_pmc_init_master_clock+0x48>)
  40122c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40122e:	f013 0f08 	tst.w	r3, #8
  401232:	d0fa      	beq.n	40122a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401234:	4a0c      	ldr	r2, [pc, #48]	; (401268 <_pmc_init_master_clock+0x48>)
  401236:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401240:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401242:	4b09      	ldr	r3, [pc, #36]	; (401268 <_pmc_init_master_clock+0x48>)
  401244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401246:	f013 0f08 	tst.w	r3, #8
  40124a:	d0fa      	beq.n	401242 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40124c:	4a06      	ldr	r2, [pc, #24]	; (401268 <_pmc_init_master_clock+0x48>)
  40124e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401250:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401254:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401258:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40125a:	4b03      	ldr	r3, [pc, #12]	; (401268 <_pmc_init_master_clock+0x48>)
  40125c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40125e:	f013 0f08 	tst.w	r3, #8
  401262:	d0fa      	beq.n	40125a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401264:	4770      	bx	lr
  401266:	bf00      	nop
  401268:	400e0600 	.word	0x400e0600

0040126c <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  40126c:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40126e:	4b02      	ldr	r3, [pc, #8]	; (401278 <_pmc_init+0xc>)
  401270:	4798      	blx	r3
	_pmc_init_master_clock();
  401272:	4b02      	ldr	r3, [pc, #8]	; (40127c <_pmc_init+0x10>)
  401274:	4798      	blx	r3
  401276:	bd08      	pop	{r3, pc}
  401278:	004011d1 	.word	0x004011d1
  40127c:	00401221 	.word	0x00401221

00401280 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  401280:	2301      	movs	r3, #1
  401282:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  401284:	2000      	movs	r0, #0
  401286:	4770      	bx	lr

00401288 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  401288:	4b04      	ldr	r3, [pc, #16]	; (40129c <_spi_get_hardware_index+0x14>)
  40128a:	4403      	add	r3, r0
  40128c:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  401290:	2b05      	cmp	r3, #5
  401292:	d001      	beq.n	401298 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  401294:	2000      	movs	r0, #0
	}
}
  401296:	4770      	bx	lr
		return 1;
  401298:	2001      	movs	r0, #1
  40129a:	4770      	bx	lr
  40129c:	bfff8000 	.word	0xbfff8000

004012a0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  4012a0:	b570      	push	{r4, r5, r6, lr}
  4012a2:	4606      	mov	r6, r0
  4012a4:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4012a6:	4608      	mov	r0, r1
  4012a8:	4b20      	ldr	r3, [pc, #128]	; (40132c <_spi_m_sync_init+0x8c>)
  4012aa:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4012ac:	2300      	movs	r3, #0
  4012ae:	b33b      	cbz	r3, 401300 <_spi_m_sync_init+0x60>
	return NULL;
  4012b0:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  4012b2:	f44f 729a 	mov.w	r2, #308	; 0x134
  4012b6:	491e      	ldr	r1, [pc, #120]	; (401330 <_spi_m_sync_init+0x90>)
  4012b8:	2e00      	cmp	r6, #0
  4012ba:	bf18      	it	ne
  4012bc:	2c00      	cmpne	r4, #0
  4012be:	bf14      	ite	ne
  4012c0:	2001      	movne	r0, #1
  4012c2:	2000      	moveq	r0, #0
  4012c4:	4b1b      	ldr	r3, [pc, #108]	; (401334 <_spi_m_sync_init+0x94>)
  4012c6:	4798      	blx	r3

	if (regs == NULL) {
  4012c8:	b355      	cbz	r5, 401320 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4012ca:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4012cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4012d0:	d129      	bne.n	401326 <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  4012d2:	2380      	movs	r3, #128	; 0x80
  4012d4:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  4012d6:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4012d8:	686a      	ldr	r2, [r5, #4]
  4012da:	4b17      	ldr	r3, [pc, #92]	; (401338 <_spi_m_sync_init+0x98>)
  4012dc:	4013      	ands	r3, r2
  4012de:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4012e0:	68ab      	ldr	r3, [r5, #8]
  4012e2:	4a16      	ldr	r2, [pc, #88]	; (40133c <_spi_m_sync_init+0x9c>)
  4012e4:	401a      	ands	r2, r3
  4012e6:	4b16      	ldr	r3, [pc, #88]	; (401340 <_spi_m_sync_init+0xa0>)
  4012e8:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  4012ea:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4012ec:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  4012ee:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  4012f0:	8a2b      	ldrh	r3, [r5, #16]
  4012f2:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4012f4:	68eb      	ldr	r3, [r5, #12]
  4012f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4012fa:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  4012fc:	2000      	movs	r0, #0
  4012fe:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  401300:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401304:	008a      	lsls	r2, r1, #2
  401306:	490f      	ldr	r1, [pc, #60]	; (401344 <_spi_m_sync_init+0xa4>)
  401308:	5c8a      	ldrb	r2, [r1, r2]
  40130a:	4290      	cmp	r0, r2
  40130c:	d002      	beq.n	401314 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  40130e:	3301      	adds	r3, #1
  401310:	b2db      	uxtb	r3, r3
  401312:	e7cc      	b.n	4012ae <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  401314:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401318:	00ab      	lsls	r3, r5, #2
  40131a:	460d      	mov	r5, r1
  40131c:	441d      	add	r5, r3
  40131e:	e7c8      	b.n	4012b2 <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  401320:	f06f 000c 	mvn.w	r0, #12
  401324:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  401326:	f06f 0010 	mvn.w	r0, #16
}
  40132a:	bd70      	pop	{r4, r5, r6, pc}
  40132c:	00401289 	.word	0x00401289
  401330:	00401fa0 	.word	0x00401fa0
  401334:	00401011 	.word	0x00401011
  401338:	feffff7c 	.word	0xfeffff7c
  40133c:	fff1ff6f 	.word	0xfff1ff6f
  401340:	000e0010 	.word	0x000e0010
  401344:	00401f8c 	.word	0x00401f8c

00401348 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  401348:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  40134a:	4604      	mov	r4, r0
  40134c:	b168      	cbz	r0, 40136a <_spi_m_sync_enable+0x22>
  40134e:	6803      	ldr	r3, [r0, #0]
  401350:	b14b      	cbz	r3, 401366 <_spi_m_sync_enable+0x1e>
  401352:	2001      	movs	r0, #1
  401354:	f44f 72b9 	mov.w	r2, #370	; 0x172
  401358:	4905      	ldr	r1, [pc, #20]	; (401370 <_spi_m_sync_enable+0x28>)
  40135a:	4b06      	ldr	r3, [pc, #24]	; (401374 <_spi_m_sync_enable+0x2c>)
  40135c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  40135e:	6820      	ldr	r0, [r4, #0]
  401360:	4b05      	ldr	r3, [pc, #20]	; (401378 <_spi_m_sync_enable+0x30>)
  401362:	4798      	blx	r3
}
  401364:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  401366:	2000      	movs	r0, #0
  401368:	e7f4      	b.n	401354 <_spi_m_sync_enable+0xc>
  40136a:	2000      	movs	r0, #0
  40136c:	e7f2      	b.n	401354 <_spi_m_sync_enable+0xc>
  40136e:	bf00      	nop
  401370:	00401fa0 	.word	0x00401fa0
  401374:	00401011 	.word	0x00401011
  401378:	00401281 	.word	0x00401281

0040137c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  40137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401380:	b086      	sub	sp, #24
  401382:	4607      	mov	r7, r0
  401384:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  401386:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  401388:	680b      	ldr	r3, [r1, #0]
  40138a:	9301      	str	r3, [sp, #4]
  40138c:	684b      	ldr	r3, [r1, #4]
  40138e:	9302      	str	r3, [sp, #8]
  401390:	2300      	movs	r3, #0
  401392:	9303      	str	r3, [sp, #12]
  401394:	9304      	str	r3, [sp, #16]
  401396:	7903      	ldrb	r3, [r0, #4]
  401398:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  40139c:	1c26      	adds	r6, r4, #0
  40139e:	bf18      	it	ne
  4013a0:	2601      	movne	r6, #1
  4013a2:	f240 2231 	movw	r2, #561	; 0x231
  4013a6:	4933      	ldr	r1, [pc, #204]	; (401474 <_spi_m_sync_trans+0xf8>)
  4013a8:	2800      	cmp	r0, #0
  4013aa:	bf0c      	ite	eq
  4013ac:	2000      	moveq	r0, #0
  4013ae:	f006 0001 	andne.w	r0, r6, #1
  4013b2:	4b31      	ldr	r3, [pc, #196]	; (401478 <_spi_m_sync_trans+0xfc>)
  4013b4:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4013b6:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  4013b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4013bc:	d122      	bne.n	401404 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  4013be:	f06f 0013 	mvn.w	r0, #19
  4013c2:	e053      	b.n	40146c <_spi_m_sync_trans+0xf0>
		return false;
  4013c4:	2300      	movs	r3, #0
  4013c6:	e035      	b.n	401434 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  4013c8:	7850      	ldrb	r0, [r2, #1]
  4013ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  4013ce:	3202      	adds	r2, #2
  4013d0:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  4013d2:	3301      	adds	r3, #1
  4013d4:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  4013d6:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  4013d8:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  4013dc:	f240 2222 	movw	r2, #546	; 0x222
  4013e0:	4924      	ldr	r1, [pc, #144]	; (401474 <_spi_m_sync_trans+0xf8>)
  4013e2:	4630      	mov	r0, r6
  4013e4:	4b24      	ldr	r3, [pc, #144]	; (401478 <_spi_m_sync_trans+0xfc>)
  4013e6:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  4013e8:	f018 0f08 	tst.w	r8, #8
  4013ec:	d038      	beq.n	401460 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  4013ee:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  4013f2:	2800      	cmp	r0, #0
  4013f4:	db36      	blt.n	401464 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  4013f6:	9803      	ldr	r0, [sp, #12]
  4013f8:	68ab      	ldr	r3, [r5, #8]
  4013fa:	4298      	cmp	r0, r3
  4013fc:	d302      	bcc.n	401404 <_spi_m_sync_trans+0x88>
  4013fe:	9a04      	ldr	r2, [sp, #16]
  401400:	4293      	cmp	r3, r2
  401402:	d92f      	bls.n	401464 <_spi_m_sync_trans+0xe8>
  401404:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  401406:	f013 0f01 	tst.w	r3, #1
  40140a:	d0db      	beq.n	4013c4 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  40140c:	68a3      	ldr	r3, [r4, #8]
  40140e:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  401410:	9a02      	ldr	r2, [sp, #8]
  401412:	b15a      	cbz	r2, 40142c <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  401414:	1c51      	adds	r1, r2, #1
  401416:	9102      	str	r1, [sp, #8]
  401418:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  40141a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  40141e:	2a01      	cmp	r2, #1
  401420:	d904      	bls.n	40142c <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  401422:	460a      	mov	r2, r1
  401424:	3101      	adds	r1, #1
  401426:	9102      	str	r1, [sp, #8]
  401428:	0a1b      	lsrs	r3, r3, #8
  40142a:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  40142c:	9b04      	ldr	r3, [sp, #16]
  40142e:	3301      	adds	r3, #1
  401430:	9304      	str	r3, [sp, #16]
	return true;
  401432:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401434:	2b00      	cmp	r3, #0
  401436:	d1cf      	bne.n	4013d8 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401438:	9b03      	ldr	r3, [sp, #12]
  40143a:	9a04      	ldr	r2, [sp, #16]
  40143c:	429a      	cmp	r2, r3
  40143e:	d3cb      	bcc.n	4013d8 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  401440:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  401442:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401444:	f012 0f02 	tst.w	r2, #2
  401448:	d0c6      	beq.n	4013d8 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  40144a:	9a01      	ldr	r2, [sp, #4]
  40144c:	2a00      	cmp	r2, #0
  40144e:	d0c0      	beq.n	4013d2 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  401450:	1c51      	adds	r1, r2, #1
  401452:	9101      	str	r1, [sp, #4]
  401454:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401456:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40145a:	2801      	cmp	r0, #1
  40145c:	d8b4      	bhi.n	4013c8 <_spi_m_sync_trans+0x4c>
  40145e:	e7b8      	b.n	4013d2 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  401460:	2000      	movs	r0, #0
  401462:	e7c6      	b.n	4013f2 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401464:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401466:	f413 7f00 	tst.w	r3, #512	; 0x200
  40146a:	d0fb      	beq.n	401464 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  40146c:	b006      	add	sp, #24
  40146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401472:	bf00      	nop
  401474:	00401fa0 	.word	0x00401fa0
  401478:	00401011 	.word	0x00401011

0040147c <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  40147c:	2000      	movs	r0, #0
  40147e:	4770      	bx	lr

00401480 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401480:	2300      	movs	r3, #0
  401482:	2b01      	cmp	r3, #1
  401484:	d815      	bhi.n	4014b2 <get_cfg+0x32>
{
  401486:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401488:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  40148c:	008a      	lsls	r2, r1, #2
  40148e:	490a      	ldr	r1, [pc, #40]	; (4014b8 <get_cfg+0x38>)
  401490:	588a      	ldr	r2, [r1, r2]
  401492:	4282      	cmp	r2, r0
  401494:	d007      	beq.n	4014a6 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401496:	3301      	adds	r3, #1
  401498:	b2db      	uxtb	r3, r3
  40149a:	2b01      	cmp	r3, #1
  40149c:	d9f4      	bls.n	401488 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  40149e:	2000      	movs	r0, #0
}
  4014a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014a4:	4770      	bx	lr
			return &(_tcs[i]);
  4014a6:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  4014aa:	00a3      	lsls	r3, r4, #2
  4014ac:	4608      	mov	r0, r1
  4014ae:	4418      	add	r0, r3
  4014b0:	e7f6      	b.n	4014a0 <get_cfg+0x20>
	return NULL;
  4014b2:	2000      	movs	r0, #0
  4014b4:	4770      	bx	lr
  4014b6:	bf00      	nop
  4014b8:	20400000 	.word	0x20400000

004014bc <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4014bc:	4b06      	ldr	r3, [pc, #24]	; (4014d8 <_tc_init_irq_param+0x1c>)
  4014be:	4298      	cmp	r0, r3
  4014c0:	d003      	beq.n	4014ca <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC1) {
  4014c2:	4b06      	ldr	r3, [pc, #24]	; (4014dc <_tc_init_irq_param+0x20>)
  4014c4:	4298      	cmp	r0, r3
  4014c6:	d003      	beq.n	4014d0 <_tc_init_irq_param+0x14>
  4014c8:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4014ca:	4b05      	ldr	r3, [pc, #20]	; (4014e0 <_tc_init_irq_param+0x24>)
  4014cc:	6019      	str	r1, [r3, #0]
  4014ce:	e7f8      	b.n	4014c2 <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
  4014d0:	4b03      	ldr	r3, [pc, #12]	; (4014e0 <_tc_init_irq_param+0x24>)
  4014d2:	6059      	str	r1, [r3, #4]
	}
}
  4014d4:	e7f8      	b.n	4014c8 <_tc_init_irq_param+0xc>
  4014d6:	bf00      	nop
  4014d8:	4000c000 	.word	0x4000c000
  4014dc:	40010000 	.word	0x40010000
  4014e0:	2040041c 	.word	0x2040041c

004014e4 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4014e4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4014e6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4014e8:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4014ea:	f013 0f10 	tst.w	r3, #16
  4014ee:	d100      	bne.n	4014f2 <tc_interrupt_handler+0xe>
  4014f0:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4014f2:	6803      	ldr	r3, [r0, #0]
  4014f4:	4798      	blx	r3
	}
}
  4014f6:	e7fb      	b.n	4014f0 <tc_interrupt_handler+0xc>

004014f8 <_timer_init>:
{
  4014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014fa:	4607      	mov	r7, r0
  4014fc:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  4014fe:	4608      	mov	r0, r1
  401500:	4b27      	ldr	r3, [pc, #156]	; (4015a0 <_timer_init+0xa8>)
  401502:	4798      	blx	r3
  401504:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  401506:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  401508:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  40150a:	2296      	movs	r2, #150	; 0x96
  40150c:	4925      	ldr	r1, [pc, #148]	; (4015a4 <_timer_init+0xac>)
  40150e:	2001      	movs	r0, #1
  401510:	4b25      	ldr	r3, [pc, #148]	; (4015a8 <_timer_init+0xb0>)
  401512:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  401514:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401518:	d001      	beq.n	40151e <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  40151a:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40151e:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  401520:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401522:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  401524:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401526:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  401528:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40152a:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  40152c:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  40152e:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401530:	2310      	movs	r3, #16
  401532:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  401534:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  401536:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  40153a:	4639      	mov	r1, r7
  40153c:	4620      	mov	r0, r4
  40153e:	4b1b      	ldr	r3, [pc, #108]	; (4015ac <_timer_init+0xb4>)
  401540:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401542:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401546:	2b00      	cmp	r3, #0
  401548:	db0d      	blt.n	401566 <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40154a:	095a      	lsrs	r2, r3, #5
  40154c:	f003 031f 	and.w	r3, r3, #31
  401550:	2101      	movs	r1, #1
  401552:	fa01 f303 	lsl.w	r3, r1, r3
  401556:	3220      	adds	r2, #32
  401558:	4915      	ldr	r1, [pc, #84]	; (4015b0 <_timer_init+0xb8>)
  40155a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40155e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401562:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401566:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40156a:	2b00      	cmp	r3, #0
  40156c:	db09      	blt.n	401582 <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40156e:	095a      	lsrs	r2, r3, #5
  401570:	f003 031f 	and.w	r3, r3, #31
  401574:	2101      	movs	r1, #1
  401576:	fa01 f303 	lsl.w	r3, r1, r3
  40157a:	3260      	adds	r2, #96	; 0x60
  40157c:	490c      	ldr	r1, [pc, #48]	; (4015b0 <_timer_init+0xb8>)
  40157e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401582:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401586:	2b00      	cmp	r3, #0
  401588:	db08      	blt.n	40159c <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40158a:	0959      	lsrs	r1, r3, #5
  40158c:	f003 031f 	and.w	r3, r3, #31
  401590:	2201      	movs	r2, #1
  401592:	fa02 f303 	lsl.w	r3, r2, r3
  401596:	4a06      	ldr	r2, [pc, #24]	; (4015b0 <_timer_init+0xb8>)
  401598:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  40159c:	2000      	movs	r0, #0
  40159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015a0:	00401481 	.word	0x00401481
  4015a4:	00401fb8 	.word	0x00401fb8
  4015a8:	00401011 	.word	0x00401011
  4015ac:	004014bd 	.word	0x004014bd
  4015b0:	e000e100 	.word	0xe000e100

004015b4 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4015b4:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4015b6:	2205      	movs	r2, #5
  4015b8:	601a      	str	r2, [r3, #0]
  4015ba:	4770      	bx	lr

004015bc <_timer_stop>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKDIS);
  4015bc:	68c3      	ldr	r3, [r0, #12]
  4015be:	2202      	movs	r2, #2
  4015c0:	601a      	str	r2, [r3, #0]
  4015c2:	4770      	bx	lr

004015c4 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  4015c4:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4015c6:	6a18      	ldr	r0, [r3, #32]
}
  4015c8:	f3c0 4000 	ubfx	r0, r0, #16, #1
  4015cc:	4770      	bx	lr
	...

004015d0 <_timer_set_irq>:
{
  4015d0:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  4015d2:	68c0      	ldr	r0, [r0, #12]
  4015d4:	4b02      	ldr	r3, [pc, #8]	; (4015e0 <_timer_set_irq+0x10>)
  4015d6:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  4015d8:	7900      	ldrb	r0, [r0, #4]
  4015da:	4b02      	ldr	r3, [pc, #8]	; (4015e4 <_timer_set_irq+0x14>)
  4015dc:	4798      	blx	r3
  4015de:	bd08      	pop	{r3, pc}
  4015e0:	00401481 	.word	0x00401481
  4015e4:	0040115d 	.word	0x0040115d

004015e8 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4015e8:	2000      	movs	r0, #0
  4015ea:	4770      	bx	lr

004015ec <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4015ec:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4015ee:	4b02      	ldr	r3, [pc, #8]	; (4015f8 <TC0_Handler+0xc>)
  4015f0:	6818      	ldr	r0, [r3, #0]
  4015f2:	4b02      	ldr	r3, [pc, #8]	; (4015fc <TC0_Handler+0x10>)
  4015f4:	4798      	blx	r3
  4015f6:	bd08      	pop	{r3, pc}
  4015f8:	2040041c 	.word	0x2040041c
  4015fc:	004014e5 	.word	0x004014e5

00401600 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
  401600:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
  401602:	4b02      	ldr	r3, [pc, #8]	; (40160c <TC3_Handler+0xc>)
  401604:	6858      	ldr	r0, [r3, #4]
  401606:	4b02      	ldr	r3, [pc, #8]	; (401610 <TC3_Handler+0x10>)
  401608:	4798      	blx	r3
  40160a:	bd08      	pop	{r3, pc}
  40160c:	2040041c 	.word	0x2040041c
  401610:	004014e5 	.word	0x004014e5

00401614 <_rand_sync_init>:
#include <err_codes.h>
#include <hpl_rand_sync.h>
#include <utils_assert.h>

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
  401614:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  401616:	4604      	mov	r4, r0
  401618:	460d      	mov	r5, r1
  40161a:	2800      	cmp	r0, #0
  40161c:	bf18      	it	ne
  40161e:	2900      	cmpne	r1, #0
  401620:	bf14      	ite	ne
  401622:	2001      	movne	r0, #1
  401624:	2000      	moveq	r0, #0
  401626:	2228      	movs	r2, #40	; 0x28
  401628:	4903      	ldr	r1, [pc, #12]	; (401638 <_rand_sync_init+0x24>)
  40162a:	4b04      	ldr	r3, [pc, #16]	; (40163c <_rand_sync_init+0x28>)
  40162c:	4798      	blx	r3

	dev->prvt   = hw;
  40162e:	6025      	str	r5, [r4, #0]
	dev->n_bits = 32;
  401630:	2320      	movs	r3, #32
  401632:	7123      	strb	r3, [r4, #4]

	return ERR_NONE;
}
  401634:	2000      	movs	r0, #0
  401636:	bd38      	pop	{r3, r4, r5, pc}
  401638:	00401fcc 	.word	0x00401fcc
  40163c:	00401011 	.word	0x00401011

00401640 <_usart_init_irq_param>:
/**
 * \brief Init irq param with the given usart hardware instance
 */
static void _usart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
	if (hw == USART1) {
  401640:	4b03      	ldr	r3, [pc, #12]	; (401650 <_usart_init_irq_param+0x10>)
  401642:	4298      	cmp	r0, r3
  401644:	d000      	beq.n	401648 <_usart_init_irq_param+0x8>
  401646:	4770      	bx	lr
		_usart1_dev = dev;
  401648:	4b02      	ldr	r3, [pc, #8]	; (401654 <_usart_init_irq_param+0x14>)
  40164a:	6019      	str	r1, [r3, #0]
	}
}
  40164c:	e7fb      	b.n	401646 <_usart_init_irq_param+0x6>
  40164e:	bf00      	nop
  401650:	40028000 	.word	0x40028000
  401654:	20400424 	.word	0x20400424

00401658 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401658:	b510      	push	{r4, lr}
	ASSERT(hw);
  40165a:	4604      	mov	r4, r0
  40165c:	f240 222f 	movw	r2, #559	; 0x22f
  401660:	4905      	ldr	r1, [pc, #20]	; (401678 <_usart_get_hardware_index+0x20>)
  401662:	3000      	adds	r0, #0
  401664:	bf18      	it	ne
  401666:	2001      	movne	r0, #1
  401668:	4b04      	ldr	r3, [pc, #16]	; (40167c <_usart_get_hardware_index+0x24>)
  40166a:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  40166c:	4804      	ldr	r0, [pc, #16]	; (401680 <_usart_get_hardware_index+0x28>)
  40166e:	4420      	add	r0, r4
}
  401670:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401674:	bd10      	pop	{r4, pc}
  401676:	bf00      	nop
  401678:	00401ff0 	.word	0x00401ff0
  40167c:	00401011 	.word	0x00401011
  401680:	bffdc000 	.word	0xbffdc000

00401684 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401684:	b510      	push	{r4, lr}
	ASSERT(hw);
  401686:	4604      	mov	r4, r0
  401688:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  40168c:	490e      	ldr	r1, [pc, #56]	; (4016c8 <_get_usart_index+0x44>)
  40168e:	3000      	adds	r0, #0
  401690:	bf18      	it	ne
  401692:	2001      	movne	r0, #1
  401694:	4b0d      	ldr	r3, [pc, #52]	; (4016cc <_get_usart_index+0x48>)
  401696:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401698:	4620      	mov	r0, r4
  40169a:	4b0d      	ldr	r3, [pc, #52]	; (4016d0 <_get_usart_index+0x4c>)
  40169c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40169e:	2300      	movs	r3, #0
  4016a0:	b143      	cbz	r3, 4016b4 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4016a2:	f240 22be 	movw	r2, #702	; 0x2be
  4016a6:	4908      	ldr	r1, [pc, #32]	; (4016c8 <_get_usart_index+0x44>)
  4016a8:	2000      	movs	r0, #0
  4016aa:	4b08      	ldr	r3, [pc, #32]	; (4016cc <_get_usart_index+0x48>)
  4016ac:	4798      	blx	r3
	return 0;
  4016ae:	2300      	movs	r3, #0
}
  4016b0:	4618      	mov	r0, r3
  4016b2:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4016b4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4016b8:	008a      	lsls	r2, r1, #2
  4016ba:	4906      	ldr	r1, [pc, #24]	; (4016d4 <_get_usart_index+0x50>)
  4016bc:	5c8a      	ldrb	r2, [r1, r2]
  4016be:	4290      	cmp	r0, r2
  4016c0:	d0f6      	beq.n	4016b0 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4016c2:	3301      	adds	r3, #1
  4016c4:	b2db      	uxtb	r3, r3
  4016c6:	e7eb      	b.n	4016a0 <_get_usart_index+0x1c>
  4016c8:	00401ff0 	.word	0x00401ff0
  4016cc:	00401011 	.word	0x00401011
  4016d0:	00401659 	.word	0x00401659
  4016d4:	00401fe4 	.word	0x00401fe4

004016d8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  4016d8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4016da:	4604      	mov	r4, r0
  4016dc:	f240 22cb 	movw	r2, #715	; 0x2cb
  4016e0:	4911      	ldr	r1, [pc, #68]	; (401728 <_usart_init+0x50>)
  4016e2:	3000      	adds	r0, #0
  4016e4:	bf18      	it	ne
  4016e6:	2001      	movne	r0, #1
  4016e8:	4b10      	ldr	r3, [pc, #64]	; (40172c <_usart_init+0x54>)
  4016ea:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  4016ec:	4620      	mov	r0, r4
  4016ee:	4b10      	ldr	r3, [pc, #64]	; (401730 <_usart_init+0x58>)
  4016f0:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  4016f2:	4b10      	ldr	r3, [pc, #64]	; (401734 <_usart_init+0x5c>)
  4016f4:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  4016f8:	2300      	movs	r3, #0
  4016fa:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  4016fc:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  4016fe:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401700:	22ac      	movs	r2, #172	; 0xac
  401702:	6022      	str	r2, [r4, #0]
  401704:	f44f 7280 	mov.w	r2, #256	; 0x100
  401708:	6022      	str	r2, [r4, #0]
  40170a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40170e:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401714:	0081      	lsls	r1, r0, #2
  401716:	4a08      	ldr	r2, [pc, #32]	; (401738 <_usart_init+0x60>)
  401718:	440a      	add	r2, r1
  40171a:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  40171c:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40171e:	4a07      	ldr	r2, [pc, #28]	; (40173c <_usart_init+0x64>)
  401720:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  401722:	4618      	mov	r0, r3
  401724:	bd10      	pop	{r4, pc}
  401726:	bf00      	nop
  401728:	00401ff0 	.word	0x00401ff0
  40172c:	00401011 	.word	0x00401011
  401730:	00401685 	.word	0x00401685
  401734:	55534100 	.word	0x55534100
  401738:	00401fe4 	.word	0x00401fe4
  40173c:	00030051 	.word	0x00030051

00401740 <_usart_get_irq_num>:
{
  401740:	b510      	push	{r4, lr}
	ASSERT(hw);
  401742:	4604      	mov	r4, r0
  401744:	22ae      	movs	r2, #174	; 0xae
  401746:	4906      	ldr	r1, [pc, #24]	; (401760 <_usart_get_irq_num+0x20>)
  401748:	3000      	adds	r0, #0
  40174a:	bf18      	it	ne
  40174c:	2001      	movne	r0, #1
  40174e:	4b05      	ldr	r3, [pc, #20]	; (401764 <_usart_get_irq_num+0x24>)
  401750:	4798      	blx	r3
	return USART0_IRQn + _usart_get_hardware_index(hw);
  401752:	4620      	mov	r0, r4
  401754:	4b04      	ldr	r3, [pc, #16]	; (401768 <_usart_get_irq_num+0x28>)
  401756:	4798      	blx	r3
  401758:	300d      	adds	r0, #13
}
  40175a:	b2c0      	uxtb	r0, r0
  40175c:	bd10      	pop	{r4, pc}
  40175e:	bf00      	nop
  401760:	00401ff0 	.word	0x00401ff0
  401764:	00401011 	.word	0x00401011
  401768:	00401659 	.word	0x00401659

0040176c <_usart_interrupt_handler>:
{
  40176c:	b510      	push	{r4, lr}
	ASSERT(device);
  40176e:	4604      	mov	r4, r0
  401770:	f240 2289 	movw	r2, #649	; 0x289
  401774:	4923      	ldr	r1, [pc, #140]	; (401804 <_usart_interrupt_handler+0x98>)
  401776:	3000      	adds	r0, #0
  401778:	bf18      	it	ne
  40177a:	2001      	movne	r0, #1
  40177c:	4b22      	ldr	r3, [pc, #136]	; (401808 <_usart_interrupt_handler+0x9c>)
  40177e:	4798      	blx	r3
	void *hw = device->hw;
  401780:	69a3      	ldr	r3, [r4, #24]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401782:	695a      	ldr	r2, [r3, #20]
	if (hri_usart_get_US_CSR_TXRDY_bit(hw) && hri_usart_get_US_IMR_TXRDY_bit(hw)) {
  401784:	f012 0f02 	tst.w	r2, #2
  401788:	d003      	beq.n	401792 <_usart_interrupt_handler+0x26>
	return (((Usart *)hw)->US_IMR & US_IMR_TXRDY) >> US_IMR_TXRDY_Pos;
  40178a:	691a      	ldr	r2, [r3, #16]
  40178c:	f012 0f02 	tst.w	r2, #2
  401790:	d118      	bne.n	4017c4 <_usart_interrupt_handler+0x58>
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  401792:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_TXEMPTY_bit(hw) && hri_usart_get_US_IMR_TXEMPTY_bit(hw)) {
  401794:	f412 7f00 	tst.w	r2, #512	; 0x200
  401798:	d003      	beq.n	4017a2 <_usart_interrupt_handler+0x36>
	return (((Usart *)hw)->US_IMR & US_IMR_TXEMPTY) >> US_IMR_TXEMPTY_Pos;
  40179a:	691a      	ldr	r2, [r3, #16]
  40179c:	f412 7f00 	tst.w	r2, #512	; 0x200
  4017a0:	d116      	bne.n	4017d0 <_usart_interrupt_handler+0x64>
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4017a2:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_RXRDY_bit(hw) && hri_usart_get_US_IMR_RXRDY_bit(hw)) {
  4017a4:	f012 0f01 	tst.w	r2, #1
  4017a8:	d01f      	beq.n	4017ea <_usart_interrupt_handler+0x7e>
	return (((Usart *)hw)->US_IMR & US_IMR_RXRDY) >> US_IMR_RXRDY_Pos;
  4017aa:	691a      	ldr	r2, [r3, #16]
  4017ac:	f012 0f01 	tst.w	r2, #1
  4017b0:	d01b      	beq.n	4017ea <_usart_interrupt_handler+0x7e>
	return ((Usart *)hw)->US_CSR;
  4017b2:	6959      	ldr	r1, [r3, #20]
		if (hri_usart_read_US_CSR_reg(hw) &
  4017b4:	4a15      	ldr	r2, [pc, #84]	; (40180c <_usart_interrupt_handler+0xa0>)
  4017b6:	4211      	tst	r1, r2
  4017b8:	d011      	beq.n	4017de <_usart_interrupt_handler+0x72>
	return ((Usart *)hw)->US_RHR;
  4017ba:	699a      	ldr	r2, [r3, #24]
	((Usart *)hw)->US_CR = data;
  4017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4017c0:	601a      	str	r2, [r3, #0]
  4017c2:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  4017c4:	2202      	movs	r2, #2
  4017c6:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
  4017c8:	6823      	ldr	r3, [r4, #0]
  4017ca:	4620      	mov	r0, r4
  4017cc:	4798      	blx	r3
  4017ce:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  4017d0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4017d4:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
  4017d6:	68a3      	ldr	r3, [r4, #8]
  4017d8:	4620      	mov	r0, r4
  4017da:	4798      	blx	r3
  4017dc:	bd10      	pop	{r4, pc}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_usart_read_US_RHR_reg(hw));
  4017de:	6862      	ldr	r2, [r4, #4]
	return ((Usart *)hw)->US_RHR;
  4017e0:	6999      	ldr	r1, [r3, #24]
  4017e2:	b2c9      	uxtb	r1, r1
  4017e4:	4620      	mov	r0, r4
  4017e6:	4790      	blx	r2
  4017e8:	bd10      	pop	{r4, pc}
	return ((Usart *)hw)->US_CSR;
  4017ea:	6959      	ldr	r1, [r3, #20]
	} else if (hri_usart_read_US_CSR_reg(hw) &
  4017ec:	4a07      	ldr	r2, [pc, #28]	; (40180c <_usart_interrupt_handler+0xa0>)
  4017ee:	4211      	tst	r1, r2
  4017f0:	d100      	bne.n	4017f4 <_usart_interrupt_handler+0x88>
  4017f2:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_CR = data;
  4017f4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4017f8:	601a      	str	r2, [r3, #0]
		device->usart_cb.error_cb(device);
  4017fa:	68e3      	ldr	r3, [r4, #12]
  4017fc:	4620      	mov	r0, r4
  4017fe:	4798      	blx	r3
  401800:	e7f7      	b.n	4017f2 <_usart_interrupt_handler+0x86>
  401802:	bf00      	nop
  401804:	00401ff0 	.word	0x00401ff0
  401808:	00401011 	.word	0x00401011
  40180c:	010000e0 	.word	0x010000e0

00401810 <_usart_async_init>:
{
  401810:	b570      	push	{r4, r5, r6, lr}
  401812:	460c      	mov	r4, r1
	ASSERT(device);
  401814:	4606      	mov	r6, r0
  401816:	22d1      	movs	r2, #209	; 0xd1
  401818:	4922      	ldr	r1, [pc, #136]	; (4018a4 <_usart_async_init+0x94>)
  40181a:	3000      	adds	r0, #0
  40181c:	bf18      	it	ne
  40181e:	2001      	movne	r0, #1
  401820:	4b21      	ldr	r3, [pc, #132]	; (4018a8 <_usart_async_init+0x98>)
  401822:	4798      	blx	r3
	init_status = _usart_init(hw);
  401824:	4620      	mov	r0, r4
  401826:	4b21      	ldr	r3, [pc, #132]	; (4018ac <_usart_async_init+0x9c>)
  401828:	4798      	blx	r3
	if (init_status) {
  40182a:	4605      	mov	r5, r0
  40182c:	b108      	cbz	r0, 401832 <_usart_async_init+0x22>
}
  40182e:	4628      	mov	r0, r5
  401830:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401832:	61b4      	str	r4, [r6, #24]
	_usart_init_irq_param(hw, device);
  401834:	4631      	mov	r1, r6
  401836:	4620      	mov	r0, r4
  401838:	4b1d      	ldr	r3, [pc, #116]	; (4018b0 <_usart_async_init+0xa0>)
  40183a:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  40183c:	4620      	mov	r0, r4
  40183e:	4b1d      	ldr	r3, [pc, #116]	; (4018b4 <_usart_async_init+0xa4>)
  401840:	4798      	blx	r3
  401842:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401844:	2b00      	cmp	r3, #0
  401846:	db0d      	blt.n	401864 <_usart_async_init+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401848:	095b      	lsrs	r3, r3, #5
  40184a:	f000 001f 	and.w	r0, r0, #31
  40184e:	2201      	movs	r2, #1
  401850:	fa02 f000 	lsl.w	r0, r2, r0
  401854:	3320      	adds	r3, #32
  401856:	4a18      	ldr	r2, [pc, #96]	; (4018b8 <_usart_async_init+0xa8>)
  401858:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40185c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401860:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401864:	4620      	mov	r0, r4
  401866:	4b13      	ldr	r3, [pc, #76]	; (4018b4 <_usart_async_init+0xa4>)
  401868:	4798      	blx	r3
  40186a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  40186c:	2b00      	cmp	r3, #0
  40186e:	db09      	blt.n	401884 <_usart_async_init+0x74>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401870:	095b      	lsrs	r3, r3, #5
  401872:	f000 001f 	and.w	r0, r0, #31
  401876:	2201      	movs	r2, #1
  401878:	fa02 f000 	lsl.w	r0, r2, r0
  40187c:	3360      	adds	r3, #96	; 0x60
  40187e:	4a0e      	ldr	r2, [pc, #56]	; (4018b8 <_usart_async_init+0xa8>)
  401880:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401884:	4620      	mov	r0, r4
  401886:	4b0b      	ldr	r3, [pc, #44]	; (4018b4 <_usart_async_init+0xa4>)
  401888:	4798      	blx	r3
  40188a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  40188c:	2b00      	cmp	r3, #0
  40188e:	dbce      	blt.n	40182e <_usart_async_init+0x1e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401890:	095b      	lsrs	r3, r3, #5
  401892:	f000 001f 	and.w	r0, r0, #31
  401896:	2201      	movs	r2, #1
  401898:	fa02 f000 	lsl.w	r0, r2, r0
  40189c:	4a06      	ldr	r2, [pc, #24]	; (4018b8 <_usart_async_init+0xa8>)
  40189e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  4018a2:	e7c4      	b.n	40182e <_usart_async_init+0x1e>
  4018a4:	00401ff0 	.word	0x00401ff0
  4018a8:	00401011 	.word	0x00401011
  4018ac:	004016d9 	.word	0x004016d9
  4018b0:	00401641 	.word	0x00401641
  4018b4:	00401741 	.word	0x00401741
  4018b8:	e000e100 	.word	0xe000e100

004018bc <_usart_async_enable>:
{
  4018bc:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4018be:	4e0a      	ldr	r6, [pc, #40]	; (4018e8 <_usart_async_enable+0x2c>)
  4018c0:	4604      	mov	r4, r0
  4018c2:	f240 1213 	movw	r2, #275	; 0x113
  4018c6:	4631      	mov	r1, r6
  4018c8:	3000      	adds	r0, #0
  4018ca:	bf18      	it	ne
  4018cc:	2001      	movne	r0, #1
  4018ce:	4d07      	ldr	r5, [pc, #28]	; (4018ec <_usart_async_enable+0x30>)
  4018d0:	47a8      	blx	r5
	_usart_enable(device->hw);
  4018d2:	69a4      	ldr	r4, [r4, #24]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4018d4:	f44f 723d 	mov.w	r2, #756	; 0x2f4
  4018d8:	4631      	mov	r1, r6
  4018da:	1c20      	adds	r0, r4, #0
  4018dc:	bf18      	it	ne
  4018de:	2001      	movne	r0, #1
  4018e0:	47a8      	blx	r5
  4018e2:	2350      	movs	r3, #80	; 0x50
  4018e4:	6023      	str	r3, [r4, #0]
  4018e6:	bd70      	pop	{r4, r5, r6, pc}
  4018e8:	00401ff0 	.word	0x00401ff0
  4018ec:	00401011 	.word	0x00401011

004018f0 <_usart_async_write_byte>:
{
  4018f0:	b538      	push	{r3, r4, r5, lr}
  4018f2:	460c      	mov	r4, r1
	ASSERT(device);
  4018f4:	4605      	mov	r5, r0
  4018f6:	f240 12b5 	movw	r2, #437	; 0x1b5
  4018fa:	4904      	ldr	r1, [pc, #16]	; (40190c <_usart_async_write_byte+0x1c>)
  4018fc:	3000      	adds	r0, #0
  4018fe:	bf18      	it	ne
  401900:	2001      	movne	r0, #1
  401902:	4b03      	ldr	r3, [pc, #12]	; (401910 <_usart_async_write_byte+0x20>)
  401904:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401906:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401908:	61dc      	str	r4, [r3, #28]
  40190a:	bd38      	pop	{r3, r4, r5, pc}
  40190c:	00401ff0 	.word	0x00401ff0
  401910:	00401011 	.word	0x00401011

00401914 <_usart_async_enable_byte_sent_irq>:
{
  401914:	b510      	push	{r4, lr}
	ASSERT(device);
  401916:	4604      	mov	r4, r0
  401918:	f240 221d 	movw	r2, #541	; 0x21d
  40191c:	4904      	ldr	r1, [pc, #16]	; (401930 <_usart_async_enable_byte_sent_irq+0x1c>)
  40191e:	3000      	adds	r0, #0
  401920:	bf18      	it	ne
  401922:	2001      	movne	r0, #1
  401924:	4b03      	ldr	r3, [pc, #12]	; (401934 <_usart_async_enable_byte_sent_irq+0x20>)
  401926:	4798      	blx	r3
	hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  401928:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  40192a:	2202      	movs	r2, #2
  40192c:	609a      	str	r2, [r3, #8]
  40192e:	bd10      	pop	{r4, pc}
  401930:	00401ff0 	.word	0x00401ff0
  401934:	00401011 	.word	0x00401011

00401938 <_usart_async_enable_tx_done_irq>:
{
  401938:	b510      	push	{r4, lr}
	ASSERT(device);
  40193a:	4604      	mov	r4, r0
  40193c:	f240 2226 	movw	r2, #550	; 0x226
  401940:	4905      	ldr	r1, [pc, #20]	; (401958 <_usart_async_enable_tx_done_irq+0x20>)
  401942:	3000      	adds	r0, #0
  401944:	bf18      	it	ne
  401946:	2001      	movne	r0, #1
  401948:	4b04      	ldr	r3, [pc, #16]	; (40195c <_usart_async_enable_tx_done_irq+0x24>)
  40194a:	4798      	blx	r3
	hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  40194c:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  40194e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401952:	609a      	str	r2, [r3, #8]
  401954:	bd10      	pop	{r4, pc}
  401956:	bf00      	nop
  401958:	00401ff0 	.word	0x00401ff0
  40195c:	00401011 	.word	0x00401011

00401960 <_usart_async_set_irq_state>:
{
  401960:	b570      	push	{r4, r5, r6, lr}
  401962:	460c      	mov	r4, r1
  401964:	4616      	mov	r6, r2
	ASSERT(device);
  401966:	4605      	mov	r5, r0
  401968:	f44f 7214 	mov.w	r2, #592	; 0x250
  40196c:	491b      	ldr	r1, [pc, #108]	; (4019dc <_usart_async_set_irq_state+0x7c>)
  40196e:	3000      	adds	r0, #0
  401970:	bf18      	it	ne
  401972:	2001      	movne	r0, #1
  401974:	4b1a      	ldr	r3, [pc, #104]	; (4019e0 <_usart_async_set_irq_state+0x80>)
  401976:	4798      	blx	r3
	if (state) {
  401978:	b1c6      	cbz	r6, 4019ac <_usart_async_set_irq_state+0x4c>
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  40197a:	2c02      	cmp	r4, #2
  40197c:	bf18      	it	ne
  40197e:	2c00      	cmpne	r4, #0
  401980:	d004      	beq.n	40198c <_usart_async_set_irq_state+0x2c>
		} else if (USART_ASYNC_RX_DONE == type) {
  401982:	2c01      	cmp	r4, #1
  401984:	d00a      	beq.n	40199c <_usart_async_set_irq_state+0x3c>
		} else if (USART_ASYNC_ERROR == type) {
  401986:	2c03      	cmp	r4, #3
  401988:	d00c      	beq.n	4019a4 <_usart_async_set_irq_state+0x44>
  40198a:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  40198c:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  40198e:	2202      	movs	r2, #2
  401990:	609a      	str	r2, [r3, #8]
			hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  401992:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  401994:	f44f 7200 	mov.w	r2, #512	; 0x200
  401998:	609a      	str	r2, [r3, #8]
  40199a:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_RXRDY_bit(device->hw);
  40199c:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_RXRDY;
  40199e:	2201      	movs	r2, #1
  4019a0:	609a      	str	r2, [r3, #8]
  4019a2:	bd70      	pop	{r4, r5, r6, pc}
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  4019a4:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = mask;
  4019a6:	4a0f      	ldr	r2, [pc, #60]	; (4019e4 <_usart_async_set_irq_state+0x84>)
  4019a8:	609a      	str	r2, [r3, #8]
  4019aa:	bd70      	pop	{r4, r5, r6, pc}
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  4019ac:	2c02      	cmp	r4, #2
  4019ae:	bf18      	it	ne
  4019b0:	2c00      	cmpne	r4, #0
  4019b2:	d007      	beq.n	4019c4 <_usart_async_set_irq_state+0x64>
		} else if (USART_ASYNC_RX_DONE == type) {
  4019b4:	2c01      	cmp	r4, #1
  4019b6:	d00d      	beq.n	4019d4 <_usart_async_set_irq_state+0x74>
		} else if (USART_ASYNC_ERROR == type) {
  4019b8:	2c03      	cmp	r4, #3
  4019ba:	d1e6      	bne.n	40198a <_usart_async_set_irq_state+0x2a>
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  4019bc:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = mask;
  4019be:	4a09      	ldr	r2, [pc, #36]	; (4019e4 <_usart_async_set_irq_state+0x84>)
  4019c0:	60da      	str	r2, [r3, #12]
}
  4019c2:	e7e2      	b.n	40198a <_usart_async_set_irq_state+0x2a>
			hri_usart_clear_US_IMR_TXRDY_bit(device->hw);
  4019c4:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  4019c6:	2202      	movs	r2, #2
  4019c8:	60da      	str	r2, [r3, #12]
			hri_usart_clear_US_IMR_TXEMPTY_bit(device->hw);
  4019ca:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  4019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019d0:	60da      	str	r2, [r3, #12]
  4019d2:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_clear_US_IMR_RXRDY_bit(device->hw);
  4019d4:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_RXRDY;
  4019d6:	2201      	movs	r2, #1
  4019d8:	60da      	str	r2, [r3, #12]
  4019da:	bd70      	pop	{r4, r5, r6, pc}
  4019dc:	00401ff0 	.word	0x00401ff0
  4019e0:	00401011 	.word	0x00401011
  4019e4:	010000e0 	.word	0x010000e0

004019e8 <_usart_get_usart_async>:
}
  4019e8:	2000      	movs	r0, #0
  4019ea:	4770      	bx	lr

004019ec <USART1_Handler>:
{
  4019ec:	b508      	push	{r3, lr}
	_usart_interrupt_handler(_usart1_dev);
  4019ee:	4b02      	ldr	r3, [pc, #8]	; (4019f8 <USART1_Handler+0xc>)
  4019f0:	6818      	ldr	r0, [r3, #0]
  4019f2:	4b02      	ldr	r3, [pc, #8]	; (4019fc <USART1_Handler+0x10>)
  4019f4:	4798      	blx	r3
  4019f6:	bd08      	pop	{r3, pc}
  4019f8:	20400424 	.word	0x20400424
  4019fc:	0040176d 	.word	0x0040176d

00401a00 <timer_task_cb>:
*
*/
static void timer_task_cb(const struct timer_task *const timer_task)
{
	// Toggle LED
	milliCounter++;
  401a00:	490e      	ldr	r1, [pc, #56]	; (401a3c <timer_task_cb+0x3c>)
  401a02:	880b      	ldrh	r3, [r1, #0]
  401a04:	3301      	adds	r3, #1
  401a06:	b29b      	uxth	r3, r3
  401a08:	800b      	strh	r3, [r1, #0]
	
	messageCounter++;
  401a0a:	684a      	ldr	r2, [r1, #4]
  401a0c:	3201      	adds	r2, #1
  401a0e:	604a      	str	r2, [r1, #4]

	// Check if it's time to send a message
	if (messageCounter >= message_interval_ms) {
  401a10:	490b      	ldr	r1, [pc, #44]	; (401a40 <timer_task_cb+0x40>)
  401a12:	7809      	ldrb	r1, [r1, #0]
  401a14:	b2c9      	uxtb	r1, r1
  401a16:	428a      	cmp	r2, r1
  401a18:	d304      	bcc.n	401a24 <timer_task_cb+0x24>
		// Send serial message
		send_data_flag = 1;
  401a1a:	4a08      	ldr	r2, [pc, #32]	; (401a3c <timer_task_cb+0x3c>)
  401a1c:	2101      	movs	r1, #1
  401a1e:	7211      	strb	r1, [r2, #8]
		// Reset message counter
		messageCounter = 0;
  401a20:	2100      	movs	r1, #0
  401a22:	6051      	str	r1, [r2, #4]
	}

	// Reset millisecond counter every second
	if (milliCounter >= 1000) {
  401a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401a28:	d307      	bcc.n	401a3a <timer_task_cb+0x3a>
		milliCounter = 0;
  401a2a:	4b04      	ldr	r3, [pc, #16]	; (401a3c <timer_task_cb+0x3c>)
  401a2c:	2200      	movs	r2, #0
  401a2e:	801a      	strh	r2, [r3, #0]
		secondCounter++;
  401a30:	68da      	ldr	r2, [r3, #12]
  401a32:	3201      	adds	r2, #1
  401a34:	60da      	str	r2, [r3, #12]
		

		read_bme280_flag = true;
  401a36:	2201      	movs	r2, #1
  401a38:	741a      	strb	r2, [r3, #16]
  401a3a:	4770      	bx	lr
  401a3c:	20400428 	.word	0x20400428
  401a40:	20400048 	.word	0x20400048

00401a44 <micro_timer_task_cb>:
	
}

static void micro_timer_task_cb(const struct timer_task *const timer_task)
{
	microCounter++;
  401a44:	4a05      	ldr	r2, [pc, #20]	; (401a5c <micro_timer_task_cb+0x18>)
  401a46:	8a53      	ldrh	r3, [r2, #18]
  401a48:	3301      	adds	r3, #1
  401a4a:	b29b      	uxth	r3, r3
  401a4c:	8253      	strh	r3, [r2, #18]
	// Reset every millisecond
	if (microCounter >= 1000) {
  401a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401a52:	d302      	bcc.n	401a5a <micro_timer_task_cb+0x16>
		microCounter = 0;
  401a54:	2200      	movs	r2, #0
  401a56:	4b01      	ldr	r3, [pc, #4]	; (401a5c <micro_timer_task_cb+0x18>)
  401a58:	825a      	strh	r2, [r3, #18]
  401a5a:	4770      	bx	lr
  401a5c:	20400428 	.word	0x20400428

00401a60 <serial_tx_cb>:
	return entry;
}

// USART functions
// Virtual COM port transmit callback function
static void serial_tx_cb(const struct usart_async_descriptor *const io_descr) {
  401a60:	4770      	bx	lr
	...

00401a64 <serial_rx_cb>:

#define WAITING_FOR_START 0
#define WAITING_FOR_MODE 1
static uint8_t receive_state = WAITING_FOR_START;
// When serial reads a data
static void serial_rx_cb(const struct usart_async_descriptor *const io_descr, const uint16_t usart_data) {
  401a64:	b500      	push	{lr}
  401a66:	b083      	sub	sp, #12
	uint8_t received_byte, count;
	
	count = io_read(&USART_0, &received_byte,1);
  401a68:	2201      	movs	r2, #1
  401a6a:	f10d 0107 	add.w	r1, sp, #7
  401a6e:	480e      	ldr	r0, [pc, #56]	; (401aa8 <serial_rx_cb+0x44>)
  401a70:	4b0e      	ldr	r3, [pc, #56]	; (401aac <serial_rx_cb+0x48>)
  401a72:	4798      	blx	r3

    switch (receive_state) {
  401a74:	4b0e      	ldr	r3, [pc, #56]	; (401ab0 <serial_rx_cb+0x4c>)
  401a76:	7d1b      	ldrb	r3, [r3, #20]
  401a78:	b123      	cbz	r3, 401a84 <serial_rx_cb+0x20>
  401a7a:	2b01      	cmp	r3, #1
  401a7c:	d00a      	beq.n	401a94 <serial_rx_cb+0x30>
            receive_state = WAITING_FOR_START;  // Ready to receive next message
			startSend = 1;
            break;
    }
	
}
  401a7e:	b003      	add	sp, #12
  401a80:	f85d fb04 	ldr.w	pc, [sp], #4
            if (received_byte == 'S') {
  401a84:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401a88:	2b53      	cmp	r3, #83	; 0x53
  401a8a:	d1f8      	bne.n	401a7e <serial_rx_cb+0x1a>
                receive_state = WAITING_FOR_MODE;
  401a8c:	2201      	movs	r2, #1
  401a8e:	4b08      	ldr	r3, [pc, #32]	; (401ab0 <serial_rx_cb+0x4c>)
  401a90:	751a      	strb	r2, [r3, #20]
  401a92:	e7f4      	b.n	401a7e <serial_rx_cb+0x1a>
            data_mode = received_byte;
  401a94:	f89d 2007 	ldrb.w	r2, [sp, #7]
  401a98:	4b06      	ldr	r3, [pc, #24]	; (401ab4 <serial_rx_cb+0x50>)
  401a9a:	705a      	strb	r2, [r3, #1]
            receive_state = WAITING_FOR_START;  // Ready to receive next message
  401a9c:	4b04      	ldr	r3, [pc, #16]	; (401ab0 <serial_rx_cb+0x4c>)
  401a9e:	2200      	movs	r2, #0
  401aa0:	751a      	strb	r2, [r3, #20]
			startSend = 1;
  401aa2:	2201      	movs	r2, #1
  401aa4:	755a      	strb	r2, [r3, #21]
}
  401aa6:	e7ea      	b.n	401a7e <serial_rx_cb+0x1a>
  401aa8:	204004b8 	.word	0x204004b8
  401aac:	0040099d 	.word	0x0040099d
  401ab0:	20400428 	.word	0x20400428
  401ab4:	20400048 	.word	0x20400048

00401ab8 <process_detector_data>:
	energy_bins[detector_index][bin_index]++;
  401ab8:	4a04      	ldr	r2, [pc, #16]	; (401acc <process_detector_data+0x14>)
  401aba:	0109      	lsls	r1, r1, #4
  401abc:	eb01 3020 	add.w	r0, r1, r0, asr #12
  401ac0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  401ac4:	3301      	adds	r3, #1
  401ac6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  401aca:	4770      	bx	lr
  401acc:	20400524 	.word	0x20400524

00401ad0 <add_to_buffer>:
void add_to_buffer(uint8_t new_entry, uint8_t detector_id) {
  401ad0:	b430      	push	{r4, r5}
	detector_data[detector_id][end_index] = new_entry;
  401ad2:	4c16      	ldr	r4, [pc, #88]	; (401b2c <add_to_buffer+0x5c>)
  401ad4:	69a2      	ldr	r2, [r4, #24]
  401ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401ada:	4d15      	ldr	r5, [pc, #84]	; (401b30 <add_to_buffer+0x60>)
  401adc:	fb03 5101 	mla	r1, r3, r1, r5
  401ae0:	5488      	strb	r0, [r1, r2]
	end_index = (end_index + 1) % DATA_LENGTH;
  401ae2:	3201      	adds	r2, #1
  401ae4:	4913      	ldr	r1, [pc, #76]	; (401b34 <add_to_buffer+0x64>)
  401ae6:	fb81 3102 	smull	r3, r1, r1, r2
  401aea:	17d3      	asrs	r3, r2, #31
  401aec:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  401af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401af4:	0059      	lsls	r1, r3, #1
  401af6:	1a53      	subs	r3, r2, r1
  401af8:	2264      	movs	r2, #100	; 0x64
  401afa:	fb02 f303 	mul.w	r3, r2, r3
  401afe:	61a3      	str	r3, [r4, #24]
	if (end_index == start_index) {
  401b00:	69e2      	ldr	r2, [r4, #28]
  401b02:	4293      	cmp	r3, r2
  401b04:	d001      	beq.n	401b0a <add_to_buffer+0x3a>
}
  401b06:	bc30      	pop	{r4, r5}
  401b08:	4770      	bx	lr
		start_index = (start_index + 1) % DATA_LENGTH;
  401b0a:	3201      	adds	r2, #1
  401b0c:	4909      	ldr	r1, [pc, #36]	; (401b34 <add_to_buffer+0x64>)
  401b0e:	fb81 3102 	smull	r3, r1, r1, r2
  401b12:	17d3      	asrs	r3, r2, #31
  401b14:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  401b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401b1c:	0059      	lsls	r1, r3, #1
  401b1e:	1a53      	subs	r3, r2, r1
  401b20:	2264      	movs	r2, #100	; 0x64
  401b22:	fb02 f303 	mul.w	r3, r2, r3
  401b26:	61e3      	str	r3, [r4, #28]
	return;
  401b28:	e7ed      	b.n	401b06 <add_to_buffer+0x36>
  401b2a:	bf00      	nop
  401b2c:	20400428 	.word	0x20400428
  401b30:	20400624 	.word	0x20400624
  401b34:	66666667 	.word	0x66666667

00401b38 <read_SPI_data>:
{
  401b38:	b570      	push	{r4, r5, r6, lr}
  401b3a:	b084      	sub	sp, #16
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  401b3c:	a903      	add	r1, sp, #12
  401b3e:	4815      	ldr	r0, [pc, #84]	; (401b94 <read_SPI_data+0x5c>)
  401b40:	4b15      	ldr	r3, [pc, #84]	; (401b98 <read_SPI_data+0x60>)
  401b42:	4798      	blx	r3
	uint8_t cs_pins[4] = {CS_PIN_DEVICE1, CS_PIN_DEVICE2, CS_PIN_DEVICE3, CS_PIN_DEVICE4};
  401b44:	4b15      	ldr	r3, [pc, #84]	; (401b9c <read_SPI_data+0x64>)
  401b46:	681b      	ldr	r3, [r3, #0]
  401b48:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < 4; i++) {
  401b4a:	2500      	movs	r5, #0
  401b4c:	e01e      	b.n	401b8c <read_SPI_data+0x54>
		gpio_set_pin_level(cs_pins[i], false); // set the pin low (select the device)
  401b4e:	ab04      	add	r3, sp, #16
  401b50:	442b      	add	r3, r5
  401b52:	f813 4c0c 	ldrb.w	r4, [r3, #-12]
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  401b56:	0963      	lsrs	r3, r4, #5
  401b58:	f004 041f 	and.w	r4, r4, #31
  401b5c:	2201      	movs	r2, #1
  401b5e:	fa02 f404 	lsl.w	r4, r2, r4
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  401b62:	4e0f      	ldr	r6, [pc, #60]	; (401ba0 <read_SPI_data+0x68>)
  401b64:	eb06 2643 	add.w	r6, r6, r3, lsl #9
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_CODR = mask;
  401b68:	6374      	str	r4, [r6, #52]	; 0x34
		io_read(io, &read_data, 1); // Read 1 bytes of data
  401b6a:	f10d 010b 	add.w	r1, sp, #11
  401b6e:	9803      	ldr	r0, [sp, #12]
  401b70:	4b0c      	ldr	r3, [pc, #48]	; (401ba4 <read_SPI_data+0x6c>)
  401b72:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401b74:	6334      	str	r4, [r6, #48]	; 0x30
		add_to_buffer(read_data, i);
  401b76:	4629      	mov	r1, r5
  401b78:	f89d 000b 	ldrb.w	r0, [sp, #11]
  401b7c:	4b0a      	ldr	r3, [pc, #40]	; (401ba8 <read_SPI_data+0x70>)
  401b7e:	4798      	blx	r3
		process_detector_data(read_data,i);
  401b80:	b2e9      	uxtb	r1, r5
  401b82:	f89d 000b 	ldrb.w	r0, [sp, #11]
  401b86:	4b09      	ldr	r3, [pc, #36]	; (401bac <read_SPI_data+0x74>)
  401b88:	4798      	blx	r3
	for (int i = 0; i < 4; i++) {
  401b8a:	3501      	adds	r5, #1
  401b8c:	2d03      	cmp	r5, #3
  401b8e:	ddde      	ble.n	401b4e <read_SPI_data+0x16>
}
  401b90:	b004      	add	sp, #16
  401b92:	bd70      	pop	{r4, r5, r6, pc}
  401b94:	204004a0 	.word	0x204004a0
  401b98:	00400b49 	.word	0x00400b49
  401b9c:	0040200c 	.word	0x0040200c
  401ba0:	400e0e00 	.word	0x400e0e00
  401ba4:	0040099d 	.word	0x0040099d
  401ba8:	00401ad1 	.word	0x00401ad1
  401bac:	00401ab9 	.word	0x00401ab9

00401bb0 <get_from_buffer>:
	if (start_index == end_index) {
  401bb0:	4a0f      	ldr	r2, [pc, #60]	; (401bf0 <get_from_buffer+0x40>)
  401bb2:	69d3      	ldr	r3, [r2, #28]
  401bb4:	6992      	ldr	r2, [r2, #24]
  401bb6:	4293      	cmp	r3, r2
  401bb8:	d017      	beq.n	401bea <get_from_buffer+0x3a>
	uint8_t entry = detector_data[detector_id][start_index];
  401bba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  401bbe:	4a0d      	ldr	r2, [pc, #52]	; (401bf4 <get_from_buffer+0x44>)
  401bc0:	fb01 2000 	mla	r0, r1, r0, r2
  401bc4:	5cc0      	ldrb	r0, [r0, r3]
  401bc6:	b2c0      	uxtb	r0, r0
	start_index = (start_index + 1) % DATA_LENGTH;
  401bc8:	1c5a      	adds	r2, r3, #1
  401bca:	490b      	ldr	r1, [pc, #44]	; (401bf8 <get_from_buffer+0x48>)
  401bcc:	fb81 3102 	smull	r3, r1, r1, r2
  401bd0:	17d3      	asrs	r3, r2, #31
  401bd2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  401bd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401bda:	0059      	lsls	r1, r3, #1
  401bdc:	1a53      	subs	r3, r2, r1
  401bde:	2264      	movs	r2, #100	; 0x64
  401be0:	fb02 f303 	mul.w	r3, r2, r3
  401be4:	4a02      	ldr	r2, [pc, #8]	; (401bf0 <get_from_buffer+0x40>)
  401be6:	61d3      	str	r3, [r2, #28]
	return entry;
  401be8:	4770      	bx	lr
		return 0xFF;
  401bea:	20ff      	movs	r0, #255	; 0xff
}
  401bec:	4770      	bx	lr
  401bee:	bf00      	nop
  401bf0:	20400428 	.word	0x20400428
  401bf4:	20400624 	.word	0x20400624
  401bf8:	66666667 	.word	0x66666667

00401bfc <main>:




int main(void)
{
  401bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  401bfe:	b0a9      	sub	sp, #164	; 0xa4
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401c00:	4b75      	ldr	r3, [pc, #468]	; (401dd8 <main+0x1dc>)
  401c02:	4798      	blx	r3
	
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  401c04:	4c75      	ldr	r4, [pc, #468]	; (401ddc <main+0x1e0>)
  401c06:	a927      	add	r1, sp, #156	; 0x9c
  401c08:	4620      	mov	r0, r4
  401c0a:	4b75      	ldr	r3, [pc, #468]	; (401de0 <main+0x1e4>)
  401c0c:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  401c0e:	4620      	mov	r0, r4
  401c10:	4b74      	ldr	r3, [pc, #464]	; (401de4 <main+0x1e8>)
  401c12:	4798      	blx	r3
//  bme280.intf = BME280_I2C_INTF;
//  bme280.read = user_i2c_read; // Replace with actual I2C read function
//  bme280.write = user_i2c_write; // Replace with actual I2C write function
//  bme280.delay_ms = user_delay_ms; // Replace with actual delay function

 bme280_init(&bme280);
  401c14:	4874      	ldr	r0, [pc, #464]	; (401de8 <main+0x1ec>)
  401c16:	4b75      	ldr	r3, [pc, #468]	; (401dec <main+0x1f0>)
  401c18:	4798      	blx	r3
	
	// Set up Timer Function
	task.interval = 1;
  401c1a:	4c75      	ldr	r4, [pc, #468]	; (401df0 <main+0x1f4>)
  401c1c:	2501      	movs	r5, #1
  401c1e:	62a5      	str	r5, [r4, #40]	; 0x28
	task.cb = timer_task_cb;
  401c20:	4b74      	ldr	r3, [pc, #464]	; (401df4 <main+0x1f8>)
  401c22:	62e3      	str	r3, [r4, #44]	; 0x2c
	task.mode = TIMER_TASK_REPEAT;
  401c24:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	
	// Add timer task
	timer_add_task(&TIMER_0, &task);
  401c28:	4f73      	ldr	r7, [pc, #460]	; (401df8 <main+0x1fc>)
  401c2a:	f104 0120 	add.w	r1, r4, #32
  401c2e:	4638      	mov	r0, r7
  401c30:	4e72      	ldr	r6, [pc, #456]	; (401dfc <main+0x200>)
  401c32:	47b0      	blx	r6
	timer_start(&TIMER_0);
  401c34:	4638      	mov	r0, r7
  401c36:	4b72      	ldr	r3, [pc, #456]	; (401e00 <main+0x204>)
  401c38:	4798      	blx	r3
	
	// Set up Microsecond Timer Function
	micro_task.interval = 1;
  401c3a:	63e5      	str	r5, [r4, #60]	; 0x3c
	micro_task.cb = micro_timer_task_cb;
  401c3c:	4b71      	ldr	r3, [pc, #452]	; (401e04 <main+0x208>)
  401c3e:	6423      	str	r3, [r4, #64]	; 0x40
	micro_task.mode = TIMER_TASK_REPEAT;
  401c40:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
	
	timer_add_task(&MICRO_Timer, &micro_task);
  401c44:	f104 0134 	add.w	r1, r4, #52	; 0x34
  401c48:	486f      	ldr	r0, [pc, #444]	; (401e08 <main+0x20c>)
  401c4a:	47b0      	blx	r6
	if (data_mode != previous_data_mode) {
  401c4c:	4b6f      	ldr	r3, [pc, #444]	; (401e0c <main+0x210>)
  401c4e:	785a      	ldrb	r2, [r3, #1]
  401c50:	b2d2      	uxtb	r2, r2
  401c52:	789b      	ldrb	r3, [r3, #2]
  401c54:	b2db      	uxtb	r3, r3
  401c56:	429a      	cmp	r2, r3
  401c58:	d00b      	beq.n	401c72 <main+0x76>
		if (data_mode == 2) {
  401c5a:	4b6c      	ldr	r3, [pc, #432]	; (401e0c <main+0x210>)
  401c5c:	785b      	ldrb	r3, [r3, #1]
  401c5e:	b2db      	uxtb	r3, r3
  401c60:	2b02      	cmp	r3, #2
  401c62:	d125      	bne.n	401cb0 <main+0xb4>
			// Enable microsecond timer
			timer_start(&MICRO_Timer);
  401c64:	4868      	ldr	r0, [pc, #416]	; (401e08 <main+0x20c>)
  401c66:	4b66      	ldr	r3, [pc, #408]	; (401e00 <main+0x204>)
  401c68:	4798      	blx	r3
			} else {
			// Disable microsecond timer
			timer_stop(&MICRO_Timer);
		}
		previous_data_mode = data_mode;  // Update the previous data mode
  401c6a:	4a68      	ldr	r2, [pc, #416]	; (401e0c <main+0x210>)
  401c6c:	7853      	ldrb	r3, [r2, #1]
  401c6e:	b2db      	uxtb	r3, r3
  401c70:	7093      	strb	r3, [r2, #2]
	((Pio *)hw)->PIO_OER = mask;
  401c72:	2501      	movs	r5, #1
  401c74:	4b66      	ldr	r3, [pc, #408]	; (401e10 <main+0x214>)
  401c76:	611d      	str	r5, [r3, #16]
  401c78:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401c7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401c80:	611a      	str	r2, [r3, #16]
  401c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401c86:	611a      	str	r2, [r3, #16]
  401c88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401c8c:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(CS_PIN_DEVICE2, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE3, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE4, GPIO_DIRECTION_OUT);
	
	// Enable SPI
	spi_m_sync_enable(&SPI_0);
  401c8e:	4853      	ldr	r0, [pc, #332]	; (401ddc <main+0x1e0>)
  401c90:	4b54      	ldr	r3, [pc, #336]	; (401de4 <main+0x1e8>)
  401c92:	4798      	blx	r3
	
	// 
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, serial_tx_cb);
  401c94:	4c5f      	ldr	r4, [pc, #380]	; (401e14 <main+0x218>)
  401c96:	4a60      	ldr	r2, [pc, #384]	; (401e18 <main+0x21c>)
  401c98:	4629      	mov	r1, r5
  401c9a:	4620      	mov	r0, r4
  401c9c:	4d5f      	ldr	r5, [pc, #380]	; (401e1c <main+0x220>)
  401c9e:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, serial_rx_cb);
  401ca0:	4a5f      	ldr	r2, [pc, #380]	; (401e20 <main+0x224>)
  401ca2:	2100      	movs	r1, #0
  401ca4:	4620      	mov	r0, r4
  401ca6:	47a8      	blx	r5
	int32_t result = usart_async_enable(&USART_0);
  401ca8:	4620      	mov	r0, r4
  401caa:	4b5e      	ldr	r3, [pc, #376]	; (401e24 <main+0x228>)
  401cac:	4798      	blx	r3
  401cae:	e006      	b.n	401cbe <main+0xc2>
			timer_stop(&MICRO_Timer);
  401cb0:	4855      	ldr	r0, [pc, #340]	; (401e08 <main+0x20c>)
  401cb2:	4b5d      	ldr	r3, [pc, #372]	; (401e28 <main+0x22c>)
  401cb4:	4798      	blx	r3
  401cb6:	e7d8      	b.n	401c6a <main+0x6e>
					   
				   
				    read_bme280_flag = false;
		       }
		
		if (send_data_flag) {
  401cb8:	4b4d      	ldr	r3, [pc, #308]	; (401df0 <main+0x1f4>)
  401cba:	7a1b      	ldrb	r3, [r3, #8]
  401cbc:	b99b      	cbnz	r3, 401ce6 <main+0xea>
		read_SPI_data();
  401cbe:	4b5b      	ldr	r3, [pc, #364]	; (401e2c <main+0x230>)
  401cc0:	4798      	blx	r3
		     if (read_bme280_flag) {
  401cc2:	4b4b      	ldr	r3, [pc, #300]	; (401df0 <main+0x1f4>)
  401cc4:	7c1b      	ldrb	r3, [r3, #16]
  401cc6:	2b00      	cmp	r3, #0
  401cc8:	d0f6      	beq.n	401cb8 <main+0xbc>
				   io_read(io, read_data, 12); // Read 12 bytes of data into read_data buffer
  401cca:	220c      	movs	r2, #12
  401ccc:	a924      	add	r1, sp, #144	; 0x90
  401cce:	9827      	ldr	r0, [sp, #156]	; 0x9c
  401cd0:	4b57      	ldr	r3, [pc, #348]	; (401e30 <main+0x234>)
  401cd2:	4798      	blx	r3
				    io_write(&USART_0, read_data,sizeof(read_data));
  401cd4:	220c      	movs	r2, #12
  401cd6:	a924      	add	r1, sp, #144	; 0x90
  401cd8:	484e      	ldr	r0, [pc, #312]	; (401e14 <main+0x218>)
  401cda:	4b56      	ldr	r3, [pc, #344]	; (401e34 <main+0x238>)
  401cdc:	4798      	blx	r3
				    read_bme280_flag = false;
  401cde:	2200      	movs	r2, #0
  401ce0:	4b43      	ldr	r3, [pc, #268]	; (401df0 <main+0x1f4>)
  401ce2:	741a      	strb	r2, [r3, #16]
  401ce4:	e7e8      	b.n	401cb8 <main+0xbc>
			
			switch (data_mode) {
  401ce6:	4b49      	ldr	r3, [pc, #292]	; (401e0c <main+0x210>)
  401ce8:	785b      	ldrb	r3, [r3, #1]
  401cea:	b2db      	uxtb	r3, r3
  401cec:	2b01      	cmp	r3, #1
  401cee:	d009      	beq.n	401d04 <main+0x108>
  401cf0:	2b02      	cmp	r3, #2
  401cf2:	d03a      	beq.n	401d6a <main+0x16e>
			////fprintf(sizeof(uint32_t));
			////memcpy(&dequeueItemEvent,&dequeueItemEventToCopy,sizeof(dequeueItemEventToCopy));
			////int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemBin, sizeof(dequeueItemBin));
			//int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemEvent, sizeof(dequeueItemEvent));
						
			if (startSend == 1) {
  401cf4:	4b3e      	ldr	r3, [pc, #248]	; (401df0 <main+0x1f4>)
  401cf6:	7d5b      	ldrb	r3, [r3, #21]
  401cf8:	2b01      	cmp	r3, #1
  401cfa:	d054      	beq.n	401da6 <main+0x1aa>
					default:
					break;
				}
			}
			
			send_data_flag = 0;
  401cfc:	2200      	movs	r2, #0
  401cfe:	4b3c      	ldr	r3, [pc, #240]	; (401df0 <main+0x1f4>)
  401d00:	721a      	strb	r2, [r3, #8]
  401d02:	e7dc      	b.n	401cbe <main+0xc2>
					item.mode = data_mode;
  401d04:	4b41      	ldr	r3, [pc, #260]	; (401e0c <main+0x210>)
  401d06:	785b      	ldrb	r3, [r3, #1]
  401d08:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
					item.secondCounter = secondCounter;
  401d0c:	4b38      	ldr	r3, [pc, #224]	; (401df0 <main+0x1f4>)
  401d0e:	68da      	ldr	r2, [r3, #12]
  401d10:	9212      	str	r2, [sp, #72]	; 0x48
					item.milliCounter = milliCounter;
  401d12:	881b      	ldrh	r3, [r3, #0]
  401d14:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  401d18:	2000      	movs	r0, #0
  401d1a:	e00c      	b.n	401d36 <main+0x13a>
							item.data[i * NUM_OF_ENERGY_LEVELS + j] = energy_bins[i][j];
  401d1c:	eb02 1300 	add.w	r3, r2, r0, lsl #4
  401d20:	4945      	ldr	r1, [pc, #276]	; (401e38 <main+0x23c>)
  401d22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  401d26:	ac28      	add	r4, sp, #160	; 0xa0
  401d28:	4423      	add	r3, r4
  401d2a:	f803 1c52 	strb.w	r1, [r3, #-82]
						for (int j = 0; j < NUM_OF_ENERGY_LEVELS; j++) {
  401d2e:	3201      	adds	r2, #1
  401d30:	2a0f      	cmp	r2, #15
  401d32:	ddf3      	ble.n	401d1c <main+0x120>
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  401d34:	3001      	adds	r0, #1
  401d36:	2803      	cmp	r0, #3
  401d38:	dc01      	bgt.n	401d3e <main+0x142>
  401d3a:	2200      	movs	r2, #0
  401d3c:	e7f8      	b.n	401d30 <main+0x134>
					memset(energy_bins, 0, NUM_OF_DETECTOR * NUM_OF_ENERGY_LEVELS * sizeof(uint8_t));
  401d3e:	2240      	movs	r2, #64	; 0x40
  401d40:	2100      	movs	r1, #0
  401d42:	483d      	ldr	r0, [pc, #244]	; (401e38 <main+0x23c>)
  401d44:	4b3d      	ldr	r3, [pc, #244]	; (401e3c <main+0x240>)
  401d46:	4798      	blx	r3
					bin_buffer_enqueue(item);
  401d48:	466c      	mov	r4, sp
  401d4a:	ad15      	add	r5, sp, #84	; 0x54
  401d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401d58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  401d60:	ab11      	add	r3, sp, #68	; 0x44
  401d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401d64:	4c36      	ldr	r4, [pc, #216]	; (401e40 <main+0x244>)
  401d66:	47a0      	blx	r4
  401d68:	e7c4      	b.n	401cf4 <main+0xf8>
					item.mode = data_mode;
  401d6a:	4b28      	ldr	r3, [pc, #160]	; (401e0c <main+0x210>)
  401d6c:	785b      	ldrb	r3, [r3, #1]
  401d6e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
					item.secondCounter = secondCounter;
  401d72:	4b1f      	ldr	r3, [pc, #124]	; (401df0 <main+0x1f4>)
  401d74:	68da      	ldr	r2, [r3, #12]
  401d76:	9212      	str	r2, [sp, #72]	; 0x48
					item.milliCounter = milliCounter;
  401d78:	881a      	ldrh	r2, [r3, #0]
  401d7a:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
					item.microCounter = microCounter;
  401d7e:	8a5b      	ldrh	r3, [r3, #18]
  401d80:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  401d84:	2400      	movs	r4, #0
  401d86:	e007      	b.n	401d98 <main+0x19c>
						item.data[i] = get_from_buffer(i);
  401d88:	b2e0      	uxtb	r0, r4
  401d8a:	4b2e      	ldr	r3, [pc, #184]	; (401e44 <main+0x248>)
  401d8c:	4798      	blx	r3
  401d8e:	ab28      	add	r3, sp, #160	; 0xa0
  401d90:	4423      	add	r3, r4
  401d92:	f803 0c50 	strb.w	r0, [r3, #-80]
					for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  401d96:	3401      	adds	r4, #1
  401d98:	2c03      	cmp	r4, #3
  401d9a:	ddf5      	ble.n	401d88 <main+0x18c>
					event_buffer_enqueue(item);
  401d9c:	ab11      	add	r3, sp, #68	; 0x44
  401d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401da0:	4c29      	ldr	r4, [pc, #164]	; (401e48 <main+0x24c>)
  401da2:	47a0      	blx	r4
  401da4:	e7a6      	b.n	401cf4 <main+0xf8>
				switch (data_mode) {
  401da6:	4b19      	ldr	r3, [pc, #100]	; (401e0c <main+0x210>)
  401da8:	785b      	ldrb	r3, [r3, #1]
  401daa:	b2db      	uxtb	r3, r3
  401dac:	2b01      	cmp	r3, #1
  401dae:	d00a      	beq.n	401dc6 <main+0x1ca>
  401db0:	2b02      	cmp	r3, #2
  401db2:	d1a3      	bne.n	401cfc <main+0x100>
						EventBufferItem dequeueItemEvent = event_buffer_dequeue();
  401db4:	a811      	add	r0, sp, #68	; 0x44
  401db6:	4b25      	ldr	r3, [pc, #148]	; (401e4c <main+0x250>)
  401db8:	4798      	blx	r3
						int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemEvent, sizeof(dequeueItemEvent));
  401dba:	2210      	movs	r2, #16
  401dbc:	a911      	add	r1, sp, #68	; 0x44
  401dbe:	4815      	ldr	r0, [pc, #84]	; (401e14 <main+0x218>)
  401dc0:	4b1c      	ldr	r3, [pc, #112]	; (401e34 <main+0x238>)
  401dc2:	4798      	blx	r3
  401dc4:	e79a      	b.n	401cfc <main+0x100>
						BinBufferItem dequeueItemBin = bin_buffer_dequeue();
  401dc6:	a811      	add	r0, sp, #68	; 0x44
  401dc8:	4b21      	ldr	r3, [pc, #132]	; (401e50 <main+0x254>)
  401dca:	4798      	blx	r3
						int result = io_write(&USART_0.io, (uint8_t *)&dequeueItemBin, sizeof(dequeueItemBin));
  401dcc:	224c      	movs	r2, #76	; 0x4c
  401dce:	a911      	add	r1, sp, #68	; 0x44
  401dd0:	4810      	ldr	r0, [pc, #64]	; (401e14 <main+0x218>)
  401dd2:	4b18      	ldr	r3, [pc, #96]	; (401e34 <main+0x238>)
  401dd4:	4798      	blx	r3
  401dd6:	e791      	b.n	401cfc <main+0x100>
  401dd8:	004001d5 	.word	0x004001d5
  401ddc:	204004a0 	.word	0x204004a0
  401de0:	00400b49 	.word	0x00400b49
  401de4:	00400a69 	.word	0x00400a69
  401de8:	204015c4 	.word	0x204015c4
  401dec:	004004b1 	.word	0x004004b1
  401df0:	20400428 	.word	0x20400428
  401df4:	00401a01 	.word	0x00401a01
  401df8:	20400508 	.word	0x20400508
  401dfc:	00400ce1 	.word	0x00400ce1
  401e00:	00400c69 	.word	0x00400c69
  401e04:	00401a45 	.word	0x00401a45
  401e08:	2040047c 	.word	0x2040047c
  401e0c:	20400048 	.word	0x20400048
  401e10:	400e1200 	.word	0x400e1200
  401e14:	204004b8 	.word	0x204004b8
  401e18:	00401a61 	.word	0x00401a61
  401e1c:	00400f9d 	.word	0x00400f9d
  401e20:	00401a65 	.word	0x00401a65
  401e24:	00400f71 	.word	0x00400f71
  401e28:	00400ca5 	.word	0x00400ca5
  401e2c:	00401b39 	.word	0x00401b39
  401e30:	0040099d 	.word	0x0040099d
  401e34:	0040096d 	.word	0x0040096d
  401e38:	20400524 	.word	0x20400524
  401e3c:	00401eb3 	.word	0x00401eb3
  401e40:	00400505 	.word	0x00400505
  401e44:	00401bb1 	.word	0x00401bb1
  401e48:	004005e5 	.word	0x004005e5
  401e4c:	00400641 	.word	0x00400641
  401e50:	00400561 	.word	0x00400561

00401e54 <__libc_init_array>:
  401e54:	b570      	push	{r4, r5, r6, lr}
  401e56:	4e0d      	ldr	r6, [pc, #52]	; (401e8c <__libc_init_array+0x38>)
  401e58:	4c0d      	ldr	r4, [pc, #52]	; (401e90 <__libc_init_array+0x3c>)
  401e5a:	1ba4      	subs	r4, r4, r6
  401e5c:	10a4      	asrs	r4, r4, #2
  401e5e:	2500      	movs	r5, #0
  401e60:	42a5      	cmp	r5, r4
  401e62:	d109      	bne.n	401e78 <__libc_init_array+0x24>
  401e64:	4e0b      	ldr	r6, [pc, #44]	; (401e94 <__libc_init_array+0x40>)
  401e66:	4c0c      	ldr	r4, [pc, #48]	; (401e98 <__libc_init_array+0x44>)
  401e68:	f000 f8d2 	bl	402010 <_init>
  401e6c:	1ba4      	subs	r4, r4, r6
  401e6e:	10a4      	asrs	r4, r4, #2
  401e70:	2500      	movs	r5, #0
  401e72:	42a5      	cmp	r5, r4
  401e74:	d105      	bne.n	401e82 <__libc_init_array+0x2e>
  401e76:	bd70      	pop	{r4, r5, r6, pc}
  401e78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401e7c:	4798      	blx	r3
  401e7e:	3501      	adds	r5, #1
  401e80:	e7ee      	b.n	401e60 <__libc_init_array+0xc>
  401e82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401e86:	4798      	blx	r3
  401e88:	3501      	adds	r5, #1
  401e8a:	e7f2      	b.n	401e72 <__libc_init_array+0x1e>
  401e8c:	0040201c 	.word	0x0040201c
  401e90:	0040201c 	.word	0x0040201c
  401e94:	0040201c 	.word	0x0040201c
  401e98:	00402020 	.word	0x00402020

00401e9c <memcpy>:
  401e9c:	b510      	push	{r4, lr}
  401e9e:	1e43      	subs	r3, r0, #1
  401ea0:	440a      	add	r2, r1
  401ea2:	4291      	cmp	r1, r2
  401ea4:	d100      	bne.n	401ea8 <memcpy+0xc>
  401ea6:	bd10      	pop	{r4, pc}
  401ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
  401eac:	f803 4f01 	strb.w	r4, [r3, #1]!
  401eb0:	e7f7      	b.n	401ea2 <memcpy+0x6>

00401eb2 <memset>:
  401eb2:	4402      	add	r2, r0
  401eb4:	4603      	mov	r3, r0
  401eb6:	4293      	cmp	r3, r2
  401eb8:	d100      	bne.n	401ebc <memset+0xa>
  401eba:	4770      	bx	lr
  401ebc:	f803 1b01 	strb.w	r1, [r3], #1
  401ec0:	e7f9      	b.n	401eb6 <memset+0x4>
  401ec2:	0000      	movs	r0, r0
  401ec4:	682f2e2e 	.word	0x682f2e2e
  401ec8:	732f6c61 	.word	0x732f6c61
  401ecc:	682f6372 	.word	0x682f6372
  401ed0:	695f6c61 	.word	0x695f6c61
  401ed4:	00632e6f 	.word	0x00632e6f
  401ed8:	682f2e2e 	.word	0x682f2e2e
  401edc:	732f6c61 	.word	0x732f6c61
  401ee0:	682f6372 	.word	0x682f6372
  401ee4:	725f6c61 	.word	0x725f6c61
  401ee8:	5f646e61 	.word	0x5f646e61
  401eec:	636e7973 	.word	0x636e7973
  401ef0:	0000632e 	.word	0x0000632e
  401ef4:	682f2e2e 	.word	0x682f2e2e
  401ef8:	732f6c61 	.word	0x732f6c61
  401efc:	682f6372 	.word	0x682f6372
  401f00:	735f6c61 	.word	0x735f6c61
  401f04:	6d5f6970 	.word	0x6d5f6970
  401f08:	6e79735f 	.word	0x6e79735f
  401f0c:	00632e63 	.word	0x00632e63
  401f10:	682f2e2e 	.word	0x682f2e2e
  401f14:	732f6c61 	.word	0x732f6c61
  401f18:	682f6372 	.word	0x682f6372
  401f1c:	745f6c61 	.word	0x745f6c61
  401f20:	72656d69 	.word	0x72656d69
  401f24:	0000632e 	.word	0x0000632e
  401f28:	682f2e2e 	.word	0x682f2e2e
  401f2c:	732f6c61 	.word	0x732f6c61
  401f30:	682f6372 	.word	0x682f6372
  401f34:	755f6c61 	.word	0x755f6c61
  401f38:	74726173 	.word	0x74726173
  401f3c:	7973615f 	.word	0x7973615f
  401f40:	632e636e 	.word	0x632e636e
  401f44:	00000000 	.word	0x00000000
  401f48:	682f2e2e 	.word	0x682f2e2e
  401f4c:	752f6c61 	.word	0x752f6c61
  401f50:	736c6974 	.word	0x736c6974
  401f54:	6372732f 	.word	0x6372732f
  401f58:	6974752f 	.word	0x6974752f
  401f5c:	6c5f736c 	.word	0x6c5f736c
  401f60:	2e747369 	.word	0x2e747369
  401f64:	00000063 	.word	0x00000063
  401f68:	682f2e2e 	.word	0x682f2e2e
  401f6c:	752f6c61 	.word	0x752f6c61
  401f70:	736c6974 	.word	0x736c6974
  401f74:	6372732f 	.word	0x6372732f
  401f78:	6974752f 	.word	0x6974752f
  401f7c:	725f736c 	.word	0x725f736c
  401f80:	62676e69 	.word	0x62676e69
  401f84:	65666675 	.word	0x65666675
  401f88:	00632e72 	.word	0x00632e72

00401f8c <spi_regs>:
  401f8c:	00000000 80000000 00000001 04961602     ................
  401f9c:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401fac:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  401fbc:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
  401fcc:	682f2e2e 742f6c70 2f676e72 5f6c7068     ../hpl/trng/hpl_
  401fdc:	676e7274 0000632e                       trng.c..

00401fe4 <_usarts>:
  401fe4:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  401ff4:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  402004:	632e7472 00000000 1f1e1d40              rt.c....@...

00402010 <_init>:
  402010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402012:	bf00      	nop
  402014:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402016:	bc08      	pop	{r3}
  402018:	469e      	mov	lr, r3
  40201a:	4770      	bx	lr

0040201c <__init_array_start>:
  40201c:	0040018d 	.word	0x0040018d

00402020 <_fini>:
  402020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402022:	bf00      	nop
  402024:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402026:	bc08      	pop	{r3}
  402028:	469e      	mov	lr, r3
  40202a:	4770      	bx	lr

0040202c <__fini_array_start>:
  40202c:	00400169 	.word	0x00400169
