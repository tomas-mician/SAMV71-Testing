
ADCSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cbc  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000004c  20400000  00401cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001570  2040004c  00401d08  0002004c  2**2
                  ALLOC
  3 .heap         00000204  204015bc  00403278  0002004c  2**0
                  ALLOC
  4 .stack        00000400  204017c0  0040347c  0002004c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002007a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000133ae  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d49  00000000  00000000  00033481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000839e  00000000  00000000  000361ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a78  00000000  00000000  0003e568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009b8  00000000  00000000  0003efe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003df55  00000000  00000000  0003f998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001208e  00000000  00000000  0007d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< Updated upstream
 14 .debug_str    001466bb  00000000  00000000  0008f97b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001bd8  00000000  00000000  001d6038  2**2
=======
 14 .debug_str    00146705  00000000  00000000  0008f97b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001bd8  00000000  00000000  001d6080  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 1b 40 20 8d 03 40 00 89 03 40 00 89 03 40 00     ..@ ..@...@...@.
  400010:	89 03 40 00 89 03 40 00 89 03 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	89 03 40 00 89 03 40 00 00 00 00 00 89 03 40 00     ..@...@.......@.
  40003c:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40004c:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40005c:	89 03 40 00 89 03 40 00 00 00 00 00 89 03 40 00     ..@...@.......@.
  40006c:	89 03 40 00 89 03 40 00 89 03 40 00 c9 16 40 00     ..@...@...@...@.
  40007c:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40008c:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40009c:	c9 12 40 00 89 03 40 00 89 03 40 00 dd 12 40 00     ..@...@...@...@.
  4000ac:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  4000bc:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  4000cc:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  4000dc:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  4000ec:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  4000fc:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40010c:	89 03 40 00 89 03 40 00 89 03 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 89 03 40 00 89 03 40 00 89 03 40 00     ......@...@...@.
  40012c:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40013c:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40014c:	89 03 40 00 89 03 40 00 89 03 40 00 89 03 40 00     ..@...@...@...@.
  40015c:	89 03 40 00 89 03 40 00 89 03 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040004c 	.word	0x2040004c
  400184:	00000000 	.word	0x00000000
  400188:	00401cbc 	.word	0x00401cbc

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401cbc 	.word	0x00401cbc
  4001c8:	20400050 	.word	0x20400050
  4001cc:	00401cbc 	.word	0x00401cbc
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	004005e9 	.word	0x004005e9

004001e0 <bin_buffer_enqueue>:
#include "buffer_queue.h"

BinBufferQueue bin_buffer_queue = {.head = 0, .tail = 0, .count = 0};
EventBufferQueue event_buffer_queue = {.head = 0, .tail = 0, .count = 0};

void bin_buffer_enqueue(BinBufferItem item) {
  4001e0:	b084      	sub	sp, #16
  4001e2:	b570      	push	{r4, r5, r6, lr}
  4001e4:	ac04      	add	r4, sp, #16
  4001e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (bin_buffer_queue.count >= BIN_BUFFER_QUEUE_SIZE) {
  4001ea:	4b11      	ldr	r3, [pc, #68]	; (400230 <bin_buffer_enqueue+0x50>)
  4001ec:	f893 52fa 	ldrb.w	r5, [r3, #762]	; 0x2fa
  4001f0:	2d09      	cmp	r5, #9
  4001f2:	d819      	bhi.n	400228 <bin_buffer_enqueue+0x48>
		// Bin buffer is full, can't enqueue
		return;
	}

	bin_buffer_queue.items[bin_buffer_queue.tail] = item;
  4001f4:	461e      	mov	r6, r3
  4001f6:	f893 42f9 	ldrb.w	r4, [r3, #761]	; 0x2f9
  4001fa:	204c      	movs	r0, #76	; 0x4c
  4001fc:	4602      	mov	r2, r0
  4001fe:	a904      	add	r1, sp, #16
  400200:	fb00 3004 	mla	r0, r0, r4, r3
  400204:	4b0b      	ldr	r3, [pc, #44]	; (400234 <bin_buffer_enqueue+0x54>)
  400206:	4798      	blx	r3
	bin_buffer_queue.tail = (bin_buffer_queue.tail + 1) % BIN_BUFFER_QUEUE_SIZE;
  400208:	1c62      	adds	r2, r4, #1
  40020a:	490b      	ldr	r1, [pc, #44]	; (400238 <bin_buffer_enqueue+0x58>)
  40020c:	fb81 3102 	smull	r3, r1, r1, r2
  400210:	17d3      	asrs	r3, r2, #31
  400212:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400216:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40021a:	0059      	lsls	r1, r3, #1
  40021c:	1a53      	subs	r3, r2, r1
  40021e:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
	bin_buffer_queue.count++;
  400222:	3501      	adds	r5, #1
  400224:	f886 52fa 	strb.w	r5, [r6, #762]	; 0x2fa
}
  400228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  40022c:	b004      	add	sp, #16
  40022e:	4770      	bx	lr
  400230:	20400068 	.word	0x20400068
  400234:	00401b29 	.word	0x00401b29
  400238:	66666667 	.word	0x66666667

0040023c <bin_buffer_dequeue>:

BinBufferItem bin_buffer_dequeue() {
  40023c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400240:	b0a7      	sub	sp, #156	; 0x9c
  400242:	4605      	mov	r5, r0
	if (bin_buffer_queue.count > 0) {
  400244:	4b1a      	ldr	r3, [pc, #104]	; (4002b0 <bin_buffer_dequeue+0x74>)
  400246:	f893 42fa 	ldrb.w	r4, [r3, #762]	; 0x2fa
  40024a:	b984      	cbnz	r4, 40026e <bin_buffer_dequeue+0x32>
		bin_buffer_queue.count--;
		return item;
	}

	// If the queue is empty, return an item with zeros
	BinBufferItem emptyItem = {.mode = 0, .secondCounter = 0, .milliCounter = 0, .data = {0}};
  40024c:	244c      	movs	r4, #76	; 0x4c
  40024e:	4622      	mov	r2, r4
  400250:	2100      	movs	r1, #0
  400252:	eb0d 0004 	add.w	r0, sp, r4
  400256:	4b17      	ldr	r3, [pc, #92]	; (4002b4 <bin_buffer_dequeue+0x78>)
  400258:	4798      	blx	r3
	return emptyItem;
  40025a:	4622      	mov	r2, r4
  40025c:	eb0d 0104 	add.w	r1, sp, r4
  400260:	4628      	mov	r0, r5
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <bin_buffer_dequeue+0x7c>)
  400264:	4798      	blx	r3
}
  400266:	4628      	mov	r0, r5
  400268:	b027      	add	sp, #156	; 0x9c
  40026a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BinBufferItem item = bin_buffer_queue.items[bin_buffer_queue.head];
  40026e:	461e      	mov	r6, r3
  400270:	f893 92f8 	ldrb.w	r9, [r3, #760]	; 0x2f8
  400274:	274c      	movs	r7, #76	; 0x4c
  400276:	463a      	mov	r2, r7
  400278:	fb07 3109 	mla	r1, r7, r9, r3
  40027c:	4668      	mov	r0, sp
  40027e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002b8 <bin_buffer_dequeue+0x7c>
  400282:	47c0      	blx	r8
		bin_buffer_queue.head = (bin_buffer_queue.head + 1) % BIN_BUFFER_QUEUE_SIZE;
  400284:	f109 0201 	add.w	r2, r9, #1
  400288:	490c      	ldr	r1, [pc, #48]	; (4002bc <bin_buffer_dequeue+0x80>)
  40028a:	fb81 3102 	smull	r3, r1, r1, r2
  40028e:	17d3      	asrs	r3, r2, #31
  400290:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400294:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400298:	0059      	lsls	r1, r3, #1
  40029a:	1a53      	subs	r3, r2, r1
  40029c:	f886 32f8 	strb.w	r3, [r6, #760]	; 0x2f8
		bin_buffer_queue.count--;
  4002a0:	3c01      	subs	r4, #1
  4002a2:	f886 42fa 	strb.w	r4, [r6, #762]	; 0x2fa
		return item;
  4002a6:	463a      	mov	r2, r7
  4002a8:	4669      	mov	r1, sp
  4002aa:	4628      	mov	r0, r5
  4002ac:	47c0      	blx	r8
  4002ae:	e7da      	b.n	400266 <bin_buffer_dequeue+0x2a>
  4002b0:	20400068 	.word	0x20400068
  4002b4:	00401b3f 	.word	0x00401b3f
  4002b8:	00401b29 	.word	0x00401b29
  4002bc:	66666667 	.word	0x66666667

004002c0 <event_buffer_enqueue>:

void event_buffer_enqueue(EventBufferItem item) {
  4002c0:	b4f0      	push	{r4, r5, r6, r7}
  4002c2:	b084      	sub	sp, #16
  4002c4:	ac04      	add	r4, sp, #16
  4002c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
	if (event_buffer_queue.count >= EVENT_BUFFER_QUEUE_SIZE) {
  4002ca:	4b12      	ldr	r3, [pc, #72]	; (400314 <event_buffer_enqueue+0x54>)
  4002cc:	f893 639e 	ldrb.w	r6, [r3, #926]	; 0x39e
  4002d0:	2e09      	cmp	r6, #9
  4002d2:	d81b      	bhi.n	40030c <event_buffer_enqueue+0x4c>
		// Event buffer is full, can't enqueue
		return;
	}

	event_buffer_queue.items[event_buffer_queue.tail] = item;
  4002d4:	461f      	mov	r7, r3
  4002d6:	f893 439d 	ldrb.w	r4, [r3, #925]	; 0x39d
  4002da:	eb03 1504 	add.w	r5, r3, r4, lsl #4
  4002de:	f505 753f 	add.w	r5, r5, #764	; 0x2fc
  4002e2:	ab04      	add	r3, sp, #16
  4002e4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
  4002e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	event_buffer_queue.tail = (event_buffer_queue.tail + 1) % EVENT_BUFFER_QUEUE_SIZE;
  4002ec:	1c62      	adds	r2, r4, #1
  4002ee:	490a      	ldr	r1, [pc, #40]	; (400318 <event_buffer_enqueue+0x58>)
  4002f0:	fb81 3102 	smull	r3, r1, r1, r2
  4002f4:	17d3      	asrs	r3, r2, #31
  4002f6:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  4002fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4002fe:	0059      	lsls	r1, r3, #1
  400300:	1a53      	subs	r3, r2, r1
  400302:	f887 339d 	strb.w	r3, [r7, #925]	; 0x39d
	event_buffer_queue.count++;
  400306:	3601      	adds	r6, #1
  400308:	f887 639e 	strb.w	r6, [r7, #926]	; 0x39e
}
  40030c:	b004      	add	sp, #16
  40030e:	bcf0      	pop	{r4, r5, r6, r7}
  400310:	4770      	bx	lr
  400312:	bf00      	nop
  400314:	20400068 	.word	0x20400068
  400318:	66666667 	.word	0x66666667

0040031c <event_buffer_dequeue>:

EventBufferItem event_buffer_dequeue() {
  40031c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40031e:	b089      	sub	sp, #36	; 0x24
  400320:	4604      	mov	r4, r0
	if (event_buffer_queue.count > 0) {
  400322:	4b17      	ldr	r3, [pc, #92]	; (400380 <event_buffer_dequeue+0x64>)
  400324:	f893 639e 	ldrb.w	r6, [r3, #926]	; 0x39e
  400328:	b95e      	cbnz	r6, 400342 <event_buffer_dequeue+0x26>
		event_buffer_queue.count--;
		return item;
	}

	// If the queue is empty, return an item with zeros
	EventBufferItem emptyItem = {.mode = 0, .secondCounter = 0, .milliCounter = 0, .microCounter = 0, .data = {0}};
  40032a:	ab04      	add	r3, sp, #16
  40032c:	2200      	movs	r2, #0
  40032e:	9204      	str	r2, [sp, #16]
  400330:	9205      	str	r2, [sp, #20]
  400332:	9206      	str	r2, [sp, #24]
  400334:	9207      	str	r2, [sp, #28]
	return emptyItem;
  400336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  40033c:	4620      	mov	r0, r4
  40033e:	b009      	add	sp, #36	; 0x24
  400340:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EventBufferItem item = event_buffer_queue.items[event_buffer_queue.head];
  400342:	469e      	mov	lr, r3
  400344:	f893 739c 	ldrb.w	r7, [r3, #924]	; 0x39c
  400348:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40034c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
  400350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400352:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
		event_buffer_queue.head = (event_buffer_queue.head + 1) % EVENT_BUFFER_QUEUE_SIZE;
  400356:	1c7a      	adds	r2, r7, #1
  400358:	490a      	ldr	r1, [pc, #40]	; (400384 <event_buffer_dequeue+0x68>)
  40035a:	fb81 3102 	smull	r3, r1, r1, r2
  40035e:	17d3      	asrs	r3, r2, #31
  400360:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  400364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400368:	0059      	lsls	r1, r3, #1
  40036a:	1a53      	subs	r3, r2, r1
  40036c:	f88e 339c 	strb.w	r3, [lr, #924]	; 0x39c
		event_buffer_queue.count--;
  400370:	3e01      	subs	r6, #1
  400372:	f88e 639e 	strb.w	r6, [lr, #926]	; 0x39e
		return item;
  400376:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
  40037a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  40037e:	e7dd      	b.n	40033c <event_buffer_dequeue+0x20>
  400380:	20400068 	.word	0x20400068
  400384:	66666667 	.word	0x66666667

00400388 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400388:	e7fe      	b.n	400388 <Dummy_Handler>
	...

0040038c <Reset_Handler>:
{
  40038c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40038e:	4b10      	ldr	r3, [pc, #64]	; (4003d0 <Reset_Handler+0x44>)
  400390:	4a10      	ldr	r2, [pc, #64]	; (4003d4 <Reset_Handler+0x48>)
  400392:	429a      	cmp	r2, r3
  400394:	d009      	beq.n	4003aa <Reset_Handler+0x1e>
  400396:	4b0e      	ldr	r3, [pc, #56]	; (4003d0 <Reset_Handler+0x44>)
  400398:	4a0e      	ldr	r2, [pc, #56]	; (4003d4 <Reset_Handler+0x48>)
  40039a:	e003      	b.n	4003a4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  40039c:	6811      	ldr	r1, [r2, #0]
  40039e:	6019      	str	r1, [r3, #0]
  4003a0:	3304      	adds	r3, #4
  4003a2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4003a4:	490c      	ldr	r1, [pc, #48]	; (4003d8 <Reset_Handler+0x4c>)
  4003a6:	428b      	cmp	r3, r1
  4003a8:	d3f8      	bcc.n	40039c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4003aa:	4b0c      	ldr	r3, [pc, #48]	; (4003dc <Reset_Handler+0x50>)
  4003ac:	e002      	b.n	4003b4 <Reset_Handler+0x28>
                *pDest++ = 0;
  4003ae:	2200      	movs	r2, #0
  4003b0:	601a      	str	r2, [r3, #0]
  4003b2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4003b4:	4a0a      	ldr	r2, [pc, #40]	; (4003e0 <Reset_Handler+0x54>)
  4003b6:	4293      	cmp	r3, r2
  4003b8:	d3f9      	bcc.n	4003ae <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4003ba:	4a0a      	ldr	r2, [pc, #40]	; (4003e4 <Reset_Handler+0x58>)
  4003bc:	4b0a      	ldr	r3, [pc, #40]	; (4003e8 <Reset_Handler+0x5c>)
  4003be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4003c2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4003c4:	4b09      	ldr	r3, [pc, #36]	; (4003ec <Reset_Handler+0x60>)
  4003c6:	4798      	blx	r3
        main();
  4003c8:	4b09      	ldr	r3, [pc, #36]	; (4003f0 <Reset_Handler+0x64>)
  4003ca:	4798      	blx	r3
  4003cc:	e7fe      	b.n	4003cc <Reset_Handler+0x40>
  4003ce:	bf00      	nop
  4003d0:	20400000 	.word	0x20400000
  4003d4:	00401cbc 	.word	0x00401cbc
  4003d8:	2040004c 	.word	0x2040004c
  4003dc:	2040004c 	.word	0x2040004c
  4003e0:	204015bc 	.word	0x204015bc
  4003e4:	e000ed00 	.word	0xe000ed00
  4003e8:	00400000 	.word	0x00400000
  4003ec:	00401ae1 	.word	0x00401ae1
  4003f0:	004018d5 	.word	0x004018d5

004003f4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  4003f4:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003f6:	4b08      	ldr	r3, [pc, #32]	; (400418 <TIMER_0_init+0x24>)
  4003f8:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4003fa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4003fe:	d103      	bne.n	400408 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400400:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400404:	4b04      	ldr	r3, [pc, #16]	; (400418 <TIMER_0_init+0x24>)
  400406:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <TIMER_0_init+0x28>)
  40040a:	4798      	blx	r3
  40040c:	4602      	mov	r2, r0
  40040e:	4904      	ldr	r1, [pc, #16]	; (400420 <TIMER_0_init+0x2c>)
  400410:	4804      	ldr	r0, [pc, #16]	; (400424 <TIMER_0_init+0x30>)
  400412:	4b05      	ldr	r3, [pc, #20]	; (400428 <TIMER_0_init+0x34>)
  400414:	4798      	blx	r3
  400416:	bd08      	pop	{r3, pc}
  400418:	400e0600 	.word	0x400e0600
  40041c:	004012c5 	.word	0x004012c5
  400420:	4000c000 	.word	0x4000c000
  400424:	20400500 	.word	0x20400500
  400428:	00400909 	.word	0x00400909

0040042c <MICRO_Timer_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void MICRO_Timer_init(void)
{
  40042c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40042e:	4b08      	ldr	r3, [pc, #32]	; (400450 <MICRO_Timer_init+0x24>)
  400430:	699b      	ldr	r3, [r3, #24]
  400432:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  400436:	d103      	bne.n	400440 <MICRO_Timer_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400438:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40043c:	4b04      	ldr	r3, [pc, #16]	; (400450 <MICRO_Timer_init+0x24>)
  40043e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC1_CHANNEL0);
	MICRO_Timer_PORT_init();
	timer_init(&MICRO_Timer, TC1, _tc_get_timer());
  400440:	4b04      	ldr	r3, [pc, #16]	; (400454 <MICRO_Timer_init+0x28>)
  400442:	4798      	blx	r3
  400444:	4602      	mov	r2, r0
  400446:	4904      	ldr	r1, [pc, #16]	; (400458 <MICRO_Timer_init+0x2c>)
  400448:	4804      	ldr	r0, [pc, #16]	; (40045c <MICRO_Timer_init+0x30>)
  40044a:	4b05      	ldr	r3, [pc, #20]	; (400460 <MICRO_Timer_init+0x34>)
  40044c:	4798      	blx	r3
  40044e:	bd08      	pop	{r3, pc}
  400450:	400e0600 	.word	0x400e0600
  400454:	004012c5 	.word	0x004012c5
  400458:	40010000 	.word	0x40010000
  40045c:	20400474 	.word	0x20400474
  400460:	00400909 	.word	0x00400909

00400464 <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400464:	4b11      	ldr	r3, [pc, #68]	; (4004ac <SPI_0_PORT_init+0x48>)
  400466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400468:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40046c:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40046e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400470:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400474:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40047a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40047c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40047e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  400482:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400484:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400486:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40048a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40048c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400490:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400494:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400498:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40049a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40049c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4004a0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004a6:	605a      	str	r2, [r3, #4]
  4004a8:	4770      	bx	lr
  4004aa:	bf00      	nop
  4004ac:	400e1400 	.word	0x400e1400

004004b0 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004b0:	4b04      	ldr	r3, [pc, #16]	; (4004c4 <SPI_0_CLOCK_init+0x14>)
  4004b2:	699b      	ldr	r3, [r3, #24]
  4004b4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4004b8:	d103      	bne.n	4004c2 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4004ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004be:	4b01      	ldr	r3, [pc, #4]	; (4004c4 <SPI_0_CLOCK_init+0x14>)
  4004c0:	611a      	str	r2, [r3, #16]
  4004c2:	4770      	bx	lr
  4004c4:	400e0600 	.word	0x400e0600

004004c8 <SPI_0_init>:
{
  4004c8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4004ca:	4b08      	ldr	r3, [pc, #32]	; (4004ec <SPI_0_init+0x24>)
  4004cc:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4004ce:	4b08      	ldr	r3, [pc, #32]	; (4004f0 <SPI_0_init+0x28>)
  4004d0:	4798      	blx	r3
  4004d2:	4c08      	ldr	r4, [pc, #32]	; (4004f4 <SPI_0_init+0x2c>)
  4004d4:	4601      	mov	r1, r0
  4004d6:	4620      	mov	r0, r4
  4004d8:	4b07      	ldr	r3, [pc, #28]	; (4004f8 <SPI_0_init+0x30>)
  4004da:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4004dc:	4907      	ldr	r1, [pc, #28]	; (4004fc <SPI_0_init+0x34>)
  4004de:	4620      	mov	r0, r4
  4004e0:	4b07      	ldr	r3, [pc, #28]	; (400500 <SPI_0_init+0x38>)
  4004e2:	4798      	blx	r3
	SPI_0_PORT_init();
  4004e4:	4b07      	ldr	r3, [pc, #28]	; (400504 <SPI_0_init+0x3c>)
  4004e6:	4798      	blx	r3
  4004e8:	bd10      	pop	{r4, pc}
  4004ea:	bf00      	nop
  4004ec:	004004b1 	.word	0x004004b1
  4004f0:	00401159 	.word	0x00401159
  4004f4:	20400498 	.word	0x20400498
  4004f8:	004006d5 	.word	0x004006d5
  4004fc:	40008000 	.word	0x40008000
  400500:	004006f5 	.word	0x004006f5
  400504:	00400465 	.word	0x00400465

00400508 <RAND_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400508:	4b05      	ldr	r3, [pc, #20]	; (400520 <RAND_0_CLOCK_init+0x18>)
  40050a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40050e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  400512:	d104      	bne.n	40051e <RAND_0_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400518:	4b01      	ldr	r3, [pc, #4]	; (400520 <RAND_0_CLOCK_init+0x18>)
  40051a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40051e:	4770      	bx	lr
  400520:	400e0600 	.word	0x400e0600

00400524 <RAND_0_init>:
{
	_pmc_enable_periph_clock(ID_TRNG);
}

void RAND_0_init(void)
{
  400524:	b508      	push	{r3, lr}
	RAND_0_CLOCK_init();
  400526:	4b03      	ldr	r3, [pc, #12]	; (400534 <RAND_0_init+0x10>)
  400528:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
  40052a:	4903      	ldr	r1, [pc, #12]	; (400538 <RAND_0_init+0x14>)
  40052c:	4803      	ldr	r0, [pc, #12]	; (40053c <RAND_0_init+0x18>)
  40052e:	4b04      	ldr	r3, [pc, #16]	; (400540 <RAND_0_init+0x1c>)
  400530:	4798      	blx	r3
  400532:	bd08      	pop	{r3, pc}
  400534:	00400509 	.word	0x00400509
  400538:	40070000 	.word	0x40070000
  40053c:	20400490 	.word	0x20400490
  400540:	004006a9 	.word	0x004006a9

00400544 <USART_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400544:	4b04      	ldr	r3, [pc, #16]	; (400558 <USART_0_CLOCK_init+0x14>)
  400546:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400548:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40054c:	d103      	bne.n	400556 <USART_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40054e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400552:	4b01      	ldr	r3, [pc, #4]	; (400558 <USART_0_CLOCK_init+0x14>)
  400554:	611a      	str	r2, [r3, #16]
  400556:	4770      	bx	lr
  400558:	400e0600 	.word	0x400e0600

0040055c <USART_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40055c:	4b0f      	ldr	r3, [pc, #60]	; (40059c <USART_0_PORT_init+0x40>)
  40055e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400560:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400564:	671a      	str	r2, [r3, #112]	; 0x70
  400566:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400568:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40056c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40056e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400572:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400574:	4a0a      	ldr	r2, [pc, #40]	; (4005a0 <USART_0_PORT_init+0x44>)
  400576:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40057a:	f043 0310 	orr.w	r3, r3, #16
  40057e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400582:	4b08      	ldr	r3, [pc, #32]	; (4005a4 <USART_0_PORT_init+0x48>)
  400584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400586:	f042 0210 	orr.w	r2, r2, #16
  40058a:	671a      	str	r2, [r3, #112]	; 0x70
  40058c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40058e:	f042 0210 	orr.w	r2, r2, #16
  400592:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400594:	2210      	movs	r2, #16
  400596:	605a      	str	r2, [r3, #4]
  400598:	4770      	bx	lr
  40059a:	bf00      	nop
  40059c:	400e0e00 	.word	0x400e0e00
  4005a0:	40088000 	.word	0x40088000
  4005a4:	400e1000 	.word	0x400e1000

004005a8 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
  4005a8:	b510      	push	{r4, lr}
  4005aa:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
  4005ac:	4b07      	ldr	r3, [pc, #28]	; (4005cc <USART_0_init+0x24>)
  4005ae:	4798      	blx	r3
	USART_0_PORT_init();
  4005b0:	4b07      	ldr	r3, [pc, #28]	; (4005d0 <USART_0_init+0x28>)
  4005b2:	4798      	blx	r3
	usart_async_init(&USART_0, USART1, USART_0_buffer, USART_0_BUFFER_SIZE, _usart_get_usart_async());
  4005b4:	4b07      	ldr	r3, [pc, #28]	; (4005d4 <USART_0_init+0x2c>)
  4005b6:	4798      	blx	r3
  4005b8:	9000      	str	r0, [sp, #0]
  4005ba:	2310      	movs	r3, #16
  4005bc:	4a06      	ldr	r2, [pc, #24]	; (4005d8 <USART_0_init+0x30>)
  4005be:	4907      	ldr	r1, [pc, #28]	; (4005dc <USART_0_init+0x34>)
  4005c0:	4807      	ldr	r0, [pc, #28]	; (4005e0 <USART_0_init+0x38>)
  4005c2:	4c08      	ldr	r4, [pc, #32]	; (4005e4 <USART_0_init+0x3c>)
  4005c4:	47a0      	blx	r4
}
  4005c6:	b002      	add	sp, #8
  4005c8:	bd10      	pop	{r4, pc}
  4005ca:	bf00      	nop
  4005cc:	00400545 	.word	0x00400545
  4005d0:	0040055d 	.word	0x0040055d
  4005d4:	004016c5 	.word	0x004016c5
  4005d8:	20400408 	.word	0x20400408
  4005dc:	40028000 	.word	0x40028000
  4005e0:	204004b0 	.word	0x204004b0
  4005e4:	00400bb9 	.word	0x00400bb9

004005e8 <system_init>:

void system_init(void)
{
  4005e8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4005ea:	4b09      	ldr	r3, [pc, #36]	; (400610 <system_init+0x28>)
  4005ec:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4005ee:	4a09      	ldr	r2, [pc, #36]	; (400614 <system_init+0x2c>)
  4005f0:	6853      	ldr	r3, [r2, #4]
  4005f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4005f6:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  4005f8:	4b07      	ldr	r3, [pc, #28]	; (400618 <system_init+0x30>)
  4005fa:	4798      	blx	r3
	TIMER_0_init();
  4005fc:	4b07      	ldr	r3, [pc, #28]	; (40061c <system_init+0x34>)
  4005fe:	4798      	blx	r3
	MICRO_Timer_init();
  400600:	4b07      	ldr	r3, [pc, #28]	; (400620 <system_init+0x38>)
  400602:	4798      	blx	r3

	RAND_0_init();
  400604:	4b07      	ldr	r3, [pc, #28]	; (400624 <system_init+0x3c>)
  400606:	4798      	blx	r3
	USART_0_init();
  400608:	4b07      	ldr	r3, [pc, #28]	; (400628 <system_init+0x40>)
  40060a:	4798      	blx	r3
  40060c:	bd08      	pop	{r3, pc}
  40060e:	bf00      	nop
  400610:	00400e59 	.word	0x00400e59
  400614:	400e1850 	.word	0x400e1850
  400618:	004004c9 	.word	0x004004c9
  40061c:	004003f5 	.word	0x004003f5
  400620:	0040042d 	.word	0x0040042d
  400624:	00400525 	.word	0x00400525
  400628:	004005a9 	.word	0x004005a9

0040062c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40062c:	f3ef 8310 	mrs	r3, PRIMASK
  400630:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400632:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400634:	f3bf 8f5f 	dmb	sy
  400638:	4770      	bx	lr

0040063a <atomic_leave_critical>:
  40063a:	f3bf 8f5f 	dmb	sy
  40063e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400640:	f383 8810 	msr	PRIMASK, r3
  400644:	4770      	bx	lr
	...

00400648 <io_write>:
  400648:	b570      	push	{r4, r5, r6, lr}
  40064a:	4616      	mov	r6, r2
  40064c:	4604      	mov	r4, r0
  40064e:	460d      	mov	r5, r1
  400650:	2800      	cmp	r0, #0
  400652:	bf18      	it	ne
  400654:	2900      	cmpne	r1, #0
  400656:	bf14      	ite	ne
  400658:	2001      	movne	r0, #1
  40065a:	2000      	moveq	r0, #0
  40065c:	2234      	movs	r2, #52	; 0x34
  40065e:	4904      	ldr	r1, [pc, #16]	; (400670 <io_write+0x28>)
  400660:	4b04      	ldr	r3, [pc, #16]	; (400674 <io_write+0x2c>)
  400662:	4798      	blx	r3
  400664:	6823      	ldr	r3, [r4, #0]
  400666:	4632      	mov	r2, r6
  400668:	4629      	mov	r1, r5
  40066a:	4620      	mov	r0, r4
  40066c:	4798      	blx	r3
  40066e:	bd70      	pop	{r4, r5, r6, pc}
  400670:	00401b50 	.word	0x00401b50
  400674:	00400ced 	.word	0x00400ced

00400678 <io_read>:
  400678:	b570      	push	{r4, r5, r6, lr}
  40067a:	4616      	mov	r6, r2
  40067c:	4604      	mov	r4, r0
  40067e:	460d      	mov	r5, r1
  400680:	2800      	cmp	r0, #0
  400682:	bf18      	it	ne
  400684:	2900      	cmpne	r1, #0
  400686:	bf14      	ite	ne
  400688:	2001      	movne	r0, #1
  40068a:	2000      	moveq	r0, #0
  40068c:	223d      	movs	r2, #61	; 0x3d
  40068e:	4904      	ldr	r1, [pc, #16]	; (4006a0 <io_read+0x28>)
  400690:	4b04      	ldr	r3, [pc, #16]	; (4006a4 <io_read+0x2c>)
  400692:	4798      	blx	r3
  400694:	6863      	ldr	r3, [r4, #4]
  400696:	4632      	mov	r2, r6
  400698:	4629      	mov	r1, r5
  40069a:	4620      	mov	r0, r4
  40069c:	4798      	blx	r3
  40069e:	bd70      	pop	{r4, r5, r6, pc}
  4006a0:	00401b50 	.word	0x00401b50
  4006a4:	00400ced 	.word	0x00400ced

004006a8 <rand_sync_init>:
  4006a8:	b538      	push	{r3, r4, r5, lr}
  4006aa:	460d      	mov	r5, r1
  4006ac:	4604      	mov	r4, r0
  4006ae:	2229      	movs	r2, #41	; 0x29
  4006b0:	4905      	ldr	r1, [pc, #20]	; (4006c8 <rand_sync_init+0x20>)
  4006b2:	3000      	adds	r0, #0
  4006b4:	bf18      	it	ne
  4006b6:	2001      	movne	r0, #1
  4006b8:	4b04      	ldr	r3, [pc, #16]	; (4006cc <rand_sync_init+0x24>)
  4006ba:	4798      	blx	r3
  4006bc:	4629      	mov	r1, r5
  4006be:	4620      	mov	r0, r4
  4006c0:	4b03      	ldr	r3, [pc, #12]	; (4006d0 <rand_sync_init+0x28>)
  4006c2:	4798      	blx	r3
  4006c4:	bd38      	pop	{r3, r4, r5, pc}
  4006c6:	bf00      	nop
  4006c8:	00401b64 	.word	0x00401b64
  4006cc:	00400ced 	.word	0x00400ced
  4006d0:	004012f1 	.word	0x004012f1

004006d4 <spi_m_sync_set_func_ptr>:
  4006d4:	b538      	push	{r3, r4, r5, lr}
  4006d6:	460d      	mov	r5, r1
  4006d8:	4604      	mov	r4, r0
  4006da:	2239      	movs	r2, #57	; 0x39
  4006dc:	4903      	ldr	r1, [pc, #12]	; (4006ec <spi_m_sync_set_func_ptr+0x18>)
  4006de:	3000      	adds	r0, #0
  4006e0:	bf18      	it	ne
  4006e2:	2001      	movne	r0, #1
  4006e4:	4b02      	ldr	r3, [pc, #8]	; (4006f0 <spi_m_sync_set_func_ptr+0x1c>)
  4006e6:	4798      	blx	r3
  4006e8:	6025      	str	r5, [r4, #0]
  4006ea:	bd38      	pop	{r3, r4, r5, pc}
  4006ec:	00401b80 	.word	0x00401b80
  4006f0:	00400ced 	.word	0x00400ced

004006f4 <spi_m_sync_init>:
  4006f4:	b538      	push	{r3, r4, r5, lr}
  4006f6:	4604      	mov	r4, r0
  4006f8:	460d      	mov	r5, r1
  4006fa:	2800      	cmp	r0, #0
  4006fc:	bf18      	it	ne
  4006fe:	2900      	cmpne	r1, #0
  400700:	bf14      	ite	ne
  400702:	2001      	movne	r0, #1
  400704:	2000      	moveq	r0, #0
  400706:	2240      	movs	r2, #64	; 0x40
  400708:	4909      	ldr	r1, [pc, #36]	; (400730 <spi_m_sync_init+0x3c>)
  40070a:	4b0a      	ldr	r3, [pc, #40]	; (400734 <spi_m_sync_init+0x40>)
  40070c:	4798      	blx	r3
  40070e:	4620      	mov	r0, r4
  400710:	f840 5f04 	str.w	r5, [r0, #4]!
  400714:	4629      	mov	r1, r5
  400716:	4b08      	ldr	r3, [pc, #32]	; (400738 <spi_m_sync_init+0x44>)
  400718:	4798      	blx	r3
  40071a:	2800      	cmp	r0, #0
  40071c:	db07      	blt.n	40072e <spi_m_sync_init+0x3a>
  40071e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400722:	82a3      	strh	r3, [r4, #20]
  400724:	4b05      	ldr	r3, [pc, #20]	; (40073c <spi_m_sync_init+0x48>)
  400726:	6123      	str	r3, [r4, #16]
  400728:	4b05      	ldr	r3, [pc, #20]	; (400740 <spi_m_sync_init+0x4c>)
  40072a:	60e3      	str	r3, [r4, #12]
  40072c:	2000      	movs	r0, #0
  40072e:	bd38      	pop	{r3, r4, r5, pc}
  400730:	00401b80 	.word	0x00401b80
  400734:	00400ced 	.word	0x00400ced
  400738:	00400f7d 	.word	0x00400f7d
  40073c:	004007e9 	.word	0x004007e9
  400740:	004007ad 	.word	0x004007ad

00400744 <spi_m_sync_enable>:
  400744:	b510      	push	{r4, lr}
  400746:	4604      	mov	r4, r0
  400748:	2257      	movs	r2, #87	; 0x57
  40074a:	4905      	ldr	r1, [pc, #20]	; (400760 <spi_m_sync_enable+0x1c>)
  40074c:	3000      	adds	r0, #0
  40074e:	bf18      	it	ne
  400750:	2001      	movne	r0, #1
  400752:	4b04      	ldr	r3, [pc, #16]	; (400764 <spi_m_sync_enable+0x20>)
  400754:	4798      	blx	r3
  400756:	1d20      	adds	r0, r4, #4
  400758:	4b03      	ldr	r3, [pc, #12]	; (400768 <spi_m_sync_enable+0x24>)
  40075a:	4798      	blx	r3
  40075c:	bd10      	pop	{r4, pc}
  40075e:	bf00      	nop
  400760:	00401b80 	.word	0x00401b80
  400764:	00400ced 	.word	0x00400ced
  400768:	00401025 	.word	0x00401025

0040076c <spi_m_sync_transfer>:
  40076c:	b530      	push	{r4, r5, lr}
  40076e:	b085      	sub	sp, #20
  400770:	4605      	mov	r5, r0
  400772:	460c      	mov	r4, r1
  400774:	2800      	cmp	r0, #0
  400776:	bf18      	it	ne
  400778:	2900      	cmpne	r1, #0
  40077a:	bf14      	ite	ne
  40077c:	2001      	movne	r0, #1
  40077e:	2000      	moveq	r0, #0
  400780:	22b3      	movs	r2, #179	; 0xb3
  400782:	4907      	ldr	r1, [pc, #28]	; (4007a0 <spi_m_sync_transfer+0x34>)
  400784:	4b07      	ldr	r3, [pc, #28]	; (4007a4 <spi_m_sync_transfer+0x38>)
  400786:	4798      	blx	r3
  400788:	6823      	ldr	r3, [r4, #0]
  40078a:	9301      	str	r3, [sp, #4]
  40078c:	6863      	ldr	r3, [r4, #4]
  40078e:	9302      	str	r3, [sp, #8]
  400790:	68a3      	ldr	r3, [r4, #8]
  400792:	9303      	str	r3, [sp, #12]
  400794:	a901      	add	r1, sp, #4
  400796:	1d28      	adds	r0, r5, #4
  400798:	4b03      	ldr	r3, [pc, #12]	; (4007a8 <spi_m_sync_transfer+0x3c>)
  40079a:	4798      	blx	r3
  40079c:	b005      	add	sp, #20
  40079e:	bd30      	pop	{r4, r5, pc}
  4007a0:	00401b80 	.word	0x00401b80
  4007a4:	00400ced 	.word	0x00400ced
  4007a8:	00401059 	.word	0x00401059

004007ac <_spi_m_sync_io_write>:
  4007ac:	b570      	push	{r4, r5, r6, lr}
  4007ae:	b084      	sub	sp, #16
  4007b0:	460e      	mov	r6, r1
  4007b2:	4615      	mov	r5, r2
  4007b4:	4604      	mov	r4, r0
  4007b6:	22a3      	movs	r2, #163	; 0xa3
  4007b8:	4908      	ldr	r1, [pc, #32]	; (4007dc <_spi_m_sync_io_write+0x30>)
  4007ba:	3000      	adds	r0, #0
  4007bc:	bf18      	it	ne
  4007be:	2001      	movne	r0, #1
  4007c0:	4b07      	ldr	r3, [pc, #28]	; (4007e0 <_spi_m_sync_io_write+0x34>)
  4007c2:	4798      	blx	r3
  4007c4:	2300      	movs	r3, #0
  4007c6:	9302      	str	r3, [sp, #8]
  4007c8:	9601      	str	r6, [sp, #4]
  4007ca:	9503      	str	r5, [sp, #12]
  4007cc:	a901      	add	r1, sp, #4
  4007ce:	f1a4 000c 	sub.w	r0, r4, #12
  4007d2:	4b04      	ldr	r3, [pc, #16]	; (4007e4 <_spi_m_sync_io_write+0x38>)
  4007d4:	4798      	blx	r3
  4007d6:	b004      	add	sp, #16
  4007d8:	bd70      	pop	{r4, r5, r6, pc}
  4007da:	bf00      	nop
  4007dc:	00401b80 	.word	0x00401b80
  4007e0:	00400ced 	.word	0x00400ced
  4007e4:	0040076d 	.word	0x0040076d

004007e8 <_spi_m_sync_io_read>:
  4007e8:	b570      	push	{r4, r5, r6, lr}
  4007ea:	b084      	sub	sp, #16
  4007ec:	460e      	mov	r6, r1
  4007ee:	4615      	mov	r5, r2
  4007f0:	4604      	mov	r4, r0
  4007f2:	2287      	movs	r2, #135	; 0x87
  4007f4:	4908      	ldr	r1, [pc, #32]	; (400818 <_spi_m_sync_io_read+0x30>)
  4007f6:	3000      	adds	r0, #0
  4007f8:	bf18      	it	ne
  4007fa:	2001      	movne	r0, #1
  4007fc:	4b07      	ldr	r3, [pc, #28]	; (40081c <_spi_m_sync_io_read+0x34>)
  4007fe:	4798      	blx	r3
  400800:	9602      	str	r6, [sp, #8]
  400802:	2300      	movs	r3, #0
  400804:	9301      	str	r3, [sp, #4]
  400806:	9503      	str	r5, [sp, #12]
  400808:	a901      	add	r1, sp, #4
  40080a:	f1a4 000c 	sub.w	r0, r4, #12
  40080e:	4b04      	ldr	r3, [pc, #16]	; (400820 <_spi_m_sync_io_read+0x38>)
  400810:	4798      	blx	r3
  400812:	b004      	add	sp, #16
  400814:	bd70      	pop	{r4, r5, r6, pc}
  400816:	bf00      	nop
  400818:	00401b80 	.word	0x00401b80
  40081c:	00400ced 	.word	0x00400ced
  400820:	0040076d 	.word	0x0040076d

00400824 <spi_m_sync_get_io_descriptor>:
  400824:	b538      	push	{r3, r4, r5, lr}
  400826:	4604      	mov	r4, r0
  400828:	460d      	mov	r5, r1
  40082a:	2800      	cmp	r0, #0
  40082c:	bf18      	it	ne
  40082e:	2900      	cmpne	r1, #0
  400830:	bf14      	ite	ne
  400832:	2001      	movne	r0, #1
  400834:	2000      	moveq	r0, #0
  400836:	22bd      	movs	r2, #189	; 0xbd
  400838:	4903      	ldr	r1, [pc, #12]	; (400848 <spi_m_sync_get_io_descriptor+0x24>)
  40083a:	4b04      	ldr	r3, [pc, #16]	; (40084c <spi_m_sync_get_io_descriptor+0x28>)
  40083c:	4798      	blx	r3
  40083e:	340c      	adds	r4, #12
  400840:	602c      	str	r4, [r5, #0]
  400842:	2000      	movs	r0, #0
  400844:	bd38      	pop	{r3, r4, r5, pc}
  400846:	bf00      	nop
  400848:	00401b80 	.word	0x00401b80
  40084c:	00400ced 	.word	0x00400ced

00400850 <timer_add_timer_task>:
  400850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400852:	6807      	ldr	r7, [r0, #0]
  400854:	b117      	cbz	r7, 40085c <timer_add_timer_task+0xc>
  400856:	463c      	mov	r4, r7
  400858:	2600      	movs	r6, #0
  40085a:	e00b      	b.n	400874 <timer_add_timer_task+0x24>
  40085c:	4b0e      	ldr	r3, [pc, #56]	; (400898 <timer_add_timer_task+0x48>)
  40085e:	4798      	blx	r3
  400860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400862:	68a5      	ldr	r5, [r4, #8]
  400864:	442b      	add	r3, r5
  400866:	1a9b      	subs	r3, r3, r2
  400868:	3301      	adds	r3, #1
  40086a:	688d      	ldr	r5, [r1, #8]
  40086c:	42ab      	cmp	r3, r5
  40086e:	d209      	bcs.n	400884 <timer_add_timer_task+0x34>
  400870:	4626      	mov	r6, r4
  400872:	6824      	ldr	r4, [r4, #0]
  400874:	b134      	cbz	r4, 400884 <timer_add_timer_task+0x34>
  400876:	6863      	ldr	r3, [r4, #4]
  400878:	4293      	cmp	r3, r2
  40087a:	d8f2      	bhi.n	400862 <timer_add_timer_task+0x12>
  40087c:	68a5      	ldr	r5, [r4, #8]
  40087e:	1a9b      	subs	r3, r3, r2
  400880:	442b      	add	r3, r5
  400882:	e7f2      	b.n	40086a <timer_add_timer_task+0x1a>
  400884:	42bc      	cmp	r4, r7
  400886:	d003      	beq.n	400890 <timer_add_timer_task+0x40>
  400888:	4630      	mov	r0, r6
  40088a:	4b04      	ldr	r3, [pc, #16]	; (40089c <timer_add_timer_task+0x4c>)
  40088c:	4798      	blx	r3
  40088e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400890:	4b01      	ldr	r3, [pc, #4]	; (400898 <timer_add_timer_task+0x48>)
  400892:	4798      	blx	r3
  400894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400896:	bf00      	nop
  400898:	00400d09 	.word	0x00400d09
  40089c:	00400d35 	.word	0x00400d35

004008a0 <timer_process_counted>:
  4008a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4008a2:	6944      	ldr	r4, [r0, #20]
  4008a4:	6906      	ldr	r6, [r0, #16]
  4008a6:	3601      	adds	r6, #1
  4008a8:	6106      	str	r6, [r0, #16]
  4008aa:	7e03      	ldrb	r3, [r0, #24]
  4008ac:	f013 0f01 	tst.w	r3, #1
  4008b0:	d105      	bne.n	4008be <timer_process_counted+0x1e>
  4008b2:	7e03      	ldrb	r3, [r0, #24]
  4008b4:	f013 0f02 	tst.w	r3, #2
  4008b8:	d101      	bne.n	4008be <timer_process_counted+0x1e>
  4008ba:	4605      	mov	r5, r0
  4008bc:	e009      	b.n	4008d2 <timer_process_counted+0x32>
  4008be:	7e03      	ldrb	r3, [r0, #24]
  4008c0:	f043 0302 	orr.w	r3, r3, #2
  4008c4:	7603      	strb	r3, [r0, #24]
  4008c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4008c8:	696f      	ldr	r7, [r5, #20]
  4008ca:	68e3      	ldr	r3, [r4, #12]
  4008cc:	4620      	mov	r0, r4
  4008ce:	4798      	blx	r3
  4008d0:	463c      	mov	r4, r7
  4008d2:	b19c      	cbz	r4, 4008fc <timer_process_counted+0x5c>
  4008d4:	6863      	ldr	r3, [r4, #4]
  4008d6:	1af3      	subs	r3, r6, r3
  4008d8:	68a2      	ldr	r2, [r4, #8]
  4008da:	4293      	cmp	r3, r2
  4008dc:	d30e      	bcc.n	4008fc <timer_process_counted+0x5c>
  4008de:	f105 0714 	add.w	r7, r5, #20
  4008e2:	4638      	mov	r0, r7
  4008e4:	4b06      	ldr	r3, [pc, #24]	; (400900 <timer_process_counted+0x60>)
  4008e6:	4798      	blx	r3
  4008e8:	7c23      	ldrb	r3, [r4, #16]
  4008ea:	2b01      	cmp	r3, #1
  4008ec:	d1ec      	bne.n	4008c8 <timer_process_counted+0x28>
  4008ee:	6066      	str	r6, [r4, #4]
  4008f0:	4632      	mov	r2, r6
  4008f2:	4621      	mov	r1, r4
  4008f4:	4638      	mov	r0, r7
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <timer_process_counted+0x64>)
  4008f8:	4798      	blx	r3
  4008fa:	e7e5      	b.n	4008c8 <timer_process_counted+0x28>
  4008fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4008fe:	bf00      	nop
  400900:	00400d3d 	.word	0x00400d3d
  400904:	00400851 	.word	0x00400851

00400908 <timer_init>:
  400908:	b538      	push	{r3, r4, r5, lr}
  40090a:	4604      	mov	r4, r0
  40090c:	460d      	mov	r5, r1
  40090e:	2800      	cmp	r0, #0
  400910:	bf18      	it	ne
  400912:	2900      	cmpne	r1, #0
  400914:	bf14      	ite	ne
  400916:	2001      	movne	r0, #1
  400918:	2000      	moveq	r0, #0
  40091a:	223b      	movs	r2, #59	; 0x3b
  40091c:	4905      	ldr	r1, [pc, #20]	; (400934 <timer_init+0x2c>)
  40091e:	4b06      	ldr	r3, [pc, #24]	; (400938 <timer_init+0x30>)
  400920:	4798      	blx	r3
  400922:	4629      	mov	r1, r5
  400924:	4620      	mov	r0, r4
  400926:	4b05      	ldr	r3, [pc, #20]	; (40093c <timer_init+0x34>)
  400928:	4798      	blx	r3
  40092a:	2000      	movs	r0, #0
  40092c:	6120      	str	r0, [r4, #16]
  40092e:	4b04      	ldr	r3, [pc, #16]	; (400940 <timer_init+0x38>)
  400930:	6023      	str	r3, [r4, #0]
  400932:	bd38      	pop	{r3, r4, r5, pc}
  400934:	00401b9c 	.word	0x00401b9c
  400938:	00400ced 	.word	0x00400ced
  40093c:	004011d5 	.word	0x004011d5
  400940:	004008a1 	.word	0x004008a1

00400944 <timer_start>:
  400944:	b510      	push	{r4, lr}
  400946:	4604      	mov	r4, r0
  400948:	2253      	movs	r2, #83	; 0x53
  40094a:	4909      	ldr	r1, [pc, #36]	; (400970 <timer_start+0x2c>)
  40094c:	3000      	adds	r0, #0
  40094e:	bf18      	it	ne
  400950:	2001      	movne	r0, #1
  400952:	4b08      	ldr	r3, [pc, #32]	; (400974 <timer_start+0x30>)
  400954:	4798      	blx	r3
  400956:	4620      	mov	r0, r4
  400958:	4b07      	ldr	r3, [pc, #28]	; (400978 <timer_start+0x34>)
  40095a:	4798      	blx	r3
  40095c:	b920      	cbnz	r0, 400968 <timer_start+0x24>
  40095e:	4620      	mov	r0, r4
  400960:	4b06      	ldr	r3, [pc, #24]	; (40097c <timer_start+0x38>)
  400962:	4798      	blx	r3
  400964:	2000      	movs	r0, #0
  400966:	bd10      	pop	{r4, pc}
  400968:	f06f 0010 	mvn.w	r0, #16
  40096c:	bd10      	pop	{r4, pc}
  40096e:	bf00      	nop
  400970:	00401b9c 	.word	0x00401b9c
  400974:	00400ced 	.word	0x00400ced
  400978:	004012a1 	.word	0x004012a1
  40097c:	00401291 	.word	0x00401291

00400980 <timer_stop>:
  400980:	b510      	push	{r4, lr}
  400982:	4604      	mov	r4, r0
  400984:	2261      	movs	r2, #97	; 0x61
  400986:	4909      	ldr	r1, [pc, #36]	; (4009ac <timer_stop+0x2c>)
  400988:	3000      	adds	r0, #0
  40098a:	bf18      	it	ne
  40098c:	2001      	movne	r0, #1
  40098e:	4b08      	ldr	r3, [pc, #32]	; (4009b0 <timer_stop+0x30>)
  400990:	4798      	blx	r3
  400992:	4620      	mov	r0, r4
  400994:	4b07      	ldr	r3, [pc, #28]	; (4009b4 <timer_stop+0x34>)
  400996:	4798      	blx	r3
  400998:	b120      	cbz	r0, 4009a4 <timer_stop+0x24>
  40099a:	4620      	mov	r0, r4
  40099c:	4b06      	ldr	r3, [pc, #24]	; (4009b8 <timer_stop+0x38>)
  40099e:	4798      	blx	r3
  4009a0:	2000      	movs	r0, #0
  4009a2:	bd10      	pop	{r4, pc}
  4009a4:	f06f 0010 	mvn.w	r0, #16
  4009a8:	bd10      	pop	{r4, pc}
  4009aa:	bf00      	nop
  4009ac:	00401b9c 	.word	0x00401b9c
  4009b0:	00400ced 	.word	0x00400ced
  4009b4:	004012a1 	.word	0x004012a1
  4009b8:	00401299 	.word	0x00401299

004009bc <timer_add_task>:
  4009bc:	b570      	push	{r4, r5, r6, lr}
  4009be:	b082      	sub	sp, #8
  4009c0:	4604      	mov	r4, r0
  4009c2:	460d      	mov	r5, r1
  4009c4:	2800      	cmp	r0, #0
  4009c6:	bf18      	it	ne
  4009c8:	2900      	cmpne	r1, #0
  4009ca:	bf14      	ite	ne
  4009cc:	2001      	movne	r0, #1
  4009ce:	2000      	moveq	r0, #0
  4009d0:	227a      	movs	r2, #122	; 0x7a
  4009d2:	491d      	ldr	r1, [pc, #116]	; (400a48 <timer_add_task+0x8c>)
  4009d4:	4b1d      	ldr	r3, [pc, #116]	; (400a4c <timer_add_task+0x90>)
  4009d6:	4798      	blx	r3
  4009d8:	7e23      	ldrb	r3, [r4, #24]
  4009da:	f043 0301 	orr.w	r3, r3, #1
  4009de:	7623      	strb	r3, [r4, #24]
  4009e0:	f104 0614 	add.w	r6, r4, #20
  4009e4:	4629      	mov	r1, r5
  4009e6:	4630      	mov	r0, r6
  4009e8:	4b19      	ldr	r3, [pc, #100]	; (400a50 <timer_add_task+0x94>)
  4009ea:	4798      	blx	r3
  4009ec:	b988      	cbnz	r0, 400a12 <timer_add_task+0x56>
  4009ee:	6923      	ldr	r3, [r4, #16]
  4009f0:	606b      	str	r3, [r5, #4]
  4009f2:	6922      	ldr	r2, [r4, #16]
  4009f4:	4629      	mov	r1, r5
  4009f6:	4630      	mov	r0, r6
  4009f8:	4b16      	ldr	r3, [pc, #88]	; (400a54 <timer_add_task+0x98>)
  4009fa:	4798      	blx	r3
  4009fc:	7e23      	ldrb	r3, [r4, #24]
  4009fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400a02:	7623      	strb	r3, [r4, #24]
  400a04:	7e23      	ldrb	r3, [r4, #24]
  400a06:	f013 0f02 	tst.w	r3, #2
  400a0a:	d10e      	bne.n	400a2a <timer_add_task+0x6e>
  400a0c:	2000      	movs	r0, #0
  400a0e:	b002      	add	sp, #8
  400a10:	bd70      	pop	{r4, r5, r6, pc}
  400a12:	7e23      	ldrb	r3, [r4, #24]
  400a14:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400a18:	7623      	strb	r3, [r4, #24]
  400a1a:	227f      	movs	r2, #127	; 0x7f
  400a1c:	490a      	ldr	r1, [pc, #40]	; (400a48 <timer_add_task+0x8c>)
  400a1e:	2000      	movs	r0, #0
  400a20:	4b0a      	ldr	r3, [pc, #40]	; (400a4c <timer_add_task+0x90>)
  400a22:	4798      	blx	r3
  400a24:	f06f 0011 	mvn.w	r0, #17
  400a28:	e7f1      	b.n	400a0e <timer_add_task+0x52>
  400a2a:	a801      	add	r0, sp, #4
  400a2c:	4b0a      	ldr	r3, [pc, #40]	; (400a58 <timer_add_task+0x9c>)
  400a2e:	4798      	blx	r3
  400a30:	7e23      	ldrb	r3, [r4, #24]
  400a32:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400a36:	7623      	strb	r3, [r4, #24]
  400a38:	4620      	mov	r0, r4
  400a3a:	4b08      	ldr	r3, [pc, #32]	; (400a5c <timer_add_task+0xa0>)
  400a3c:	4798      	blx	r3
  400a3e:	a801      	add	r0, sp, #4
  400a40:	4b07      	ldr	r3, [pc, #28]	; (400a60 <timer_add_task+0xa4>)
  400a42:	4798      	blx	r3
  400a44:	2000      	movs	r0, #0
  400a46:	e7e2      	b.n	400a0e <timer_add_task+0x52>
  400a48:	00401b9c 	.word	0x00401b9c
  400a4c:	00400ced 	.word	0x00400ced
  400a50:	00400cf3 	.word	0x00400cf3
  400a54:	00400851 	.word	0x00400851
  400a58:	0040062d 	.word	0x0040062d
  400a5c:	004012ad 	.word	0x004012ad
  400a60:	0040063b 	.word	0x0040063b

00400a64 <usart_transmission_complete>:
  400a64:	b508      	push	{r3, lr}
  400a66:	2300      	movs	r3, #0
  400a68:	6283      	str	r3, [r0, #40]	; 0x28
  400a6a:	69c3      	ldr	r3, [r0, #28]
  400a6c:	b11b      	cbz	r3, 400a76 <usart_transmission_complete+0x12>
  400a6e:	f1a0 0208 	sub.w	r2, r0, #8
  400a72:	4610      	mov	r0, r2
  400a74:	4798      	blx	r3
  400a76:	bd08      	pop	{r3, pc}

00400a78 <usart_error>:
  400a78:	b508      	push	{r3, lr}
  400a7a:	2300      	movs	r3, #0
  400a7c:	6283      	str	r3, [r0, #40]	; 0x28
  400a7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400a80:	b11b      	cbz	r3, 400a8a <usart_error+0x12>
  400a82:	f1a0 0208 	sub.w	r2, r0, #8
  400a86:	4610      	mov	r0, r2
  400a88:	4798      	blx	r3
  400a8a:	bd08      	pop	{r3, pc}

00400a8c <usart_fill_rx_buffer>:
  400a8c:	b538      	push	{r3, r4, r5, lr}
  400a8e:	4604      	mov	r4, r0
  400a90:	f1a0 0508 	sub.w	r5, r0, #8
  400a94:	302c      	adds	r0, #44	; 0x2c
  400a96:	4b03      	ldr	r3, [pc, #12]	; (400aa4 <usart_fill_rx_buffer+0x18>)
  400a98:	4798      	blx	r3
  400a9a:	6a23      	ldr	r3, [r4, #32]
  400a9c:	b10b      	cbz	r3, 400aa2 <usart_fill_rx_buffer+0x16>
  400a9e:	4628      	mov	r0, r5
  400aa0:	4798      	blx	r3
  400aa2:	bd38      	pop	{r3, r4, r5, pc}
  400aa4:	00400dd5 	.word	0x00400dd5

00400aa8 <usart_async_write>:
  400aa8:	b570      	push	{r4, r5, r6, lr}
  400aaa:	4615      	mov	r5, r2
  400aac:	4604      	mov	r4, r0
  400aae:	460e      	mov	r6, r1
  400ab0:	2800      	cmp	r0, #0
  400ab2:	bf18      	it	ne
  400ab4:	2900      	cmpne	r1, #0
  400ab6:	d002      	beq.n	400abe <usart_async_write+0x16>
  400ab8:	b9da      	cbnz	r2, 400af2 <usart_async_write+0x4a>
  400aba:	2000      	movs	r0, #0
  400abc:	e000      	b.n	400ac0 <usart_async_write+0x18>
  400abe:	2000      	movs	r0, #0
  400ac0:	f240 123b 	movw	r2, #315	; 0x13b
  400ac4:	490d      	ldr	r1, [pc, #52]	; (400afc <usart_async_write+0x54>)
  400ac6:	4b0e      	ldr	r3, [pc, #56]	; (400b00 <usart_async_write+0x58>)
  400ac8:	4798      	blx	r3
  400aca:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  400ace:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  400ad2:	429a      	cmp	r2, r3
  400ad4:	d10f      	bne.n	400af6 <usart_async_write+0x4e>
  400ad6:	64a6      	str	r6, [r4, #72]	; 0x48
  400ad8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  400adc:	2300      	movs	r3, #0
  400ade:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  400ae2:	2301      	movs	r3, #1
  400ae4:	6323      	str	r3, [r4, #48]	; 0x30
  400ae6:	f104 0008 	add.w	r0, r4, #8
  400aea:	4b06      	ldr	r3, [pc, #24]	; (400b04 <usart_async_write+0x5c>)
  400aec:	4798      	blx	r3
  400aee:	4628      	mov	r0, r5
  400af0:	bd70      	pop	{r4, r5, r6, pc}
  400af2:	2001      	movs	r0, #1
  400af4:	e7e4      	b.n	400ac0 <usart_async_write+0x18>
  400af6:	f06f 001b 	mvn.w	r0, #27
  400afa:	bd70      	pop	{r4, r5, r6, pc}
  400afc:	00401bb4 	.word	0x00401bb4
  400b00:	00400ced 	.word	0x00400ced
  400b04:	004015f1 	.word	0x004015f1

00400b08 <usart_process_byte_sent>:
  400b08:	b510      	push	{r4, lr}
  400b0a:	4604      	mov	r4, r0
  400b0c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  400b0e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  400b12:	4293      	cmp	r3, r2
  400b14:	d009      	beq.n	400b2a <usart_process_byte_sent+0x22>
  400b16:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400b18:	1c59      	adds	r1, r3, #1
  400b1a:	8781      	strh	r1, [r0, #60]	; 0x3c
  400b1c:	5cd1      	ldrb	r1, [r2, r3]
  400b1e:	4b04      	ldr	r3, [pc, #16]	; (400b30 <usart_process_byte_sent+0x28>)
  400b20:	4798      	blx	r3
  400b22:	4620      	mov	r0, r4
  400b24:	4b03      	ldr	r3, [pc, #12]	; (400b34 <usart_process_byte_sent+0x2c>)
  400b26:	4798      	blx	r3
  400b28:	bd10      	pop	{r4, pc}
  400b2a:	4b03      	ldr	r3, [pc, #12]	; (400b38 <usart_process_byte_sent+0x30>)
  400b2c:	4798      	blx	r3
  400b2e:	bd10      	pop	{r4, pc}
  400b30:	004015cd 	.word	0x004015cd
  400b34:	004015f1 	.word	0x004015f1
  400b38:	00401615 	.word	0x00401615

00400b3c <usart_async_read>:
  400b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b40:	b082      	sub	sp, #8
  400b42:	4617      	mov	r7, r2
  400b44:	4605      	mov	r5, r0
  400b46:	4688      	mov	r8, r1
  400b48:	2800      	cmp	r0, #0
  400b4a:	bf18      	it	ne
  400b4c:	2900      	cmpne	r1, #0
  400b4e:	d002      	beq.n	400b56 <usart_async_read+0x1a>
  400b50:	b9a2      	cbnz	r2, 400b7c <usart_async_read+0x40>
  400b52:	2000      	movs	r0, #0
  400b54:	e000      	b.n	400b58 <usart_async_read+0x1c>
  400b56:	2000      	movs	r0, #0
  400b58:	f44f 72ac 	mov.w	r2, #344	; 0x158
  400b5c:	4910      	ldr	r1, [pc, #64]	; (400ba0 <usart_async_read+0x64>)
  400b5e:	4b11      	ldr	r3, [pc, #68]	; (400ba4 <usart_async_read+0x68>)
  400b60:	4798      	blx	r3
  400b62:	a801      	add	r0, sp, #4
  400b64:	4b10      	ldr	r3, [pc, #64]	; (400ba8 <usart_async_read+0x6c>)
  400b66:	4798      	blx	r3
  400b68:	3534      	adds	r5, #52	; 0x34
  400b6a:	4628      	mov	r0, r5
  400b6c:	4b0f      	ldr	r3, [pc, #60]	; (400bac <usart_async_read+0x70>)
  400b6e:	4798      	blx	r3
  400b70:	4606      	mov	r6, r0
  400b72:	a801      	add	r0, sp, #4
  400b74:	4b0e      	ldr	r3, [pc, #56]	; (400bb0 <usart_async_read+0x74>)
  400b76:	4798      	blx	r3
  400b78:	2400      	movs	r4, #0
  400b7a:	e007      	b.n	400b8c <usart_async_read+0x50>
  400b7c:	2001      	movs	r0, #1
  400b7e:	e7eb      	b.n	400b58 <usart_async_read+0x1c>
  400b80:	3401      	adds	r4, #1
  400b82:	b2a4      	uxth	r4, r4
  400b84:	4441      	add	r1, r8
  400b86:	4628      	mov	r0, r5
  400b88:	4b0a      	ldr	r3, [pc, #40]	; (400bb4 <usart_async_read+0x78>)
  400b8a:	4798      	blx	r3
  400b8c:	4621      	mov	r1, r4
  400b8e:	42a6      	cmp	r6, r4
  400b90:	d901      	bls.n	400b96 <usart_async_read+0x5a>
  400b92:	42bc      	cmp	r4, r7
  400b94:	d3f4      	bcc.n	400b80 <usart_async_read+0x44>
  400b96:	4620      	mov	r0, r4
  400b98:	b002      	add	sp, #8
  400b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b9e:	bf00      	nop
  400ba0:	00401bb4 	.word	0x00401bb4
  400ba4:	00400ced 	.word	0x00400ced
  400ba8:	0040062d 	.word	0x0040062d
  400bac:	00400e15 	.word	0x00400e15
  400bb0:	0040063b 	.word	0x0040063b
  400bb4:	00400d91 	.word	0x00400d91

00400bb8 <usart_async_init>:
  400bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bba:	4615      	mov	r5, r2
  400bbc:	461e      	mov	r6, r3
  400bbe:	4604      	mov	r4, r0
  400bc0:	460f      	mov	r7, r1
  400bc2:	2800      	cmp	r0, #0
  400bc4:	bf18      	it	ne
  400bc6:	2900      	cmpne	r1, #0
  400bc8:	d008      	beq.n	400bdc <usart_async_init+0x24>
  400bca:	1c13      	adds	r3, r2, #0
  400bcc:	bf18      	it	ne
  400bce:	2301      	movne	r3, #1
  400bd0:	b116      	cbz	r6, 400bd8 <usart_async_init+0x20>
  400bd2:	b10b      	cbz	r3, 400bd8 <usart_async_init+0x20>
  400bd4:	2001      	movs	r0, #1
  400bd6:	e002      	b.n	400bde <usart_async_init+0x26>
  400bd8:	2000      	movs	r0, #0
  400bda:	e000      	b.n	400bde <usart_async_init+0x26>
  400bdc:	2000      	movs	r0, #0
  400bde:	223a      	movs	r2, #58	; 0x3a
  400be0:	4910      	ldr	r1, [pc, #64]	; (400c24 <usart_async_init+0x6c>)
  400be2:	4b11      	ldr	r3, [pc, #68]	; (400c28 <usart_async_init+0x70>)
  400be4:	4798      	blx	r3
  400be6:	4632      	mov	r2, r6
  400be8:	4629      	mov	r1, r5
  400bea:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400bee:	4b0f      	ldr	r3, [pc, #60]	; (400c2c <usart_async_init+0x74>)
  400bf0:	4798      	blx	r3
  400bf2:	b9a0      	cbnz	r0, 400c1e <usart_async_init+0x66>
  400bf4:	4639      	mov	r1, r7
  400bf6:	f104 0008 	add.w	r0, r4, #8
  400bfa:	4b0d      	ldr	r3, [pc, #52]	; (400c30 <usart_async_init+0x78>)
  400bfc:	4798      	blx	r3
  400bfe:	4603      	mov	r3, r0
  400c00:	b958      	cbnz	r0, 400c1a <usart_async_init+0x62>
  400c02:	4a0c      	ldr	r2, [pc, #48]	; (400c34 <usart_async_init+0x7c>)
  400c04:	6062      	str	r2, [r4, #4]
  400c06:	4a0c      	ldr	r2, [pc, #48]	; (400c38 <usart_async_init+0x80>)
  400c08:	6022      	str	r2, [r4, #0]
  400c0a:	4a0c      	ldr	r2, [pc, #48]	; (400c3c <usart_async_init+0x84>)
  400c0c:	60a2      	str	r2, [r4, #8]
  400c0e:	4a0c      	ldr	r2, [pc, #48]	; (400c40 <usart_async_init+0x88>)
  400c10:	60e2      	str	r2, [r4, #12]
  400c12:	4a0c      	ldr	r2, [pc, #48]	; (400c44 <usart_async_init+0x8c>)
  400c14:	6122      	str	r2, [r4, #16]
  400c16:	4a0c      	ldr	r2, [pc, #48]	; (400c48 <usart_async_init+0x90>)
  400c18:	6162      	str	r2, [r4, #20]
  400c1a:	4618      	mov	r0, r3
  400c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c1e:	f06f 030c 	mvn.w	r3, #12
  400c22:	e7fa      	b.n	400c1a <usart_async_init+0x62>
  400c24:	00401bb4 	.word	0x00401bb4
  400c28:	00400ced 	.word	0x00400ced
  400c2c:	00400d4d 	.word	0x00400d4d
  400c30:	004014ed 	.word	0x004014ed
  400c34:	00400b3d 	.word	0x00400b3d
  400c38:	00400aa9 	.word	0x00400aa9
  400c3c:	00400b09 	.word	0x00400b09
  400c40:	00400a8d 	.word	0x00400a8d
  400c44:	00400a65 	.word	0x00400a65
  400c48:	00400a79 	.word	0x00400a79

00400c4c <usart_async_enable>:
  400c4c:	b510      	push	{r4, lr}
  400c4e:	4604      	mov	r4, r0
  400c50:	2261      	movs	r2, #97	; 0x61
  400c52:	4906      	ldr	r1, [pc, #24]	; (400c6c <usart_async_enable+0x20>)
  400c54:	3000      	adds	r0, #0
  400c56:	bf18      	it	ne
  400c58:	2001      	movne	r0, #1
  400c5a:	4b05      	ldr	r3, [pc, #20]	; (400c70 <usart_async_enable+0x24>)
  400c5c:	4798      	blx	r3
  400c5e:	f104 0008 	add.w	r0, r4, #8
  400c62:	4b04      	ldr	r3, [pc, #16]	; (400c74 <usart_async_enable+0x28>)
  400c64:	4798      	blx	r3
  400c66:	2000      	movs	r0, #0
  400c68:	bd10      	pop	{r4, pc}
  400c6a:	bf00      	nop
  400c6c:	00401bb4 	.word	0x00401bb4
  400c70:	00400ced 	.word	0x00400ced
  400c74:	00401599 	.word	0x00401599

00400c78 <usart_async_register_callback>:
  400c78:	b570      	push	{r4, r5, r6, lr}
  400c7a:	460c      	mov	r4, r1
  400c7c:	4616      	mov	r6, r2
  400c7e:	4605      	mov	r5, r0
  400c80:	2283      	movs	r2, #131	; 0x83
  400c82:	4917      	ldr	r1, [pc, #92]	; (400ce0 <usart_async_register_callback+0x68>)
  400c84:	3000      	adds	r0, #0
  400c86:	bf18      	it	ne
  400c88:	2001      	movne	r0, #1
  400c8a:	4b16      	ldr	r3, [pc, #88]	; (400ce4 <usart_async_register_callback+0x6c>)
  400c8c:	4798      	blx	r3
  400c8e:	2c01      	cmp	r4, #1
  400c90:	d010      	beq.n	400cb4 <usart_async_register_callback+0x3c>
  400c92:	b124      	cbz	r4, 400c9e <usart_async_register_callback+0x26>
  400c94:	2c02      	cmp	r4, #2
  400c96:	d018      	beq.n	400cca <usart_async_register_callback+0x52>
  400c98:	f06f 000c 	mvn.w	r0, #12
  400c9c:	bd70      	pop	{r4, r5, r6, pc}
  400c9e:	62ae      	str	r6, [r5, #40]	; 0x28
  400ca0:	1c32      	adds	r2, r6, #0
  400ca2:	bf18      	it	ne
  400ca4:	2201      	movne	r2, #1
  400ca6:	2101      	movs	r1, #1
  400ca8:	f105 0008 	add.w	r0, r5, #8
  400cac:	4b0e      	ldr	r3, [pc, #56]	; (400ce8 <usart_async_register_callback+0x70>)
  400cae:	4798      	blx	r3
  400cb0:	2000      	movs	r0, #0
  400cb2:	bd70      	pop	{r4, r5, r6, pc}
  400cb4:	626e      	str	r6, [r5, #36]	; 0x24
  400cb6:	1c32      	adds	r2, r6, #0
  400cb8:	bf18      	it	ne
  400cba:	2201      	movne	r2, #1
  400cbc:	2102      	movs	r1, #2
  400cbe:	f105 0008 	add.w	r0, r5, #8
  400cc2:	4b09      	ldr	r3, [pc, #36]	; (400ce8 <usart_async_register_callback+0x70>)
  400cc4:	4798      	blx	r3
  400cc6:	2000      	movs	r0, #0
  400cc8:	bd70      	pop	{r4, r5, r6, pc}
  400cca:	62ee      	str	r6, [r5, #44]	; 0x2c
  400ccc:	1c32      	adds	r2, r6, #0
  400cce:	bf18      	it	ne
  400cd0:	2201      	movne	r2, #1
  400cd2:	2103      	movs	r1, #3
  400cd4:	f105 0008 	add.w	r0, r5, #8
  400cd8:	4b03      	ldr	r3, [pc, #12]	; (400ce8 <usart_async_register_callback+0x70>)
  400cda:	4798      	blx	r3
  400cdc:	2000      	movs	r0, #0
  400cde:	bd70      	pop	{r4, r5, r6, pc}
  400ce0:	00401bb4 	.word	0x00401bb4
  400ce4:	00400ced 	.word	0x00400ced
  400ce8:	0040163d 	.word	0x0040163d

00400cec <assert>:
  400cec:	b900      	cbnz	r0, 400cf0 <assert+0x4>
  400cee:	be00      	bkpt	0x0000
  400cf0:	4770      	bx	lr

00400cf2 <is_list_element>:
  400cf2:	6803      	ldr	r3, [r0, #0]
  400cf4:	b11b      	cbz	r3, 400cfe <is_list_element+0xc>
  400cf6:	428b      	cmp	r3, r1
  400cf8:	d003      	beq.n	400d02 <is_list_element+0x10>
  400cfa:	681b      	ldr	r3, [r3, #0]
  400cfc:	e7fa      	b.n	400cf4 <is_list_element+0x2>
  400cfe:	2000      	movs	r0, #0
  400d00:	4770      	bx	lr
  400d02:	2001      	movs	r0, #1
  400d04:	4770      	bx	lr
	...

00400d08 <list_insert_as_head>:
  400d08:	b538      	push	{r3, r4, r5, lr}
  400d0a:	4604      	mov	r4, r0
  400d0c:	460d      	mov	r5, r1
  400d0e:	4b06      	ldr	r3, [pc, #24]	; (400d28 <list_insert_as_head+0x20>)
  400d10:	4798      	blx	r3
  400d12:	f080 0001 	eor.w	r0, r0, #1
  400d16:	2239      	movs	r2, #57	; 0x39
  400d18:	4904      	ldr	r1, [pc, #16]	; (400d2c <list_insert_as_head+0x24>)
  400d1a:	b2c0      	uxtb	r0, r0
  400d1c:	4b04      	ldr	r3, [pc, #16]	; (400d30 <list_insert_as_head+0x28>)
  400d1e:	4798      	blx	r3
  400d20:	6823      	ldr	r3, [r4, #0]
  400d22:	602b      	str	r3, [r5, #0]
  400d24:	6025      	str	r5, [r4, #0]
  400d26:	bd38      	pop	{r3, r4, r5, pc}
  400d28:	00400cf3 	.word	0x00400cf3
  400d2c:	00401bd4 	.word	0x00401bd4
  400d30:	00400ced 	.word	0x00400ced

00400d34 <list_insert_after>:
  400d34:	6803      	ldr	r3, [r0, #0]
  400d36:	600b      	str	r3, [r1, #0]
  400d38:	6001      	str	r1, [r0, #0]
  400d3a:	4770      	bx	lr

00400d3c <list_remove_head>:
  400d3c:	6803      	ldr	r3, [r0, #0]
  400d3e:	b11b      	cbz	r3, 400d48 <list_remove_head+0xc>
  400d40:	681a      	ldr	r2, [r3, #0]
  400d42:	6002      	str	r2, [r0, #0]
  400d44:	4618      	mov	r0, r3
  400d46:	4770      	bx	lr
  400d48:	2000      	movs	r0, #0
  400d4a:	4770      	bx	lr

00400d4c <ringbuffer_init>:
  400d4c:	b570      	push	{r4, r5, r6, lr}
  400d4e:	4615      	mov	r5, r2
  400d50:	4604      	mov	r4, r0
  400d52:	460e      	mov	r6, r1
  400d54:	2800      	cmp	r0, #0
  400d56:	bf18      	it	ne
  400d58:	2900      	cmpne	r1, #0
  400d5a:	d002      	beq.n	400d62 <ringbuffer_init+0x16>
  400d5c:	b97a      	cbnz	r2, 400d7e <ringbuffer_init+0x32>
  400d5e:	2000      	movs	r0, #0
  400d60:	e000      	b.n	400d64 <ringbuffer_init+0x18>
  400d62:	2000      	movs	r0, #0
  400d64:	2228      	movs	r2, #40	; 0x28
  400d66:	4908      	ldr	r1, [pc, #32]	; (400d88 <ringbuffer_init+0x3c>)
  400d68:	4b08      	ldr	r3, [pc, #32]	; (400d8c <ringbuffer_init+0x40>)
  400d6a:	4798      	blx	r3
  400d6c:	1e6b      	subs	r3, r5, #1
  400d6e:	421d      	tst	r5, r3
  400d70:	d107      	bne.n	400d82 <ringbuffer_init+0x36>
  400d72:	6063      	str	r3, [r4, #4]
  400d74:	2000      	movs	r0, #0
  400d76:	60a0      	str	r0, [r4, #8]
  400d78:	60e0      	str	r0, [r4, #12]
  400d7a:	6026      	str	r6, [r4, #0]
  400d7c:	bd70      	pop	{r4, r5, r6, pc}
  400d7e:	2001      	movs	r0, #1
  400d80:	e7f0      	b.n	400d64 <ringbuffer_init+0x18>
  400d82:	f06f 000c 	mvn.w	r0, #12
  400d86:	bd70      	pop	{r4, r5, r6, pc}
  400d88:	00401bf4 	.word	0x00401bf4
  400d8c:	00400ced 	.word	0x00400ced

00400d90 <ringbuffer_get>:
  400d90:	b538      	push	{r3, r4, r5, lr}
  400d92:	4604      	mov	r4, r0
  400d94:	460d      	mov	r5, r1
  400d96:	2800      	cmp	r0, #0
  400d98:	bf18      	it	ne
  400d9a:	2900      	cmpne	r1, #0
  400d9c:	bf14      	ite	ne
  400d9e:	2001      	movne	r0, #1
  400da0:	2000      	moveq	r0, #0
  400da2:	2240      	movs	r2, #64	; 0x40
  400da4:	4909      	ldr	r1, [pc, #36]	; (400dcc <ringbuffer_get+0x3c>)
  400da6:	4b0a      	ldr	r3, [pc, #40]	; (400dd0 <ringbuffer_get+0x40>)
  400da8:	4798      	blx	r3
  400daa:	68e2      	ldr	r2, [r4, #12]
  400dac:	68a3      	ldr	r3, [r4, #8]
  400dae:	429a      	cmp	r2, r3
  400db0:	d009      	beq.n	400dc6 <ringbuffer_get+0x36>
  400db2:	6822      	ldr	r2, [r4, #0]
  400db4:	6861      	ldr	r1, [r4, #4]
  400db6:	400b      	ands	r3, r1
  400db8:	5cd3      	ldrb	r3, [r2, r3]
  400dba:	702b      	strb	r3, [r5, #0]
  400dbc:	68a3      	ldr	r3, [r4, #8]
  400dbe:	3301      	adds	r3, #1
  400dc0:	60a3      	str	r3, [r4, #8]
  400dc2:	2000      	movs	r0, #0
  400dc4:	bd38      	pop	{r3, r4, r5, pc}
  400dc6:	f06f 0009 	mvn.w	r0, #9
  400dca:	bd38      	pop	{r3, r4, r5, pc}
  400dcc:	00401bf4 	.word	0x00401bf4
  400dd0:	00400ced 	.word	0x00400ced

00400dd4 <ringbuffer_put>:
  400dd4:	b538      	push	{r3, r4, r5, lr}
  400dd6:	460d      	mov	r5, r1
  400dd8:	4604      	mov	r4, r0
  400dda:	2251      	movs	r2, #81	; 0x51
  400ddc:	490b      	ldr	r1, [pc, #44]	; (400e0c <ringbuffer_put+0x38>)
  400dde:	3000      	adds	r0, #0
  400de0:	bf18      	it	ne
  400de2:	2001      	movne	r0, #1
  400de4:	4b0a      	ldr	r3, [pc, #40]	; (400e10 <ringbuffer_put+0x3c>)
  400de6:	4798      	blx	r3
  400de8:	6822      	ldr	r2, [r4, #0]
  400dea:	68e3      	ldr	r3, [r4, #12]
  400dec:	6861      	ldr	r1, [r4, #4]
  400dee:	400b      	ands	r3, r1
  400df0:	54d5      	strb	r5, [r2, r3]
  400df2:	68e3      	ldr	r3, [r4, #12]
  400df4:	68a2      	ldr	r2, [r4, #8]
  400df6:	1a9a      	subs	r2, r3, r2
  400df8:	6861      	ldr	r1, [r4, #4]
  400dfa:	428a      	cmp	r2, r1
  400dfc:	d901      	bls.n	400e02 <ringbuffer_put+0x2e>
  400dfe:	1a59      	subs	r1, r3, r1
  400e00:	60a1      	str	r1, [r4, #8]
  400e02:	3301      	adds	r3, #1
  400e04:	60e3      	str	r3, [r4, #12]
  400e06:	2000      	movs	r0, #0
  400e08:	bd38      	pop	{r3, r4, r5, pc}
  400e0a:	bf00      	nop
  400e0c:	00401bf4 	.word	0x00401bf4
  400e10:	00400ced 	.word	0x00400ced

00400e14 <ringbuffer_num>:
  400e14:	b510      	push	{r4, lr}
  400e16:	4604      	mov	r4, r0
  400e18:	2267      	movs	r2, #103	; 0x67
  400e1a:	4905      	ldr	r1, [pc, #20]	; (400e30 <ringbuffer_num+0x1c>)
  400e1c:	3000      	adds	r0, #0
  400e1e:	bf18      	it	ne
  400e20:	2001      	movne	r0, #1
  400e22:	4b04      	ldr	r3, [pc, #16]	; (400e34 <ringbuffer_num+0x20>)
  400e24:	4798      	blx	r3
  400e26:	68e0      	ldr	r0, [r4, #12]
  400e28:	68a3      	ldr	r3, [r4, #8]
  400e2a:	1ac0      	subs	r0, r0, r3
  400e2c:	bd10      	pop	{r4, pc}
  400e2e:	bf00      	nop
  400e30:	00401bf4 	.word	0x00401bf4
  400e34:	00400ced 	.word	0x00400ced

00400e38 <_irq_set>:
  400e38:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	db09      	blt.n	400e52 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e3e:	095b      	lsrs	r3, r3, #5
  400e40:	f000 001f 	and.w	r0, r0, #31
  400e44:	2201      	movs	r2, #1
  400e46:	fa02 f000 	lsl.w	r0, r2, r0
  400e4a:	3340      	adds	r3, #64	; 0x40
  400e4c:	4a01      	ldr	r2, [pc, #4]	; (400e54 <_irq_set+0x1c>)
  400e4e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  400e52:	4770      	bx	lr
  400e54:	e000e100 	.word	0xe000e100

00400e58 <_init_chip>:
  400e58:	b500      	push	{lr}
  400e5a:	b083      	sub	sp, #12
  400e5c:	a801      	add	r0, sp, #4
  400e5e:	4b0e      	ldr	r3, [pc, #56]	; (400e98 <_init_chip+0x40>)
  400e60:	4798      	blx	r3
  400e62:	4a0e      	ldr	r2, [pc, #56]	; (400e9c <_init_chip+0x44>)
  400e64:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e74:	f3bf 8f6f 	isb	sy
  400e78:	a801      	add	r0, sp, #4
  400e7a:	4b09      	ldr	r3, [pc, #36]	; (400ea0 <_init_chip+0x48>)
  400e7c:	4798      	blx	r3
  400e7e:	4a09      	ldr	r2, [pc, #36]	; (400ea4 <_init_chip+0x4c>)
  400e80:	6813      	ldr	r3, [r2, #0]
  400e82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  400e86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
  400e8a:	6013      	str	r3, [r2, #0]
  400e8c:	4b06      	ldr	r3, [pc, #24]	; (400ea8 <_init_chip+0x50>)
  400e8e:	4798      	blx	r3
  400e90:	b003      	add	sp, #12
  400e92:	f85d fb04 	ldr.w	pc, [sp], #4
  400e96:	bf00      	nop
  400e98:	0040062d 	.word	0x0040062d
  400e9c:	e000ed00 	.word	0xe000ed00
  400ea0:	0040063b 	.word	0x0040063b
  400ea4:	400e0c00 	.word	0x400e0c00
  400ea8:	00400f49 	.word	0x00400f49

00400eac <_pmc_init_sources>:
  400eac:	490e      	ldr	r1, [pc, #56]	; (400ee8 <_pmc_init_sources+0x3c>)
  400eae:	6a0a      	ldr	r2, [r1, #32]
  400eb0:	f022 0202 	bic.w	r2, r2, #2
  400eb4:	4b0d      	ldr	r3, [pc, #52]	; (400eec <_pmc_init_sources+0x40>)
  400eb6:	4313      	orrs	r3, r2
  400eb8:	620b      	str	r3, [r1, #32]
  400eba:	4b0b      	ldr	r3, [pc, #44]	; (400ee8 <_pmc_init_sources+0x3c>)
  400ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ebe:	f013 0f01 	tst.w	r3, #1
  400ec2:	d0fa      	beq.n	400eba <_pmc_init_sources+0xe>
  400ec4:	4b08      	ldr	r3, [pc, #32]	; (400ee8 <_pmc_init_sources+0x3c>)
  400ec6:	6a19      	ldr	r1, [r3, #32]
  400ec8:	4a09      	ldr	r2, [pc, #36]	; (400ef0 <_pmc_init_sources+0x44>)
  400eca:	430a      	orrs	r2, r1
  400ecc:	621a      	str	r2, [r3, #32]
  400ece:	6a99      	ldr	r1, [r3, #40]	; 0x28
  400ed0:	4a08      	ldr	r2, [pc, #32]	; (400ef4 <_pmc_init_sources+0x48>)
  400ed2:	400a      	ands	r2, r1
  400ed4:	629a      	str	r2, [r3, #40]	; 0x28
  400ed6:	4a08      	ldr	r2, [pc, #32]	; (400ef8 <_pmc_init_sources+0x4c>)
  400ed8:	629a      	str	r2, [r3, #40]	; 0x28
  400eda:	4b03      	ldr	r3, [pc, #12]	; (400ee8 <_pmc_init_sources+0x3c>)
  400edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ede:	f013 0f02 	tst.w	r3, #2
  400ee2:	d0fa      	beq.n	400eda <_pmc_init_sources+0x2e>
  400ee4:	4770      	bx	lr
  400ee6:	bf00      	nop
  400ee8:	400e0600 	.word	0x400e0600
  400eec:	00373e01 	.word	0x00373e01
  400ef0:	01370000 	.word	0x01370000
  400ef4:	f800ffff 	.word	0xf800ffff
  400ef8:	20183f01 	.word	0x20183f01

00400efc <_pmc_init_master_clock>:
  400efc:	4a11      	ldr	r2, [pc, #68]	; (400f44 <_pmc_init_master_clock+0x48>)
  400efe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f04:	6313      	str	r3, [r2, #48]	; 0x30
  400f06:	4b0f      	ldr	r3, [pc, #60]	; (400f44 <_pmc_init_master_clock+0x48>)
  400f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f0a:	f013 0f08 	tst.w	r3, #8
  400f0e:	d0fa      	beq.n	400f06 <_pmc_init_master_clock+0xa>
  400f10:	4a0c      	ldr	r2, [pc, #48]	; (400f44 <_pmc_init_master_clock+0x48>)
  400f12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400f1c:	6313      	str	r3, [r2, #48]	; 0x30
  400f1e:	4b09      	ldr	r3, [pc, #36]	; (400f44 <_pmc_init_master_clock+0x48>)
  400f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f22:	f013 0f08 	tst.w	r3, #8
  400f26:	d0fa      	beq.n	400f1e <_pmc_init_master_clock+0x22>
  400f28:	4a06      	ldr	r2, [pc, #24]	; (400f44 <_pmc_init_master_clock+0x48>)
  400f2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f2c:	f023 0303 	bic.w	r3, r3, #3
  400f30:	f043 0302 	orr.w	r3, r3, #2
  400f34:	6313      	str	r3, [r2, #48]	; 0x30
  400f36:	4b03      	ldr	r3, [pc, #12]	; (400f44 <_pmc_init_master_clock+0x48>)
  400f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f3a:	f013 0f08 	tst.w	r3, #8
  400f3e:	d0fa      	beq.n	400f36 <_pmc_init_master_clock+0x3a>
  400f40:	4770      	bx	lr
  400f42:	bf00      	nop
  400f44:	400e0600 	.word	0x400e0600

00400f48 <_pmc_init>:
  400f48:	b508      	push	{r3, lr}
  400f4a:	4b02      	ldr	r3, [pc, #8]	; (400f54 <_pmc_init+0xc>)
  400f4c:	4798      	blx	r3
  400f4e:	4b02      	ldr	r3, [pc, #8]	; (400f58 <_pmc_init+0x10>)
  400f50:	4798      	blx	r3
  400f52:	bd08      	pop	{r3, pc}
  400f54:	00400ead 	.word	0x00400ead
  400f58:	00400efd 	.word	0x00400efd

00400f5c <_spi_sync_enable>:
  400f5c:	2301      	movs	r3, #1
  400f5e:	6003      	str	r3, [r0, #0]
  400f60:	2000      	movs	r0, #0
  400f62:	4770      	bx	lr

00400f64 <_spi_get_hardware_index>:
  400f64:	4b04      	ldr	r3, [pc, #16]	; (400f78 <_spi_get_hardware_index+0x14>)
  400f66:	4403      	add	r3, r0
  400f68:	f3c3 4307 	ubfx	r3, r3, #16, #8
  400f6c:	2b05      	cmp	r3, #5
  400f6e:	d001      	beq.n	400f74 <_spi_get_hardware_index+0x10>
  400f70:	2000      	movs	r0, #0
  400f72:	4770      	bx	lr
  400f74:	2001      	movs	r0, #1
  400f76:	4770      	bx	lr
  400f78:	bfff8000 	.word	0xbfff8000

00400f7c <_spi_m_sync_init>:
  400f7c:	b570      	push	{r4, r5, r6, lr}
  400f7e:	4606      	mov	r6, r0
  400f80:	460c      	mov	r4, r1
  400f82:	4608      	mov	r0, r1
  400f84:	4b20      	ldr	r3, [pc, #128]	; (401008 <_spi_m_sync_init+0x8c>)
  400f86:	4798      	blx	r3
  400f88:	2300      	movs	r3, #0
  400f8a:	b33b      	cbz	r3, 400fdc <_spi_m_sync_init+0x60>
  400f8c:	2500      	movs	r5, #0
  400f8e:	f44f 729a 	mov.w	r2, #308	; 0x134
  400f92:	491e      	ldr	r1, [pc, #120]	; (40100c <_spi_m_sync_init+0x90>)
  400f94:	2e00      	cmp	r6, #0
  400f96:	bf18      	it	ne
  400f98:	2c00      	cmpne	r4, #0
  400f9a:	bf14      	ite	ne
  400f9c:	2001      	movne	r0, #1
  400f9e:	2000      	moveq	r0, #0
  400fa0:	4b1b      	ldr	r3, [pc, #108]	; (401010 <_spi_m_sync_init+0x94>)
  400fa2:	4798      	blx	r3
  400fa4:	b355      	cbz	r5, 400ffc <_spi_m_sync_init+0x80>
  400fa6:	6923      	ldr	r3, [r4, #16]
  400fa8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400fac:	d129      	bne.n	401002 <_spi_m_sync_init+0x86>
  400fae:	2380      	movs	r3, #128	; 0x80
  400fb0:	6023      	str	r3, [r4, #0]
  400fb2:	6034      	str	r4, [r6, #0]
  400fb4:	686a      	ldr	r2, [r5, #4]
  400fb6:	4b17      	ldr	r3, [pc, #92]	; (401014 <_spi_m_sync_init+0x98>)
  400fb8:	4013      	ands	r3, r2
  400fba:	6023      	str	r3, [r4, #0]
  400fbc:	68ab      	ldr	r3, [r5, #8]
  400fbe:	4a16      	ldr	r2, [pc, #88]	; (401018 <_spi_m_sync_init+0x9c>)
  400fc0:	401a      	ands	r2, r3
  400fc2:	4b16      	ldr	r3, [pc, #88]	; (40101c <_spi_m_sync_init+0xa0>)
  400fc4:	4313      	orrs	r3, r2
  400fc6:	6063      	str	r3, [r4, #4]
  400fc8:	68eb      	ldr	r3, [r5, #12]
  400fca:	6323      	str	r3, [r4, #48]	; 0x30
  400fcc:	8a2b      	ldrh	r3, [r5, #16]
  400fce:	80f3      	strh	r3, [r6, #6]
  400fd0:	68eb      	ldr	r3, [r5, #12]
  400fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400fd6:	7133      	strb	r3, [r6, #4]
  400fd8:	2000      	movs	r0, #0
  400fda:	bd70      	pop	{r4, r5, r6, pc}
  400fdc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400fe0:	008a      	lsls	r2, r1, #2
  400fe2:	490f      	ldr	r1, [pc, #60]	; (401020 <_spi_m_sync_init+0xa4>)
  400fe4:	5c8a      	ldrb	r2, [r1, r2]
  400fe6:	4290      	cmp	r0, r2
  400fe8:	d002      	beq.n	400ff0 <_spi_m_sync_init+0x74>
  400fea:	3301      	adds	r3, #1
  400fec:	b2db      	uxtb	r3, r3
  400fee:	e7cc      	b.n	400f8a <_spi_m_sync_init+0xe>
  400ff0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400ff4:	00ab      	lsls	r3, r5, #2
  400ff6:	460d      	mov	r5, r1
  400ff8:	441d      	add	r5, r3
  400ffa:	e7c8      	b.n	400f8e <_spi_m_sync_init+0x12>
  400ffc:	f06f 000c 	mvn.w	r0, #12
  401000:	bd70      	pop	{r4, r5, r6, pc}
  401002:	f06f 0010 	mvn.w	r0, #16
  401006:	bd70      	pop	{r4, r5, r6, pc}
  401008:	00400f65 	.word	0x00400f65
  40100c:	00401c2c 	.word	0x00401c2c
  401010:	00400ced 	.word	0x00400ced
  401014:	feffff7c 	.word	0xfeffff7c
  401018:	fff1ff6f 	.word	0xfff1ff6f
  40101c:	000e0010 	.word	0x000e0010
  401020:	00401c18 	.word	0x00401c18

00401024 <_spi_m_sync_enable>:
  401024:	b510      	push	{r4, lr}
  401026:	4604      	mov	r4, r0
  401028:	b168      	cbz	r0, 401046 <_spi_m_sync_enable+0x22>
  40102a:	6803      	ldr	r3, [r0, #0]
  40102c:	b14b      	cbz	r3, 401042 <_spi_m_sync_enable+0x1e>
  40102e:	2001      	movs	r0, #1
  401030:	f44f 72b9 	mov.w	r2, #370	; 0x172
  401034:	4905      	ldr	r1, [pc, #20]	; (40104c <_spi_m_sync_enable+0x28>)
  401036:	4b06      	ldr	r3, [pc, #24]	; (401050 <_spi_m_sync_enable+0x2c>)
  401038:	4798      	blx	r3
  40103a:	6820      	ldr	r0, [r4, #0]
  40103c:	4b05      	ldr	r3, [pc, #20]	; (401054 <_spi_m_sync_enable+0x30>)
  40103e:	4798      	blx	r3
  401040:	bd10      	pop	{r4, pc}
  401042:	2000      	movs	r0, #0
  401044:	e7f4      	b.n	401030 <_spi_m_sync_enable+0xc>
  401046:	2000      	movs	r0, #0
  401048:	e7f2      	b.n	401030 <_spi_m_sync_enable+0xc>
  40104a:	bf00      	nop
  40104c:	00401c2c 	.word	0x00401c2c
  401050:	00400ced 	.word	0x00400ced
  401054:	00400f5d 	.word	0x00400f5d

00401058 <_spi_m_sync_trans>:
  401058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40105c:	b086      	sub	sp, #24
  40105e:	4607      	mov	r7, r0
  401060:	460d      	mov	r5, r1
  401062:	6804      	ldr	r4, [r0, #0]
  401064:	680b      	ldr	r3, [r1, #0]
  401066:	9301      	str	r3, [sp, #4]
  401068:	684b      	ldr	r3, [r1, #4]
  40106a:	9302      	str	r3, [sp, #8]
  40106c:	2300      	movs	r3, #0
  40106e:	9303      	str	r3, [sp, #12]
  401070:	9304      	str	r3, [sp, #16]
  401072:	7903      	ldrb	r3, [r0, #4]
  401074:	f88d 3014 	strb.w	r3, [sp, #20]
  401078:	1c26      	adds	r6, r4, #0
  40107a:	bf18      	it	ne
  40107c:	2601      	movne	r6, #1
  40107e:	f240 2231 	movw	r2, #561	; 0x231
  401082:	4933      	ldr	r1, [pc, #204]	; (401150 <_spi_m_sync_trans+0xf8>)
  401084:	2800      	cmp	r0, #0
  401086:	bf0c      	ite	eq
  401088:	2000      	moveq	r0, #0
  40108a:	f006 0001 	andne.w	r0, r6, #1
  40108e:	4b31      	ldr	r3, [pc, #196]	; (401154 <_spi_m_sync_trans+0xfc>)
  401090:	4798      	blx	r3
  401092:	6923      	ldr	r3, [r4, #16]
  401094:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401098:	d122      	bne.n	4010e0 <_spi_m_sync_trans+0x88>
  40109a:	f06f 0013 	mvn.w	r0, #19
  40109e:	e053      	b.n	401148 <_spi_m_sync_trans+0xf0>
  4010a0:	2300      	movs	r3, #0
  4010a2:	e035      	b.n	401110 <_spi_m_sync_trans+0xb8>
  4010a4:	7850      	ldrb	r0, [r2, #1]
  4010a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  4010aa:	3202      	adds	r2, #2
  4010ac:	9201      	str	r2, [sp, #4]
  4010ae:	3301      	adds	r3, #1
  4010b0:	9303      	str	r3, [sp, #12]
  4010b2:	60e1      	str	r1, [r4, #12]
  4010b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
  4010b8:	f240 2222 	movw	r2, #546	; 0x222
  4010bc:	4924      	ldr	r1, [pc, #144]	; (401150 <_spi_m_sync_trans+0xf8>)
  4010be:	4630      	mov	r0, r6
  4010c0:	4b24      	ldr	r3, [pc, #144]	; (401154 <_spi_m_sync_trans+0xfc>)
  4010c2:	4798      	blx	r3
  4010c4:	f018 0f08 	tst.w	r8, #8
  4010c8:	d038      	beq.n	40113c <_spi_m_sync_trans+0xe4>
  4010ca:	f06f 0012 	mvn.w	r0, #18
  4010ce:	2800      	cmp	r0, #0
  4010d0:	db36      	blt.n	401140 <_spi_m_sync_trans+0xe8>
  4010d2:	9803      	ldr	r0, [sp, #12]
  4010d4:	68ab      	ldr	r3, [r5, #8]
  4010d6:	4298      	cmp	r0, r3
  4010d8:	d302      	bcc.n	4010e0 <_spi_m_sync_trans+0x88>
  4010da:	9a04      	ldr	r2, [sp, #16]
  4010dc:	4293      	cmp	r3, r2
  4010de:	d92f      	bls.n	401140 <_spi_m_sync_trans+0xe8>
  4010e0:	6923      	ldr	r3, [r4, #16]
  4010e2:	f013 0f01 	tst.w	r3, #1
  4010e6:	d0db      	beq.n	4010a0 <_spi_m_sync_trans+0x48>
  4010e8:	68a3      	ldr	r3, [r4, #8]
  4010ea:	b29b      	uxth	r3, r3
  4010ec:	9a02      	ldr	r2, [sp, #8]
  4010ee:	b15a      	cbz	r2, 401108 <_spi_m_sync_trans+0xb0>
  4010f0:	1c51      	adds	r1, r2, #1
  4010f2:	9102      	str	r1, [sp, #8]
  4010f4:	7013      	strb	r3, [r2, #0]
  4010f6:	f89d 2014 	ldrb.w	r2, [sp, #20]
  4010fa:	2a01      	cmp	r2, #1
  4010fc:	d904      	bls.n	401108 <_spi_m_sync_trans+0xb0>
  4010fe:	460a      	mov	r2, r1
  401100:	3101      	adds	r1, #1
  401102:	9102      	str	r1, [sp, #8]
  401104:	0a1b      	lsrs	r3, r3, #8
  401106:	7013      	strb	r3, [r2, #0]
  401108:	9b04      	ldr	r3, [sp, #16]
  40110a:	3301      	adds	r3, #1
  40110c:	9304      	str	r3, [sp, #16]
  40110e:	2301      	movs	r3, #1
  401110:	2b00      	cmp	r3, #0
  401112:	d1cf      	bne.n	4010b4 <_spi_m_sync_trans+0x5c>
  401114:	9b03      	ldr	r3, [sp, #12]
  401116:	9a04      	ldr	r2, [sp, #16]
  401118:	429a      	cmp	r2, r3
  40111a:	d3cb      	bcc.n	4010b4 <_spi_m_sync_trans+0x5c>
  40111c:	88f9      	ldrh	r1, [r7, #6]
  40111e:	6922      	ldr	r2, [r4, #16]
  401120:	f012 0f02 	tst.w	r2, #2
  401124:	d0c6      	beq.n	4010b4 <_spi_m_sync_trans+0x5c>
  401126:	9a01      	ldr	r2, [sp, #4]
  401128:	2a00      	cmp	r2, #0
  40112a:	d0c0      	beq.n	4010ae <_spi_m_sync_trans+0x56>
  40112c:	1c51      	adds	r1, r2, #1
  40112e:	9101      	str	r1, [sp, #4]
  401130:	7811      	ldrb	r1, [r2, #0]
  401132:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401136:	2801      	cmp	r0, #1
  401138:	d8b4      	bhi.n	4010a4 <_spi_m_sync_trans+0x4c>
  40113a:	e7b8      	b.n	4010ae <_spi_m_sync_trans+0x56>
  40113c:	2000      	movs	r0, #0
  40113e:	e7c6      	b.n	4010ce <_spi_m_sync_trans+0x76>
  401140:	6923      	ldr	r3, [r4, #16]
  401142:	f413 7f00 	tst.w	r3, #512	; 0x200
  401146:	d0fb      	beq.n	401140 <_spi_m_sync_trans+0xe8>
  401148:	b006      	add	sp, #24
  40114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40114e:	bf00      	nop
  401150:	00401c2c 	.word	0x00401c2c
  401154:	00400ced 	.word	0x00400ced

00401158 <_spi_get_spi_m_sync>:
  401158:	2000      	movs	r0, #0
  40115a:	4770      	bx	lr

0040115c <get_cfg>:
  40115c:	2300      	movs	r3, #0
  40115e:	2b01      	cmp	r3, #1
  401160:	d815      	bhi.n	40118e <get_cfg+0x32>
  401162:	b410      	push	{r4}
  401164:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401168:	008a      	lsls	r2, r1, #2
  40116a:	490a      	ldr	r1, [pc, #40]	; (401194 <get_cfg+0x38>)
  40116c:	588a      	ldr	r2, [r1, r2]
  40116e:	4282      	cmp	r2, r0
  401170:	d007      	beq.n	401182 <get_cfg+0x26>
  401172:	3301      	adds	r3, #1
  401174:	b2db      	uxtb	r3, r3
  401176:	2b01      	cmp	r3, #1
  401178:	d9f4      	bls.n	401164 <get_cfg+0x8>
  40117a:	2000      	movs	r0, #0
  40117c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401180:	4770      	bx	lr
  401182:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401186:	00a3      	lsls	r3, r4, #2
  401188:	4608      	mov	r0, r1
  40118a:	4418      	add	r0, r3
  40118c:	e7f6      	b.n	40117c <get_cfg+0x20>
  40118e:	2000      	movs	r0, #0
  401190:	4770      	bx	lr
  401192:	bf00      	nop
  401194:	20400000 	.word	0x20400000

00401198 <_tc_init_irq_param>:
  401198:	4b06      	ldr	r3, [pc, #24]	; (4011b4 <_tc_init_irq_param+0x1c>)
  40119a:	4298      	cmp	r0, r3
  40119c:	d003      	beq.n	4011a6 <_tc_init_irq_param+0xe>
  40119e:	4b06      	ldr	r3, [pc, #24]	; (4011b8 <_tc_init_irq_param+0x20>)
  4011a0:	4298      	cmp	r0, r3
  4011a2:	d003      	beq.n	4011ac <_tc_init_irq_param+0x14>
  4011a4:	4770      	bx	lr
  4011a6:	4b05      	ldr	r3, [pc, #20]	; (4011bc <_tc_init_irq_param+0x24>)
  4011a8:	6019      	str	r1, [r3, #0]
  4011aa:	e7f8      	b.n	40119e <_tc_init_irq_param+0x6>
  4011ac:	4b03      	ldr	r3, [pc, #12]	; (4011bc <_tc_init_irq_param+0x24>)
  4011ae:	6059      	str	r1, [r3, #4]
  4011b0:	e7f8      	b.n	4011a4 <_tc_init_irq_param+0xc>
  4011b2:	bf00      	nop
  4011b4:	4000c000 	.word	0x4000c000
  4011b8:	40010000 	.word	0x40010000
  4011bc:	20400418 	.word	0x20400418

004011c0 <tc_interrupt_handler>:
  4011c0:	b508      	push	{r3, lr}
  4011c2:	68c3      	ldr	r3, [r0, #12]
  4011c4:	6a1b      	ldr	r3, [r3, #32]
  4011c6:	f013 0f10 	tst.w	r3, #16
  4011ca:	d100      	bne.n	4011ce <tc_interrupt_handler+0xe>
  4011cc:	bd08      	pop	{r3, pc}
  4011ce:	6803      	ldr	r3, [r0, #0]
  4011d0:	4798      	blx	r3
  4011d2:	e7fb      	b.n	4011cc <tc_interrupt_handler+0xc>

004011d4 <_timer_init>:
  4011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011d6:	4607      	mov	r7, r0
  4011d8:	460c      	mov	r4, r1
  4011da:	4608      	mov	r0, r1
  4011dc:	4b27      	ldr	r3, [pc, #156]	; (40127c <_timer_init+0xa8>)
  4011de:	4798      	blx	r3
  4011e0:	4605      	mov	r5, r0
  4011e2:	6886      	ldr	r6, [r0, #8]
  4011e4:	60fc      	str	r4, [r7, #12]
  4011e6:	2296      	movs	r2, #150	; 0x96
  4011e8:	4925      	ldr	r1, [pc, #148]	; (401280 <_timer_init+0xac>)
  4011ea:	2001      	movs	r0, #1
  4011ec:	4b25      	ldr	r3, [pc, #148]	; (401284 <_timer_init+0xb0>)
  4011ee:	4798      	blx	r3
  4011f0:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  4011f4:	d001      	beq.n	4011fa <_timer_init+0x26>
  4011f6:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
  4011fa:	6066      	str	r6, [r4, #4]
  4011fc:	696b      	ldr	r3, [r5, #20]
  4011fe:	6163      	str	r3, [r4, #20]
  401200:	69ab      	ldr	r3, [r5, #24]
  401202:	61a3      	str	r3, [r4, #24]
  401204:	68eb      	ldr	r3, [r5, #12]
  401206:	6323      	str	r3, [r4, #48]	; 0x30
  401208:	69eb      	ldr	r3, [r5, #28]
  40120a:	61e3      	str	r3, [r4, #28]
  40120c:	2310      	movs	r3, #16
  40120e:	6263      	str	r3, [r4, #36]	; 0x24
  401210:	692b      	ldr	r3, [r5, #16]
  401212:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  401216:	4639      	mov	r1, r7
  401218:	4620      	mov	r0, r4
  40121a:	4b1b      	ldr	r3, [pc, #108]	; (401288 <_timer_init+0xb4>)
  40121c:	4798      	blx	r3
  40121e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401222:	2b00      	cmp	r3, #0
  401224:	db0d      	blt.n	401242 <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401226:	095a      	lsrs	r2, r3, #5
  401228:	f003 031f 	and.w	r3, r3, #31
  40122c:	2101      	movs	r1, #1
  40122e:	fa01 f303 	lsl.w	r3, r1, r3
  401232:	3220      	adds	r2, #32
  401234:	4915      	ldr	r1, [pc, #84]	; (40128c <_timer_init+0xb8>)
  401236:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40123a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40123e:	f3bf 8f6f 	isb	sy
  401242:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  401246:	2b00      	cmp	r3, #0
  401248:	db09      	blt.n	40125e <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40124a:	095a      	lsrs	r2, r3, #5
  40124c:	f003 031f 	and.w	r3, r3, #31
  401250:	2101      	movs	r1, #1
  401252:	fa01 f303 	lsl.w	r3, r1, r3
  401256:	3260      	adds	r2, #96	; 0x60
  401258:	490c      	ldr	r1, [pc, #48]	; (40128c <_timer_init+0xb8>)
  40125a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40125e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401262:	2b00      	cmp	r3, #0
  401264:	db08      	blt.n	401278 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401266:	0959      	lsrs	r1, r3, #5
  401268:	f003 031f 	and.w	r3, r3, #31
  40126c:	2201      	movs	r2, #1
  40126e:	fa02 f303 	lsl.w	r3, r2, r3
  401272:	4a06      	ldr	r2, [pc, #24]	; (40128c <_timer_init+0xb8>)
  401274:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  401278:	2000      	movs	r0, #0
  40127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40127c:	0040115d 	.word	0x0040115d
  401280:	00401c44 	.word	0x00401c44
  401284:	00400ced 	.word	0x00400ced
  401288:	00401199 	.word	0x00401199
  40128c:	e000e100 	.word	0xe000e100

00401290 <_timer_start>:
  401290:	68c3      	ldr	r3, [r0, #12]
  401292:	2205      	movs	r2, #5
  401294:	601a      	str	r2, [r3, #0]
  401296:	4770      	bx	lr

00401298 <_timer_stop>:
  401298:	68c3      	ldr	r3, [r0, #12]
  40129a:	2202      	movs	r2, #2
  40129c:	601a      	str	r2, [r3, #0]
  40129e:	4770      	bx	lr

004012a0 <_timer_is_started>:
  4012a0:	68c3      	ldr	r3, [r0, #12]
  4012a2:	6a18      	ldr	r0, [r3, #32]
  4012a4:	f3c0 4000 	ubfx	r0, r0, #16, #1
  4012a8:	4770      	bx	lr
	...

004012ac <_timer_set_irq>:
  4012ac:	b508      	push	{r3, lr}
  4012ae:	68c0      	ldr	r0, [r0, #12]
  4012b0:	4b02      	ldr	r3, [pc, #8]	; (4012bc <_timer_set_irq+0x10>)
  4012b2:	4798      	blx	r3
  4012b4:	7900      	ldrb	r0, [r0, #4]
  4012b6:	4b02      	ldr	r3, [pc, #8]	; (4012c0 <_timer_set_irq+0x14>)
  4012b8:	4798      	blx	r3
  4012ba:	bd08      	pop	{r3, pc}
  4012bc:	0040115d 	.word	0x0040115d
  4012c0:	00400e39 	.word	0x00400e39

004012c4 <_tc_get_timer>:
  4012c4:	2000      	movs	r0, #0
  4012c6:	4770      	bx	lr

004012c8 <TC0_Handler>:
  4012c8:	b508      	push	{r3, lr}
  4012ca:	4b02      	ldr	r3, [pc, #8]	; (4012d4 <TC0_Handler+0xc>)
  4012cc:	6818      	ldr	r0, [r3, #0]
  4012ce:	4b02      	ldr	r3, [pc, #8]	; (4012d8 <TC0_Handler+0x10>)
  4012d0:	4798      	blx	r3
  4012d2:	bd08      	pop	{r3, pc}
  4012d4:	20400418 	.word	0x20400418
  4012d8:	004011c1 	.word	0x004011c1

004012dc <TC3_Handler>:
  4012dc:	b508      	push	{r3, lr}
  4012de:	4b02      	ldr	r3, [pc, #8]	; (4012e8 <TC3_Handler+0xc>)
  4012e0:	6858      	ldr	r0, [r3, #4]
  4012e2:	4b02      	ldr	r3, [pc, #8]	; (4012ec <TC3_Handler+0x10>)
  4012e4:	4798      	blx	r3
  4012e6:	bd08      	pop	{r3, pc}
  4012e8:	20400418 	.word	0x20400418
  4012ec:	004011c1 	.word	0x004011c1

004012f0 <_rand_sync_init>:
  4012f0:	b538      	push	{r3, r4, r5, lr}
  4012f2:	4604      	mov	r4, r0
  4012f4:	460d      	mov	r5, r1
  4012f6:	2800      	cmp	r0, #0
  4012f8:	bf18      	it	ne
  4012fa:	2900      	cmpne	r1, #0
  4012fc:	bf14      	ite	ne
  4012fe:	2001      	movne	r0, #1
  401300:	2000      	moveq	r0, #0
  401302:	2228      	movs	r2, #40	; 0x28
  401304:	4903      	ldr	r1, [pc, #12]	; (401314 <_rand_sync_init+0x24>)
  401306:	4b04      	ldr	r3, [pc, #16]	; (401318 <_rand_sync_init+0x28>)
  401308:	4798      	blx	r3
  40130a:	6025      	str	r5, [r4, #0]
  40130c:	2320      	movs	r3, #32
  40130e:	7123      	strb	r3, [r4, #4]
  401310:	2000      	movs	r0, #0
  401312:	bd38      	pop	{r3, r4, r5, pc}
  401314:	00401c58 	.word	0x00401c58
  401318:	00400ced 	.word	0x00400ced

0040131c <_usart_init_irq_param>:
  40131c:	4b03      	ldr	r3, [pc, #12]	; (40132c <_usart_init_irq_param+0x10>)
  40131e:	4298      	cmp	r0, r3
  401320:	d000      	beq.n	401324 <_usart_init_irq_param+0x8>
  401322:	4770      	bx	lr
  401324:	4b02      	ldr	r3, [pc, #8]	; (401330 <_usart_init_irq_param+0x14>)
  401326:	6019      	str	r1, [r3, #0]
  401328:	e7fb      	b.n	401322 <_usart_init_irq_param+0x6>
  40132a:	bf00      	nop
  40132c:	40028000 	.word	0x40028000
  401330:	20400420 	.word	0x20400420

00401334 <_usart_get_hardware_index>:
  401334:	b510      	push	{r4, lr}
  401336:	4604      	mov	r4, r0
  401338:	f240 222f 	movw	r2, #559	; 0x22f
  40133c:	4905      	ldr	r1, [pc, #20]	; (401354 <_usart_get_hardware_index+0x20>)
  40133e:	3000      	adds	r0, #0
  401340:	bf18      	it	ne
  401342:	2001      	movne	r0, #1
  401344:	4b04      	ldr	r3, [pc, #16]	; (401358 <_usart_get_hardware_index+0x24>)
  401346:	4798      	blx	r3
  401348:	4804      	ldr	r0, [pc, #16]	; (40135c <_usart_get_hardware_index+0x28>)
  40134a:	4420      	add	r0, r4
  40134c:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401350:	bd10      	pop	{r4, pc}
  401352:	bf00      	nop
  401354:	00401c7c 	.word	0x00401c7c
  401358:	00400ced 	.word	0x00400ced
  40135c:	bffdc000 	.word	0xbffdc000

00401360 <_get_usart_index>:
  401360:	b510      	push	{r4, lr}
  401362:	4604      	mov	r4, r0
  401364:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  401368:	490e      	ldr	r1, [pc, #56]	; (4013a4 <_get_usart_index+0x44>)
  40136a:	3000      	adds	r0, #0
  40136c:	bf18      	it	ne
  40136e:	2001      	movne	r0, #1
  401370:	4b0d      	ldr	r3, [pc, #52]	; (4013a8 <_get_usart_index+0x48>)
  401372:	4798      	blx	r3
  401374:	4620      	mov	r0, r4
  401376:	4b0d      	ldr	r3, [pc, #52]	; (4013ac <_get_usart_index+0x4c>)
  401378:	4798      	blx	r3
  40137a:	2300      	movs	r3, #0
  40137c:	b143      	cbz	r3, 401390 <_get_usart_index+0x30>
  40137e:	f240 22be 	movw	r2, #702	; 0x2be
  401382:	4908      	ldr	r1, [pc, #32]	; (4013a4 <_get_usart_index+0x44>)
  401384:	2000      	movs	r0, #0
  401386:	4b08      	ldr	r3, [pc, #32]	; (4013a8 <_get_usart_index+0x48>)
  401388:	4798      	blx	r3
  40138a:	2300      	movs	r3, #0
  40138c:	4618      	mov	r0, r3
  40138e:	bd10      	pop	{r4, pc}
  401390:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401394:	008a      	lsls	r2, r1, #2
  401396:	4906      	ldr	r1, [pc, #24]	; (4013b0 <_get_usart_index+0x50>)
  401398:	5c8a      	ldrb	r2, [r1, r2]
  40139a:	4290      	cmp	r0, r2
  40139c:	d0f6      	beq.n	40138c <_get_usart_index+0x2c>
  40139e:	3301      	adds	r3, #1
  4013a0:	b2db      	uxtb	r3, r3
  4013a2:	e7eb      	b.n	40137c <_get_usart_index+0x1c>
  4013a4:	00401c7c 	.word	0x00401c7c
  4013a8:	00400ced 	.word	0x00400ced
  4013ac:	00401335 	.word	0x00401335
  4013b0:	00401c70 	.word	0x00401c70

004013b4 <_usart_init>:
  4013b4:	b510      	push	{r4, lr}
  4013b6:	4604      	mov	r4, r0
  4013b8:	f240 22cb 	movw	r2, #715	; 0x2cb
  4013bc:	4911      	ldr	r1, [pc, #68]	; (401404 <_usart_init+0x50>)
  4013be:	3000      	adds	r0, #0
  4013c0:	bf18      	it	ne
  4013c2:	2001      	movne	r0, #1
  4013c4:	4b10      	ldr	r3, [pc, #64]	; (401408 <_usart_init+0x54>)
  4013c6:	4798      	blx	r3
  4013c8:	4620      	mov	r0, r4
  4013ca:	4b10      	ldr	r3, [pc, #64]	; (40140c <_usart_init+0x58>)
  4013cc:	4798      	blx	r3
  4013ce:	4b10      	ldr	r3, [pc, #64]	; (401410 <_usart_init+0x5c>)
  4013d0:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  4013d4:	2300      	movs	r3, #0
  4013d6:	6063      	str	r3, [r4, #4]
  4013d8:	6263      	str	r3, [r4, #36]	; 0x24
  4013da:	62a3      	str	r3, [r4, #40]	; 0x28
  4013dc:	22ac      	movs	r2, #172	; 0xac
  4013de:	6022      	str	r2, [r4, #0]
  4013e0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4013e4:	6022      	str	r2, [r4, #0]
  4013e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4013ea:	6022      	str	r2, [r4, #0]
  4013ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4013f0:	0081      	lsls	r1, r0, #2
  4013f2:	4a08      	ldr	r2, [pc, #32]	; (401414 <_usart_init+0x60>)
  4013f4:	440a      	add	r2, r1
  4013f6:	6852      	ldr	r2, [r2, #4]
  4013f8:	6062      	str	r2, [r4, #4]
  4013fa:	4a07      	ldr	r2, [pc, #28]	; (401418 <_usart_init+0x64>)
  4013fc:	6222      	str	r2, [r4, #32]
  4013fe:	4618      	mov	r0, r3
  401400:	bd10      	pop	{r4, pc}
  401402:	bf00      	nop
  401404:	00401c7c 	.word	0x00401c7c
  401408:	00400ced 	.word	0x00400ced
  40140c:	00401361 	.word	0x00401361
  401410:	55534100 	.word	0x55534100
  401414:	00401c70 	.word	0x00401c70
  401418:	00030051 	.word	0x00030051

0040141c <_usart_get_irq_num>:
  40141c:	b510      	push	{r4, lr}
  40141e:	4604      	mov	r4, r0
  401420:	22ae      	movs	r2, #174	; 0xae
  401422:	4906      	ldr	r1, [pc, #24]	; (40143c <_usart_get_irq_num+0x20>)
  401424:	3000      	adds	r0, #0
  401426:	bf18      	it	ne
  401428:	2001      	movne	r0, #1
  40142a:	4b05      	ldr	r3, [pc, #20]	; (401440 <_usart_get_irq_num+0x24>)
  40142c:	4798      	blx	r3
  40142e:	4620      	mov	r0, r4
  401430:	4b04      	ldr	r3, [pc, #16]	; (401444 <_usart_get_irq_num+0x28>)
  401432:	4798      	blx	r3
  401434:	300d      	adds	r0, #13
  401436:	b2c0      	uxtb	r0, r0
  401438:	bd10      	pop	{r4, pc}
  40143a:	bf00      	nop
  40143c:	00401c7c 	.word	0x00401c7c
  401440:	00400ced 	.word	0x00400ced
  401444:	00401335 	.word	0x00401335

00401448 <_usart_interrupt_handler>:
  401448:	b510      	push	{r4, lr}
  40144a:	4604      	mov	r4, r0
  40144c:	f240 2289 	movw	r2, #649	; 0x289
  401450:	4923      	ldr	r1, [pc, #140]	; (4014e0 <_usart_interrupt_handler+0x98>)
  401452:	3000      	adds	r0, #0
  401454:	bf18      	it	ne
  401456:	2001      	movne	r0, #1
  401458:	4b22      	ldr	r3, [pc, #136]	; (4014e4 <_usart_interrupt_handler+0x9c>)
  40145a:	4798      	blx	r3
  40145c:	69a3      	ldr	r3, [r4, #24]
  40145e:	695a      	ldr	r2, [r3, #20]
  401460:	f012 0f02 	tst.w	r2, #2
  401464:	d003      	beq.n	40146e <_usart_interrupt_handler+0x26>
  401466:	691a      	ldr	r2, [r3, #16]
  401468:	f012 0f02 	tst.w	r2, #2
  40146c:	d118      	bne.n	4014a0 <_usart_interrupt_handler+0x58>
  40146e:	695a      	ldr	r2, [r3, #20]
  401470:	f412 7f00 	tst.w	r2, #512	; 0x200
  401474:	d003      	beq.n	40147e <_usart_interrupt_handler+0x36>
  401476:	691a      	ldr	r2, [r3, #16]
  401478:	f412 7f00 	tst.w	r2, #512	; 0x200
  40147c:	d116      	bne.n	4014ac <_usart_interrupt_handler+0x64>
  40147e:	695a      	ldr	r2, [r3, #20]
  401480:	f012 0f01 	tst.w	r2, #1
  401484:	d01f      	beq.n	4014c6 <_usart_interrupt_handler+0x7e>
  401486:	691a      	ldr	r2, [r3, #16]
  401488:	f012 0f01 	tst.w	r2, #1
  40148c:	d01b      	beq.n	4014c6 <_usart_interrupt_handler+0x7e>
  40148e:	6959      	ldr	r1, [r3, #20]
  401490:	4a15      	ldr	r2, [pc, #84]	; (4014e8 <_usart_interrupt_handler+0xa0>)
  401492:	4211      	tst	r1, r2
  401494:	d011      	beq.n	4014ba <_usart_interrupt_handler+0x72>
  401496:	699a      	ldr	r2, [r3, #24]
  401498:	f44f 7280 	mov.w	r2, #256	; 0x100
  40149c:	601a      	str	r2, [r3, #0]
  40149e:	bd10      	pop	{r4, pc}
  4014a0:	2202      	movs	r2, #2
  4014a2:	60da      	str	r2, [r3, #12]
  4014a4:	6823      	ldr	r3, [r4, #0]
  4014a6:	4620      	mov	r0, r4
  4014a8:	4798      	blx	r3
  4014aa:	bd10      	pop	{r4, pc}
  4014ac:	f44f 7200 	mov.w	r2, #512	; 0x200
  4014b0:	60da      	str	r2, [r3, #12]
  4014b2:	68a3      	ldr	r3, [r4, #8]
  4014b4:	4620      	mov	r0, r4
  4014b6:	4798      	blx	r3
  4014b8:	bd10      	pop	{r4, pc}
  4014ba:	6862      	ldr	r2, [r4, #4]
  4014bc:	6999      	ldr	r1, [r3, #24]
  4014be:	b2c9      	uxtb	r1, r1
  4014c0:	4620      	mov	r0, r4
  4014c2:	4790      	blx	r2
  4014c4:	bd10      	pop	{r4, pc}
  4014c6:	6959      	ldr	r1, [r3, #20]
  4014c8:	4a07      	ldr	r2, [pc, #28]	; (4014e8 <_usart_interrupt_handler+0xa0>)
  4014ca:	4211      	tst	r1, r2
  4014cc:	d100      	bne.n	4014d0 <_usart_interrupt_handler+0x88>
  4014ce:	bd10      	pop	{r4, pc}
  4014d0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4014d4:	601a      	str	r2, [r3, #0]
  4014d6:	68e3      	ldr	r3, [r4, #12]
  4014d8:	4620      	mov	r0, r4
  4014da:	4798      	blx	r3
  4014dc:	e7f7      	b.n	4014ce <_usart_interrupt_handler+0x86>
  4014de:	bf00      	nop
  4014e0:	00401c7c 	.word	0x00401c7c
  4014e4:	00400ced 	.word	0x00400ced
  4014e8:	010000e0 	.word	0x010000e0

004014ec <_usart_async_init>:
  4014ec:	b570      	push	{r4, r5, r6, lr}
  4014ee:	460c      	mov	r4, r1
  4014f0:	4606      	mov	r6, r0
  4014f2:	22d1      	movs	r2, #209	; 0xd1
  4014f4:	4922      	ldr	r1, [pc, #136]	; (401580 <_usart_async_init+0x94>)
  4014f6:	3000      	adds	r0, #0
  4014f8:	bf18      	it	ne
  4014fa:	2001      	movne	r0, #1
  4014fc:	4b21      	ldr	r3, [pc, #132]	; (401584 <_usart_async_init+0x98>)
  4014fe:	4798      	blx	r3
  401500:	4620      	mov	r0, r4
  401502:	4b21      	ldr	r3, [pc, #132]	; (401588 <_usart_async_init+0x9c>)
  401504:	4798      	blx	r3
  401506:	4605      	mov	r5, r0
  401508:	b108      	cbz	r0, 40150e <_usart_async_init+0x22>
  40150a:	4628      	mov	r0, r5
  40150c:	bd70      	pop	{r4, r5, r6, pc}
  40150e:	61b4      	str	r4, [r6, #24]
  401510:	4631      	mov	r1, r6
  401512:	4620      	mov	r0, r4
  401514:	4b1d      	ldr	r3, [pc, #116]	; (40158c <_usart_async_init+0xa0>)
  401516:	4798      	blx	r3
  401518:	4620      	mov	r0, r4
  40151a:	4b1d      	ldr	r3, [pc, #116]	; (401590 <_usart_async_init+0xa4>)
  40151c:	4798      	blx	r3
  40151e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401520:	2b00      	cmp	r3, #0
  401522:	db0d      	blt.n	401540 <_usart_async_init+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401524:	095b      	lsrs	r3, r3, #5
  401526:	f000 001f 	and.w	r0, r0, #31
  40152a:	2201      	movs	r2, #1
  40152c:	fa02 f000 	lsl.w	r0, r2, r0
  401530:	3320      	adds	r3, #32
  401532:	4a18      	ldr	r2, [pc, #96]	; (401594 <_usart_async_init+0xa8>)
  401534:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40153c:	f3bf 8f6f 	isb	sy
  401540:	4620      	mov	r0, r4
  401542:	4b13      	ldr	r3, [pc, #76]	; (401590 <_usart_async_init+0xa4>)
  401544:	4798      	blx	r3
  401546:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401548:	2b00      	cmp	r3, #0
  40154a:	db09      	blt.n	401560 <_usart_async_init+0x74>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40154c:	095b      	lsrs	r3, r3, #5
  40154e:	f000 001f 	and.w	r0, r0, #31
  401552:	2201      	movs	r2, #1
  401554:	fa02 f000 	lsl.w	r0, r2, r0
  401558:	3360      	adds	r3, #96	; 0x60
  40155a:	4a0e      	ldr	r2, [pc, #56]	; (401594 <_usart_async_init+0xa8>)
  40155c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  401560:	4620      	mov	r0, r4
  401562:	4b0b      	ldr	r3, [pc, #44]	; (401590 <_usart_async_init+0xa4>)
  401564:	4798      	blx	r3
  401566:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401568:	2b00      	cmp	r3, #0
  40156a:	dbce      	blt.n	40150a <_usart_async_init+0x1e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40156c:	095b      	lsrs	r3, r3, #5
  40156e:	f000 001f 	and.w	r0, r0, #31
  401572:	2201      	movs	r2, #1
  401574:	fa02 f000 	lsl.w	r0, r2, r0
  401578:	4a06      	ldr	r2, [pc, #24]	; (401594 <_usart_async_init+0xa8>)
  40157a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  40157e:	e7c4      	b.n	40150a <_usart_async_init+0x1e>
  401580:	00401c7c 	.word	0x00401c7c
  401584:	00400ced 	.word	0x00400ced
  401588:	004013b5 	.word	0x004013b5
  40158c:	0040131d 	.word	0x0040131d
  401590:	0040141d 	.word	0x0040141d
  401594:	e000e100 	.word	0xe000e100

00401598 <_usart_async_enable>:
  401598:	b570      	push	{r4, r5, r6, lr}
  40159a:	4e0a      	ldr	r6, [pc, #40]	; (4015c4 <_usart_async_enable+0x2c>)
  40159c:	4604      	mov	r4, r0
  40159e:	f240 1213 	movw	r2, #275	; 0x113
  4015a2:	4631      	mov	r1, r6
  4015a4:	3000      	adds	r0, #0
  4015a6:	bf18      	it	ne
  4015a8:	2001      	movne	r0, #1
  4015aa:	4d07      	ldr	r5, [pc, #28]	; (4015c8 <_usart_async_enable+0x30>)
  4015ac:	47a8      	blx	r5
  4015ae:	69a4      	ldr	r4, [r4, #24]
  4015b0:	f44f 723d 	mov.w	r2, #756	; 0x2f4
  4015b4:	4631      	mov	r1, r6
  4015b6:	1c20      	adds	r0, r4, #0
  4015b8:	bf18      	it	ne
  4015ba:	2001      	movne	r0, #1
  4015bc:	47a8      	blx	r5
  4015be:	2350      	movs	r3, #80	; 0x50
  4015c0:	6023      	str	r3, [r4, #0]
  4015c2:	bd70      	pop	{r4, r5, r6, pc}
  4015c4:	00401c7c 	.word	0x00401c7c
  4015c8:	00400ced 	.word	0x00400ced

004015cc <_usart_async_write_byte>:
  4015cc:	b538      	push	{r3, r4, r5, lr}
  4015ce:	460c      	mov	r4, r1
  4015d0:	4605      	mov	r5, r0
  4015d2:	f240 12b5 	movw	r2, #437	; 0x1b5
  4015d6:	4904      	ldr	r1, [pc, #16]	; (4015e8 <_usart_async_write_byte+0x1c>)
  4015d8:	3000      	adds	r0, #0
  4015da:	bf18      	it	ne
  4015dc:	2001      	movne	r0, #1
  4015de:	4b03      	ldr	r3, [pc, #12]	; (4015ec <_usart_async_write_byte+0x20>)
  4015e0:	4798      	blx	r3
  4015e2:	69ab      	ldr	r3, [r5, #24]
  4015e4:	61dc      	str	r4, [r3, #28]
  4015e6:	bd38      	pop	{r3, r4, r5, pc}
  4015e8:	00401c7c 	.word	0x00401c7c
  4015ec:	00400ced 	.word	0x00400ced

004015f0 <_usart_async_enable_byte_sent_irq>:
  4015f0:	b510      	push	{r4, lr}
  4015f2:	4604      	mov	r4, r0
  4015f4:	f240 221d 	movw	r2, #541	; 0x21d
  4015f8:	4904      	ldr	r1, [pc, #16]	; (40160c <_usart_async_enable_byte_sent_irq+0x1c>)
  4015fa:	3000      	adds	r0, #0
  4015fc:	bf18      	it	ne
  4015fe:	2001      	movne	r0, #1
  401600:	4b03      	ldr	r3, [pc, #12]	; (401610 <_usart_async_enable_byte_sent_irq+0x20>)
  401602:	4798      	blx	r3
  401604:	69a3      	ldr	r3, [r4, #24]
  401606:	2202      	movs	r2, #2
  401608:	609a      	str	r2, [r3, #8]
  40160a:	bd10      	pop	{r4, pc}
  40160c:	00401c7c 	.word	0x00401c7c
  401610:	00400ced 	.word	0x00400ced

00401614 <_usart_async_enable_tx_done_irq>:
  401614:	b510      	push	{r4, lr}
  401616:	4604      	mov	r4, r0
  401618:	f240 2226 	movw	r2, #550	; 0x226
  40161c:	4905      	ldr	r1, [pc, #20]	; (401634 <_usart_async_enable_tx_done_irq+0x20>)
  40161e:	3000      	adds	r0, #0
  401620:	bf18      	it	ne
  401622:	2001      	movne	r0, #1
  401624:	4b04      	ldr	r3, [pc, #16]	; (401638 <_usart_async_enable_tx_done_irq+0x24>)
  401626:	4798      	blx	r3
  401628:	69a3      	ldr	r3, [r4, #24]
  40162a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40162e:	609a      	str	r2, [r3, #8]
  401630:	bd10      	pop	{r4, pc}
  401632:	bf00      	nop
  401634:	00401c7c 	.word	0x00401c7c
  401638:	00400ced 	.word	0x00400ced

0040163c <_usart_async_set_irq_state>:
  40163c:	b570      	push	{r4, r5, r6, lr}
  40163e:	460c      	mov	r4, r1
  401640:	4616      	mov	r6, r2
  401642:	4605      	mov	r5, r0
  401644:	f44f 7214 	mov.w	r2, #592	; 0x250
  401648:	491b      	ldr	r1, [pc, #108]	; (4016b8 <_usart_async_set_irq_state+0x7c>)
  40164a:	3000      	adds	r0, #0
  40164c:	bf18      	it	ne
  40164e:	2001      	movne	r0, #1
  401650:	4b1a      	ldr	r3, [pc, #104]	; (4016bc <_usart_async_set_irq_state+0x80>)
  401652:	4798      	blx	r3
  401654:	b1c6      	cbz	r6, 401688 <_usart_async_set_irq_state+0x4c>
  401656:	2c02      	cmp	r4, #2
  401658:	bf18      	it	ne
  40165a:	2c00      	cmpne	r4, #0
  40165c:	d004      	beq.n	401668 <_usart_async_set_irq_state+0x2c>
  40165e:	2c01      	cmp	r4, #1
  401660:	d00a      	beq.n	401678 <_usart_async_set_irq_state+0x3c>
  401662:	2c03      	cmp	r4, #3
  401664:	d00c      	beq.n	401680 <_usart_async_set_irq_state+0x44>
  401666:	bd70      	pop	{r4, r5, r6, pc}
  401668:	69ab      	ldr	r3, [r5, #24]
  40166a:	2202      	movs	r2, #2
  40166c:	609a      	str	r2, [r3, #8]
  40166e:	69ab      	ldr	r3, [r5, #24]
  401670:	f44f 7200 	mov.w	r2, #512	; 0x200
  401674:	609a      	str	r2, [r3, #8]
  401676:	bd70      	pop	{r4, r5, r6, pc}
  401678:	69ab      	ldr	r3, [r5, #24]
  40167a:	2201      	movs	r2, #1
  40167c:	609a      	str	r2, [r3, #8]
  40167e:	bd70      	pop	{r4, r5, r6, pc}
  401680:	69ab      	ldr	r3, [r5, #24]
  401682:	4a0f      	ldr	r2, [pc, #60]	; (4016c0 <_usart_async_set_irq_state+0x84>)
  401684:	609a      	str	r2, [r3, #8]
  401686:	bd70      	pop	{r4, r5, r6, pc}
  401688:	2c02      	cmp	r4, #2
  40168a:	bf18      	it	ne
  40168c:	2c00      	cmpne	r4, #0
  40168e:	d007      	beq.n	4016a0 <_usart_async_set_irq_state+0x64>
  401690:	2c01      	cmp	r4, #1
  401692:	d00d      	beq.n	4016b0 <_usart_async_set_irq_state+0x74>
  401694:	2c03      	cmp	r4, #3
  401696:	d1e6      	bne.n	401666 <_usart_async_set_irq_state+0x2a>
  401698:	69ab      	ldr	r3, [r5, #24]
  40169a:	4a09      	ldr	r2, [pc, #36]	; (4016c0 <_usart_async_set_irq_state+0x84>)
  40169c:	60da      	str	r2, [r3, #12]
  40169e:	e7e2      	b.n	401666 <_usart_async_set_irq_state+0x2a>
  4016a0:	69ab      	ldr	r3, [r5, #24]
  4016a2:	2202      	movs	r2, #2
  4016a4:	60da      	str	r2, [r3, #12]
  4016a6:	69ab      	ldr	r3, [r5, #24]
  4016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4016ac:	60da      	str	r2, [r3, #12]
  4016ae:	bd70      	pop	{r4, r5, r6, pc}
  4016b0:	69ab      	ldr	r3, [r5, #24]
  4016b2:	2201      	movs	r2, #1
  4016b4:	60da      	str	r2, [r3, #12]
  4016b6:	bd70      	pop	{r4, r5, r6, pc}
  4016b8:	00401c7c 	.word	0x00401c7c
  4016bc:	00400ced 	.word	0x00400ced
  4016c0:	010000e0 	.word	0x010000e0

004016c4 <_usart_get_usart_async>:
  4016c4:	2000      	movs	r0, #0
  4016c6:	4770      	bx	lr

004016c8 <USART1_Handler>:
  4016c8:	b508      	push	{r3, lr}
  4016ca:	4b02      	ldr	r3, [pc, #8]	; (4016d4 <USART1_Handler+0xc>)
  4016cc:	6818      	ldr	r0, [r3, #0]
  4016ce:	4b02      	ldr	r3, [pc, #8]	; (4016d8 <USART1_Handler+0x10>)
  4016d0:	4798      	blx	r3
  4016d2:	bd08      	pop	{r3, pc}
  4016d4:	20400420 	.word	0x20400420
  4016d8:	00401449 	.word	0x00401449

004016dc <timer_task_cb>:
  4016dc:	490d      	ldr	r1, [pc, #52]	; (401714 <timer_task_cb+0x38>)
  4016de:	880b      	ldrh	r3, [r1, #0]
  4016e0:	3301      	adds	r3, #1
  4016e2:	b29b      	uxth	r3, r3
  4016e4:	800b      	strh	r3, [r1, #0]
  4016e6:	684a      	ldr	r2, [r1, #4]
  4016e8:	3201      	adds	r2, #1
  4016ea:	604a      	str	r2, [r1, #4]
  4016ec:	490a      	ldr	r1, [pc, #40]	; (401718 <timer_task_cb+0x3c>)
  4016ee:	7809      	ldrb	r1, [r1, #0]
  4016f0:	b2c9      	uxtb	r1, r1
  4016f2:	428a      	cmp	r2, r1
  4016f4:	d304      	bcc.n	401700 <timer_task_cb+0x24>
  4016f6:	4a07      	ldr	r2, [pc, #28]	; (401714 <timer_task_cb+0x38>)
  4016f8:	2101      	movs	r1, #1
  4016fa:	7211      	strb	r1, [r2, #8]
  4016fc:	2100      	movs	r1, #0
  4016fe:	6051      	str	r1, [r2, #4]
  401700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401704:	d305      	bcc.n	401712 <timer_task_cb+0x36>
  401706:	4b03      	ldr	r3, [pc, #12]	; (401714 <timer_task_cb+0x38>)
  401708:	2200      	movs	r2, #0
  40170a:	801a      	strh	r2, [r3, #0]
  40170c:	68da      	ldr	r2, [r3, #12]
  40170e:	3201      	adds	r2, #1
  401710:	60da      	str	r2, [r3, #12]
  401712:	4770      	bx	lr
  401714:	20400424 	.word	0x20400424
  401718:	20400048 	.word	0x20400048

0040171c <micro_timer_task_cb>:
  40171c:	4a05      	ldr	r2, [pc, #20]	; (401734 <micro_timer_task_cb+0x18>)
  40171e:	8a13      	ldrh	r3, [r2, #16]
  401720:	3301      	adds	r3, #1
  401722:	b29b      	uxth	r3, r3
  401724:	8213      	strh	r3, [r2, #16]
  401726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40172a:	d302      	bcc.n	401732 <micro_timer_task_cb+0x16>
  40172c:	2200      	movs	r2, #0
  40172e:	4b01      	ldr	r3, [pc, #4]	; (401734 <micro_timer_task_cb+0x18>)
  401730:	821a      	strh	r2, [r3, #16]
  401732:	4770      	bx	lr
  401734:	20400424 	.word	0x20400424

00401738 <serial_tx_cb>:
  401738:	4770      	bx	lr
	...

0040173c <serial_rx_cb>:
  40173c:	b500      	push	{lr}
  40173e:	b083      	sub	sp, #12
  401740:	2201      	movs	r2, #1
  401742:	f10d 0107 	add.w	r1, sp, #7
  401746:	480e      	ldr	r0, [pc, #56]	; (401780 <serial_rx_cb+0x44>)
  401748:	4b0e      	ldr	r3, [pc, #56]	; (401784 <serial_rx_cb+0x48>)
  40174a:	4798      	blx	r3
  40174c:	4b0e      	ldr	r3, [pc, #56]	; (401788 <serial_rx_cb+0x4c>)
  40174e:	7c9b      	ldrb	r3, [r3, #18]
  401750:	b123      	cbz	r3, 40175c <serial_rx_cb+0x20>
  401752:	2b01      	cmp	r3, #1
  401754:	d00a      	beq.n	40176c <serial_rx_cb+0x30>
  401756:	b003      	add	sp, #12
  401758:	f85d fb04 	ldr.w	pc, [sp], #4
  40175c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401760:	2b53      	cmp	r3, #83	; 0x53
  401762:	d1f8      	bne.n	401756 <serial_rx_cb+0x1a>
  401764:	2201      	movs	r2, #1
  401766:	4b08      	ldr	r3, [pc, #32]	; (401788 <serial_rx_cb+0x4c>)
  401768:	749a      	strb	r2, [r3, #18]
  40176a:	e7f4      	b.n	401756 <serial_rx_cb+0x1a>
  40176c:	f89d 2007 	ldrb.w	r2, [sp, #7]
  401770:	4b06      	ldr	r3, [pc, #24]	; (40178c <serial_rx_cb+0x50>)
  401772:	705a      	strb	r2, [r3, #1]
  401774:	4b04      	ldr	r3, [pc, #16]	; (401788 <serial_rx_cb+0x4c>)
  401776:	2200      	movs	r2, #0
  401778:	749a      	strb	r2, [r3, #18]
  40177a:	2201      	movs	r2, #1
  40177c:	74da      	strb	r2, [r3, #19]
  40177e:	e7ea      	b.n	401756 <serial_rx_cb+0x1a>
  401780:	204004b0 	.word	0x204004b0
  401784:	00400679 	.word	0x00400679
  401788:	20400424 	.word	0x20400424
  40178c:	20400048 	.word	0x20400048

00401790 <process_detector_data>:
  401790:	4a04      	ldr	r2, [pc, #16]	; (4017a4 <process_detector_data+0x14>)
  401792:	0109      	lsls	r1, r1, #4
  401794:	eb01 3020 	add.w	r0, r1, r0, asr #12
  401798:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  40179c:	3301      	adds	r3, #1
  40179e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  4017a2:	4770      	bx	lr
  4017a4:	2040051c 	.word	0x2040051c

004017a8 <add_to_buffer>:
  4017a8:	b430      	push	{r4, r5}
  4017aa:	4c16      	ldr	r4, [pc, #88]	; (401804 <add_to_buffer+0x5c>)
  4017ac:	6962      	ldr	r2, [r4, #20]
  4017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4017b2:	4d15      	ldr	r5, [pc, #84]	; (401808 <add_to_buffer+0x60>)
  4017b4:	fb03 5101 	mla	r1, r3, r1, r5
  4017b8:	5488      	strb	r0, [r1, r2]
  4017ba:	3201      	adds	r2, #1
  4017bc:	4913      	ldr	r1, [pc, #76]	; (40180c <add_to_buffer+0x64>)
  4017be:	fb81 3102 	smull	r3, r1, r1, r2
  4017c2:	17d3      	asrs	r3, r2, #31
  4017c4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  4017c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4017cc:	0059      	lsls	r1, r3, #1
  4017ce:	1a53      	subs	r3, r2, r1
  4017d0:	2264      	movs	r2, #100	; 0x64
  4017d2:	fb02 f303 	mul.w	r3, r2, r3
  4017d6:	6163      	str	r3, [r4, #20]
  4017d8:	69a2      	ldr	r2, [r4, #24]
  4017da:	4293      	cmp	r3, r2
  4017dc:	d001      	beq.n	4017e2 <add_to_buffer+0x3a>
  4017de:	bc30      	pop	{r4, r5}
  4017e0:	4770      	bx	lr
  4017e2:	3201      	adds	r2, #1
  4017e4:	4909      	ldr	r1, [pc, #36]	; (40180c <add_to_buffer+0x64>)
  4017e6:	fb81 3102 	smull	r3, r1, r1, r2
  4017ea:	17d3      	asrs	r3, r2, #31
  4017ec:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  4017f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4017f4:	0059      	lsls	r1, r3, #1
  4017f6:	1a53      	subs	r3, r2, r1
  4017f8:	2264      	movs	r2, #100	; 0x64
  4017fa:	fb02 f303 	mul.w	r3, r2, r3
  4017fe:	61a3      	str	r3, [r4, #24]
  401800:	e7ed      	b.n	4017de <add_to_buffer+0x36>
  401802:	bf00      	nop
  401804:	20400424 	.word	0x20400424
  401808:	2040061c 	.word	0x2040061c
  40180c:	66666667 	.word	0x66666667

00401810 <read_SPI_data>:
  401810:	b570      	push	{r4, r5, r6, lr}
  401812:	b084      	sub	sp, #16
  401814:	a903      	add	r1, sp, #12
  401816:	4815      	ldr	r0, [pc, #84]	; (40186c <read_SPI_data+0x5c>)
  401818:	4b15      	ldr	r3, [pc, #84]	; (401870 <read_SPI_data+0x60>)
  40181a:	4798      	blx	r3
  40181c:	4b15      	ldr	r3, [pc, #84]	; (401874 <read_SPI_data+0x64>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	9301      	str	r3, [sp, #4]
  401822:	2500      	movs	r5, #0
  401824:	e01e      	b.n	401864 <read_SPI_data+0x54>
  401826:	ab04      	add	r3, sp, #16
  401828:	442b      	add	r3, r5
  40182a:	f813 4c0c 	ldrb.w	r4, [r3, #-12]
  40182e:	0963      	lsrs	r3, r4, #5
  401830:	f004 041f 	and.w	r4, r4, #31
  401834:	2201      	movs	r2, #1
  401836:	fa02 f404 	lsl.w	r4, r2, r4
  40183a:	4e0f      	ldr	r6, [pc, #60]	; (401878 <read_SPI_data+0x68>)
  40183c:	eb06 2643 	add.w	r6, r6, r3, lsl #9
  401840:	6374      	str	r4, [r6, #52]	; 0x34
  401842:	f10d 010b 	add.w	r1, sp, #11
  401846:	9803      	ldr	r0, [sp, #12]
  401848:	4b0c      	ldr	r3, [pc, #48]	; (40187c <read_SPI_data+0x6c>)
  40184a:	4798      	blx	r3
  40184c:	6334      	str	r4, [r6, #48]	; 0x30
  40184e:	4629      	mov	r1, r5
  401850:	f89d 000b 	ldrb.w	r0, [sp, #11]
  401854:	4b0a      	ldr	r3, [pc, #40]	; (401880 <read_SPI_data+0x70>)
  401856:	4798      	blx	r3
  401858:	b2e9      	uxtb	r1, r5
  40185a:	f89d 000b 	ldrb.w	r0, [sp, #11]
  40185e:	4b09      	ldr	r3, [pc, #36]	; (401884 <read_SPI_data+0x74>)
  401860:	4798      	blx	r3
  401862:	3501      	adds	r5, #1
  401864:	2d03      	cmp	r5, #3
  401866:	ddde      	ble.n	401826 <read_SPI_data+0x16>
  401868:	b004      	add	sp, #16
  40186a:	bd70      	pop	{r4, r5, r6, pc}
  40186c:	20400498 	.word	0x20400498
  401870:	00400825 	.word	0x00400825
  401874:	00401c98 	.word	0x00401c98
  401878:	400e0e00 	.word	0x400e0e00
  40187c:	00400679 	.word	0x00400679
  401880:	004017a9 	.word	0x004017a9
  401884:	00401791 	.word	0x00401791

00401888 <get_from_buffer>:
  401888:	4a0f      	ldr	r2, [pc, #60]	; (4018c8 <get_from_buffer+0x40>)
  40188a:	6993      	ldr	r3, [r2, #24]
  40188c:	6952      	ldr	r2, [r2, #20]
  40188e:	4293      	cmp	r3, r2
  401890:	d017      	beq.n	4018c2 <get_from_buffer+0x3a>
  401892:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  401896:	4a0d      	ldr	r2, [pc, #52]	; (4018cc <get_from_buffer+0x44>)
  401898:	fb01 2000 	mla	r0, r1, r0, r2
  40189c:	5cc0      	ldrb	r0, [r0, r3]
  40189e:	b2c0      	uxtb	r0, r0
  4018a0:	1c5a      	adds	r2, r3, #1
  4018a2:	490b      	ldr	r1, [pc, #44]	; (4018d0 <get_from_buffer+0x48>)
  4018a4:	fb81 3102 	smull	r3, r1, r1, r2
  4018a8:	17d3      	asrs	r3, r2, #31
  4018aa:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  4018ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4018b2:	0059      	lsls	r1, r3, #1
  4018b4:	1a53      	subs	r3, r2, r1
  4018b6:	2264      	movs	r2, #100	; 0x64
  4018b8:	fb02 f303 	mul.w	r3, r2, r3
  4018bc:	4a02      	ldr	r2, [pc, #8]	; (4018c8 <get_from_buffer+0x40>)
  4018be:	6193      	str	r3, [r2, #24]
  4018c0:	4770      	bx	lr
  4018c2:	20ff      	movs	r0, #255	; 0xff
  4018c4:	4770      	bx	lr
  4018c6:	bf00      	nop
  4018c8:	20400424 	.word	0x20400424
  4018cc:	2040061c 	.word	0x2040061c
  4018d0:	66666667 	.word	0x66666667

004018d4 <main>:
  4018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4018d6:	b0a5      	sub	sp, #148	; 0x94
  4018d8:	4b66      	ldr	r3, [pc, #408]	; (401a74 <main+0x1a0>)
  4018da:	4798      	blx	r3
  4018dc:	4c66      	ldr	r4, [pc, #408]	; (401a78 <main+0x1a4>)
  4018de:	2501      	movs	r5, #1
  4018e0:	6265      	str	r5, [r4, #36]	; 0x24
  4018e2:	4b66      	ldr	r3, [pc, #408]	; (401a7c <main+0x1a8>)
  4018e4:	62a3      	str	r3, [r4, #40]	; 0x28
  4018e6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  4018ea:	4f65      	ldr	r7, [pc, #404]	; (401a80 <main+0x1ac>)
  4018ec:	f104 011c 	add.w	r1, r4, #28
  4018f0:	4638      	mov	r0, r7
  4018f2:	4e64      	ldr	r6, [pc, #400]	; (401a84 <main+0x1b0>)
  4018f4:	47b0      	blx	r6
  4018f6:	4638      	mov	r0, r7
  4018f8:	4b63      	ldr	r3, [pc, #396]	; (401a88 <main+0x1b4>)
  4018fa:	4798      	blx	r3
  4018fc:	63a5      	str	r5, [r4, #56]	; 0x38
  4018fe:	4b63      	ldr	r3, [pc, #396]	; (401a8c <main+0x1b8>)
  401900:	63e3      	str	r3, [r4, #60]	; 0x3c
  401902:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  401906:	f104 0130 	add.w	r1, r4, #48	; 0x30
  40190a:	4861      	ldr	r0, [pc, #388]	; (401a90 <main+0x1bc>)
  40190c:	47b0      	blx	r6
  40190e:	4b61      	ldr	r3, [pc, #388]	; (401a94 <main+0x1c0>)
  401910:	785a      	ldrb	r2, [r3, #1]
  401912:	b2d2      	uxtb	r2, r2
  401914:	789b      	ldrb	r3, [r3, #2]
  401916:	b2db      	uxtb	r3, r3
  401918:	429a      	cmp	r2, r3
  40191a:	d00b      	beq.n	401934 <main+0x60>
  40191c:	4b5d      	ldr	r3, [pc, #372]	; (401a94 <main+0x1c0>)
  40191e:	785b      	ldrb	r3, [r3, #1]
  401920:	b2db      	uxtb	r3, r3
  401922:	2b02      	cmp	r3, #2
  401924:	d124      	bne.n	401970 <main+0x9c>
  401926:	485a      	ldr	r0, [pc, #360]	; (401a90 <main+0x1bc>)
  401928:	4b57      	ldr	r3, [pc, #348]	; (401a88 <main+0x1b4>)
  40192a:	4798      	blx	r3
  40192c:	4a59      	ldr	r2, [pc, #356]	; (401a94 <main+0x1c0>)
  40192e:	7853      	ldrb	r3, [r2, #1]
  401930:	b2db      	uxtb	r3, r3
  401932:	7093      	strb	r3, [r2, #2]
  401934:	4b58      	ldr	r3, [pc, #352]	; (401a98 <main+0x1c4>)
  401936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40193a:	611a      	str	r2, [r3, #16]
  40193c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401940:	611a      	str	r2, [r3, #16]
  401942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401946:	611a      	str	r2, [r3, #16]
  401948:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40194c:	611a      	str	r2, [r3, #16]
  40194e:	4853      	ldr	r0, [pc, #332]	; (401a9c <main+0x1c8>)
  401950:	4b53      	ldr	r3, [pc, #332]	; (401aa0 <main+0x1cc>)
  401952:	4798      	blx	r3
  401954:	4c53      	ldr	r4, [pc, #332]	; (401aa4 <main+0x1d0>)
  401956:	4a54      	ldr	r2, [pc, #336]	; (401aa8 <main+0x1d4>)
  401958:	2101      	movs	r1, #1
  40195a:	4620      	mov	r0, r4
  40195c:	4d53      	ldr	r5, [pc, #332]	; (401aac <main+0x1d8>)
  40195e:	47a8      	blx	r5
  401960:	4a53      	ldr	r2, [pc, #332]	; (401ab0 <main+0x1dc>)
  401962:	2100      	movs	r1, #0
  401964:	4620      	mov	r0, r4
  401966:	47a8      	blx	r5
  401968:	4620      	mov	r0, r4
  40196a:	4b52      	ldr	r3, [pc, #328]	; (401ab4 <main+0x1e0>)
  40196c:	4798      	blx	r3
  40196e:	e03c      	b.n	4019ea <main+0x116>
  401970:	4847      	ldr	r0, [pc, #284]	; (401a90 <main+0x1bc>)
  401972:	4b51      	ldr	r3, [pc, #324]	; (401ab8 <main+0x1e4>)
  401974:	4798      	blx	r3
  401976:	e7d9      	b.n	40192c <main+0x58>
  401978:	4b46      	ldr	r3, [pc, #280]	; (401a94 <main+0x1c0>)
  40197a:	785b      	ldrb	r3, [r3, #1]
  40197c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  401980:	4b3d      	ldr	r3, [pc, #244]	; (401a78 <main+0x1a4>)
  401982:	68da      	ldr	r2, [r3, #12]
  401984:	9212      	str	r2, [sp, #72]	; 0x48
  401986:	881b      	ldrh	r3, [r3, #0]
  401988:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  40198c:	2000      	movs	r0, #0
  40198e:	e00c      	b.n	4019aa <main+0xd6>
  401990:	eb02 1300 	add.w	r3, r2, r0, lsl #4
  401994:	4949      	ldr	r1, [pc, #292]	; (401abc <main+0x1e8>)
  401996:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40199a:	ac24      	add	r4, sp, #144	; 0x90
  40199c:	4423      	add	r3, r4
  40199e:	f803 1c42 	strb.w	r1, [r3, #-66]
  4019a2:	3201      	adds	r2, #1
  4019a4:	2a0f      	cmp	r2, #15
  4019a6:	ddf3      	ble.n	401990 <main+0xbc>
  4019a8:	3001      	adds	r0, #1
  4019aa:	2803      	cmp	r0, #3
  4019ac:	dc01      	bgt.n	4019b2 <main+0xde>
  4019ae:	2200      	movs	r2, #0
  4019b0:	e7f8      	b.n	4019a4 <main+0xd0>
  4019b2:	2240      	movs	r2, #64	; 0x40
  4019b4:	2100      	movs	r1, #0
  4019b6:	4841      	ldr	r0, [pc, #260]	; (401abc <main+0x1e8>)
  4019b8:	4b41      	ldr	r3, [pc, #260]	; (401ac0 <main+0x1ec>)
  4019ba:	4798      	blx	r3
  4019bc:	466c      	mov	r4, sp
  4019be:	ad15      	add	r5, sp, #84	; 0x54
  4019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4019c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4019c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4019c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4019ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4019cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4019d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4019d4:	ab11      	add	r3, sp, #68	; 0x44
  4019d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4019d8:	4c3a      	ldr	r4, [pc, #232]	; (401ac4 <main+0x1f0>)
  4019da:	47a0      	blx	r4
  4019dc:	4b26      	ldr	r3, [pc, #152]	; (401a78 <main+0x1a4>)
  4019de:	7cdb      	ldrb	r3, [r3, #19]
  4019e0:	2b01      	cmp	r3, #1
  4019e2:	d02d      	beq.n	401a40 <main+0x16c>
  4019e4:	2200      	movs	r2, #0
  4019e6:	4b24      	ldr	r3, [pc, #144]	; (401a78 <main+0x1a4>)
  4019e8:	721a      	strb	r2, [r3, #8]
  4019ea:	4b37      	ldr	r3, [pc, #220]	; (401ac8 <main+0x1f4>)
  4019ec:	4798      	blx	r3
  4019ee:	4b22      	ldr	r3, [pc, #136]	; (401a78 <main+0x1a4>)
  4019f0:	7a1b      	ldrb	r3, [r3, #8]
  4019f2:	2b00      	cmp	r3, #0
  4019f4:	d0f9      	beq.n	4019ea <main+0x116>
  4019f6:	4b27      	ldr	r3, [pc, #156]	; (401a94 <main+0x1c0>)
  4019f8:	785b      	ldrb	r3, [r3, #1]
  4019fa:	b2db      	uxtb	r3, r3
  4019fc:	2b01      	cmp	r3, #1
  4019fe:	d0bb      	beq.n	401978 <main+0xa4>
  401a00:	2b02      	cmp	r3, #2
  401a02:	d1eb      	bne.n	4019dc <main+0x108>
  401a04:	4b23      	ldr	r3, [pc, #140]	; (401a94 <main+0x1c0>)
  401a06:	785b      	ldrb	r3, [r3, #1]
  401a08:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  401a0c:	4b1a      	ldr	r3, [pc, #104]	; (401a78 <main+0x1a4>)
  401a0e:	68da      	ldr	r2, [r3, #12]
  401a10:	9212      	str	r2, [sp, #72]	; 0x48
  401a12:	881a      	ldrh	r2, [r3, #0]
  401a14:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
  401a18:	8a1b      	ldrh	r3, [r3, #16]
  401a1a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  401a1e:	2400      	movs	r4, #0
  401a20:	e007      	b.n	401a32 <main+0x15e>
  401a22:	b2e0      	uxtb	r0, r4
  401a24:	4b29      	ldr	r3, [pc, #164]	; (401acc <main+0x1f8>)
  401a26:	4798      	blx	r3
  401a28:	ab24      	add	r3, sp, #144	; 0x90
  401a2a:	4423      	add	r3, r4
  401a2c:	f803 0c40 	strb.w	r0, [r3, #-64]
  401a30:	3401      	adds	r4, #1
  401a32:	2c03      	cmp	r4, #3
  401a34:	ddf5      	ble.n	401a22 <main+0x14e>
  401a36:	ab11      	add	r3, sp, #68	; 0x44
  401a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401a3a:	4c25      	ldr	r4, [pc, #148]	; (401ad0 <main+0x1fc>)
  401a3c:	47a0      	blx	r4
  401a3e:	e7cd      	b.n	4019dc <main+0x108>
  401a40:	4b14      	ldr	r3, [pc, #80]	; (401a94 <main+0x1c0>)
  401a42:	785b      	ldrb	r3, [r3, #1]
  401a44:	b2db      	uxtb	r3, r3
  401a46:	2b01      	cmp	r3, #1
  401a48:	d00a      	beq.n	401a60 <main+0x18c>
  401a4a:	2b02      	cmp	r3, #2
  401a4c:	d1ca      	bne.n	4019e4 <main+0x110>
  401a4e:	a811      	add	r0, sp, #68	; 0x44
  401a50:	4b20      	ldr	r3, [pc, #128]	; (401ad4 <main+0x200>)
  401a52:	4798      	blx	r3
  401a54:	2210      	movs	r2, #16
  401a56:	a911      	add	r1, sp, #68	; 0x44
  401a58:	4812      	ldr	r0, [pc, #72]	; (401aa4 <main+0x1d0>)
  401a5a:	4b1f      	ldr	r3, [pc, #124]	; (401ad8 <main+0x204>)
  401a5c:	4798      	blx	r3
  401a5e:	e7c1      	b.n	4019e4 <main+0x110>
  401a60:	a811      	add	r0, sp, #68	; 0x44
  401a62:	4b1e      	ldr	r3, [pc, #120]	; (401adc <main+0x208>)
  401a64:	4798      	blx	r3
  401a66:	224c      	movs	r2, #76	; 0x4c
  401a68:	a911      	add	r1, sp, #68	; 0x44
  401a6a:	480e      	ldr	r0, [pc, #56]	; (401aa4 <main+0x1d0>)
  401a6c:	4b1a      	ldr	r3, [pc, #104]	; (401ad8 <main+0x204>)
  401a6e:	4798      	blx	r3
  401a70:	e7b8      	b.n	4019e4 <main+0x110>
  401a72:	bf00      	nop
  401a74:	004001d5 	.word	0x004001d5
  401a78:	20400424 	.word	0x20400424
  401a7c:	004016dd 	.word	0x004016dd
  401a80:	20400500 	.word	0x20400500
  401a84:	004009bd 	.word	0x004009bd
  401a88:	00400945 	.word	0x00400945
  401a8c:	0040171d 	.word	0x0040171d
  401a90:	20400474 	.word	0x20400474
  401a94:	20400048 	.word	0x20400048
  401a98:	400e0e00 	.word	0x400e0e00
  401a9c:	20400498 	.word	0x20400498
  401aa0:	00400745 	.word	0x00400745
  401aa4:	204004b0 	.word	0x204004b0
  401aa8:	00401739 	.word	0x00401739
  401aac:	00400c79 	.word	0x00400c79
  401ab0:	0040173d 	.word	0x0040173d
  401ab4:	00400c4d 	.word	0x00400c4d
  401ab8:	00400981 	.word	0x00400981
  401abc:	2040051c 	.word	0x2040051c
  401ac0:	00401b3f 	.word	0x00401b3f
  401ac4:	004001e1 	.word	0x004001e1
  401ac8:	00401811 	.word	0x00401811
  401acc:	00401889 	.word	0x00401889
  401ad0:	004002c1 	.word	0x004002c1
  401ad4:	0040031d 	.word	0x0040031d
  401ad8:	00400649 	.word	0x00400649
  401adc:	0040023d 	.word	0x0040023d

00401ae0 <__libc_init_array>:
  401ae0:	b570      	push	{r4, r5, r6, lr}
  401ae2:	4e0d      	ldr	r6, [pc, #52]	; (401b18 <__libc_init_array+0x38>)
  401ae4:	4c0d      	ldr	r4, [pc, #52]	; (401b1c <__libc_init_array+0x3c>)
  401ae6:	1ba4      	subs	r4, r4, r6
  401ae8:	10a4      	asrs	r4, r4, #2
  401aea:	2500      	movs	r5, #0
  401aec:	42a5      	cmp	r5, r4
  401aee:	d109      	bne.n	401b04 <__libc_init_array+0x24>
  401af0:	4e0b      	ldr	r6, [pc, #44]	; (401b20 <__libc_init_array+0x40>)
  401af2:	4c0c      	ldr	r4, [pc, #48]	; (401b24 <__libc_init_array+0x44>)
  401af4:	f000 f8d2 	bl	401c9c <_init>
  401af8:	1ba4      	subs	r4, r4, r6
  401afa:	10a4      	asrs	r4, r4, #2
  401afc:	2500      	movs	r5, #0
  401afe:	42a5      	cmp	r5, r4
  401b00:	d105      	bne.n	401b0e <__libc_init_array+0x2e>
  401b02:	bd70      	pop	{r4, r5, r6, pc}
  401b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401b08:	4798      	blx	r3
  401b0a:	3501      	adds	r5, #1
  401b0c:	e7ee      	b.n	401aec <__libc_init_array+0xc>
  401b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401b12:	4798      	blx	r3
  401b14:	3501      	adds	r5, #1
  401b16:	e7f2      	b.n	401afe <__libc_init_array+0x1e>
  401b18:	00401ca8 	.word	0x00401ca8
  401b1c:	00401ca8 	.word	0x00401ca8
  401b20:	00401ca8 	.word	0x00401ca8
  401b24:	00401cac 	.word	0x00401cac

00401b28 <memcpy>:
  401b28:	b510      	push	{r4, lr}
  401b2a:	1e43      	subs	r3, r0, #1
  401b2c:	440a      	add	r2, r1
  401b2e:	4291      	cmp	r1, r2
  401b30:	d100      	bne.n	401b34 <memcpy+0xc>
  401b32:	bd10      	pop	{r4, pc}
  401b34:	f811 4b01 	ldrb.w	r4, [r1], #1
  401b38:	f803 4f01 	strb.w	r4, [r3, #1]!
  401b3c:	e7f7      	b.n	401b2e <memcpy+0x6>

00401b3e <memset>:
  401b3e:	4402      	add	r2, r0
  401b40:	4603      	mov	r3, r0
  401b42:	4293      	cmp	r3, r2
  401b44:	d100      	bne.n	401b48 <memset+0xa>
  401b46:	4770      	bx	lr
  401b48:	f803 1b01 	strb.w	r1, [r3], #1
  401b4c:	e7f9      	b.n	401b42 <memset+0x4>
  401b4e:	0000      	movs	r0, r0
  401b50:	682f2e2e 	.word	0x682f2e2e
  401b54:	732f6c61 	.word	0x732f6c61
  401b58:	682f6372 	.word	0x682f6372
  401b5c:	695f6c61 	.word	0x695f6c61
  401b60:	00632e6f 	.word	0x00632e6f
  401b64:	682f2e2e 	.word	0x682f2e2e
  401b68:	732f6c61 	.word	0x732f6c61
  401b6c:	682f6372 	.word	0x682f6372
  401b70:	725f6c61 	.word	0x725f6c61
  401b74:	5f646e61 	.word	0x5f646e61
  401b78:	636e7973 	.word	0x636e7973
  401b7c:	0000632e 	.word	0x0000632e
  401b80:	682f2e2e 	.word	0x682f2e2e
  401b84:	732f6c61 	.word	0x732f6c61
  401b88:	682f6372 	.word	0x682f6372
  401b8c:	735f6c61 	.word	0x735f6c61
  401b90:	6d5f6970 	.word	0x6d5f6970
  401b94:	6e79735f 	.word	0x6e79735f
  401b98:	00632e63 	.word	0x00632e63
  401b9c:	682f2e2e 	.word	0x682f2e2e
  401ba0:	732f6c61 	.word	0x732f6c61
  401ba4:	682f6372 	.word	0x682f6372
  401ba8:	745f6c61 	.word	0x745f6c61
  401bac:	72656d69 	.word	0x72656d69
  401bb0:	0000632e 	.word	0x0000632e
  401bb4:	682f2e2e 	.word	0x682f2e2e
  401bb8:	732f6c61 	.word	0x732f6c61
  401bbc:	682f6372 	.word	0x682f6372
  401bc0:	755f6c61 	.word	0x755f6c61
  401bc4:	74726173 	.word	0x74726173
  401bc8:	7973615f 	.word	0x7973615f
  401bcc:	632e636e 	.word	0x632e636e
  401bd0:	00000000 	.word	0x00000000
  401bd4:	682f2e2e 	.word	0x682f2e2e
  401bd8:	752f6c61 	.word	0x752f6c61
  401bdc:	736c6974 	.word	0x736c6974
  401be0:	6372732f 	.word	0x6372732f
  401be4:	6974752f 	.word	0x6974752f
  401be8:	6c5f736c 	.word	0x6c5f736c
  401bec:	2e747369 	.word	0x2e747369
  401bf0:	00000063 	.word	0x00000063
  401bf4:	682f2e2e 	.word	0x682f2e2e
  401bf8:	752f6c61 	.word	0x752f6c61
  401bfc:	736c6974 	.word	0x736c6974
  401c00:	6372732f 	.word	0x6372732f
  401c04:	6974752f 	.word	0x6974752f
  401c08:	725f736c 	.word	0x725f736c
  401c0c:	62676e69 	.word	0x62676e69
  401c10:	65666675 	.word	0x65666675
  401c14:	00632e72 	.word	0x00632e72

00401c18 <spi_regs>:
  401c18:	00000000 80000000 00000001 04961602     ................
  401c28:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401c38:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  401c48:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
  401c58:	682f2e2e 742f6c70 2f676e72 5f6c7068     ../hpl/trng/hpl_
  401c68:	676e7274 0000632e                       trng.c..

00401c70 <_usarts>:
  401c70:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  401c80:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  401c90:	632e7472 00000000 1f1e1d1c              rt.c........

00401c9c <_init>:
  401c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c9e:	bf00      	nop
  401ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401ca2:	bc08      	pop	{r3}
  401ca4:	469e      	mov	lr, r3
  401ca6:	4770      	bx	lr

00401ca8 <__init_array_start>:
  401ca8:	0040018d 	.word	0x0040018d

00401cac <_fini>:
  401cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401cae:	bf00      	nop
  401cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401cb2:	bc08      	pop	{r3}
  401cb4:	469e      	mov	lr, r3
  401cb6:	4770      	bx	lr

00401cb8 <__fini_array_start>:
  401cb8:	00400169 	.word	0x00400169
