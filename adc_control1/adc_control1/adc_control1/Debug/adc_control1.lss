
adc_control1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031d4  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20400000  004031d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000020cc  204001dc  004033b0  000201dc  2**2
                  ALLOC
  3 .heap         00000200  204022a8  0040547c  000201dc  2**0
                  ALLOC
  4 .stack        00000400  204024a8  0040567c  000201dc  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011f9b  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025af  00000000  00000000  000321fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007a26  00000000  00000000  000347ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008c0  00000000  00000000  0003c1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000810  00000000  00000000  0003ca93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003d9db  00000000  00000000  0003d2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ebe7  00000000  00000000  0007ac7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001497b6  00000000  00000000  00089865  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002028  00000000  00000000  001d301c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a8 28 40 20 e5 01 40 00 e1 01 40 00 e1 01 40 00     .(@ ..@...@...@.
  400010:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40003c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40004c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40005c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40006c:	31 13 40 00 e1 01 40 00 e1 01 40 00 19 1a 40 00     1.@...@...@...@.
  40007c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40008c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40009c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ac:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000bc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000cc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000dc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ec:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000fc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40010c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ......@...@...@.
  40012c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40013c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40014c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40015c:	e1 01 40 00 e1 01 40 00 e1 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204001dc 	.word	0x204001dc
  400184:	00000000 	.word	0x00000000
  400188:	004031d4 	.word	0x004031d4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004031d4 	.word	0x004031d4
  4001c8:	204001e0 	.word	0x204001e0
  4001cc:	004031d4 	.word	0x004031d4
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	004003b5 	.word	0x004003b5

004001e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e0:	e7fe      	b.n	4001e0 <Dummy_Handler>
	...

004001e4 <Reset_Handler>:
{
  4001e4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001e6:	4b10      	ldr	r3, [pc, #64]	; (400228 <Reset_Handler+0x44>)
  4001e8:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x48>)
  4001ea:	429a      	cmp	r2, r3
  4001ec:	d009      	beq.n	400202 <Reset_Handler+0x1e>
  4001ee:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x44>)
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <Reset_Handler+0x48>)
  4001f2:	e003      	b.n	4001fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001f4:	6811      	ldr	r1, [r2, #0]
  4001f6:	6019      	str	r1, [r3, #0]
  4001f8:	3304      	adds	r3, #4
  4001fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001fc:	490c      	ldr	r1, [pc, #48]	; (400230 <Reset_Handler+0x4c>)
  4001fe:	428b      	cmp	r3, r1
  400200:	d3f8      	bcc.n	4001f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400202:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x50>)
  400204:	e002      	b.n	40020c <Reset_Handler+0x28>
                *pDest++ = 0;
  400206:	2200      	movs	r2, #0
  400208:	601a      	str	r2, [r3, #0]
  40020a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020c:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x54>)
  40020e:	4293      	cmp	r3, r2
  400210:	d3f9      	bcc.n	400206 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x58>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x5c>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x60>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x64>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x40>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	004031d4 	.word	0x004031d4
  400230:	204001dc 	.word	0x204001dc
  400234:	204001dc 	.word	0x204001dc
  400238:	204022a8 	.word	0x204022a8
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	00401a2d 	.word	0x00401a2d
  400248:	00400849 	.word	0x00400849

0040024c <convert_complete_intr>:
	usart_async_init(&EDBG_COM, USART1, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, _usart_get_usart_async());
}

static void convert_complete_intr(void)
{
	convert_complete_flag = 1;
  40024c:	2201      	movs	r2, #1
  40024e:	4b01      	ldr	r3, [pc, #4]	; (400254 <convert_complete_intr+0x8>)
  400250:	601a      	str	r2, [r3, #0]
  400252:	4770      	bx	lr
  400254:	204001f8 	.word	0x204001f8

00400258 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400258:	4b03      	ldr	r3, [pc, #12]	; (400268 <EXTERNAL_IRQ_0_init+0x10>)
  40025a:	2204      	movs	r2, #4
  40025c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40025e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400260:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400264:	601a      	str	r2, [r3, #0]
  400266:	4770      	bx	lr
  400268:	400e1000 	.word	0x400e1000

0040026c <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40026c:	4b11      	ldr	r3, [pc, #68]	; (4002b4 <SPI_0_PORT_init+0x48>)
  40026e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400270:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400274:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400276:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400278:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40027c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40027e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400282:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400286:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40028a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40028e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400292:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400294:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400298:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40029a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40029c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4002a0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4002a8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4002ae:	605a      	str	r2, [r3, #4]
  4002b0:	4770      	bx	lr
  4002b2:	bf00      	nop
  4002b4:	400e1400 	.word	0x400e1400

004002b8 <SPI_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002b8:	4b04      	ldr	r3, [pc, #16]	; (4002cc <SPI_0_CLOCK_init+0x14>)
  4002ba:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4002bc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4002c0:	d103      	bne.n	4002ca <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002c6:	4b01      	ldr	r3, [pc, #4]	; (4002cc <SPI_0_CLOCK_init+0x14>)
  4002c8:	611a      	str	r2, [r3, #16]
  4002ca:	4770      	bx	lr
  4002cc:	400e0600 	.word	0x400e0600

004002d0 <SPI_0_init>:
{
  4002d0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4002d2:	4b08      	ldr	r3, [pc, #32]	; (4002f4 <SPI_0_init+0x24>)
  4002d4:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <SPI_0_init+0x28>)
  4002d8:	4798      	blx	r3
  4002da:	4c08      	ldr	r4, [pc, #32]	; (4002fc <SPI_0_init+0x2c>)
  4002dc:	4601      	mov	r1, r0
  4002de:	4620      	mov	r0, r4
  4002e0:	4b07      	ldr	r3, [pc, #28]	; (400300 <SPI_0_init+0x30>)
  4002e2:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4002e4:	4907      	ldr	r1, [pc, #28]	; (400304 <SPI_0_init+0x34>)
  4002e6:	4620      	mov	r0, r4
  4002e8:	4b07      	ldr	r3, [pc, #28]	; (400308 <SPI_0_init+0x38>)
  4002ea:	4798      	blx	r3
	SPI_0_PORT_init();
  4002ec:	4b07      	ldr	r3, [pc, #28]	; (40030c <SPI_0_init+0x3c>)
  4002ee:	4798      	blx	r3
  4002f0:	bd10      	pop	{r4, pc}
  4002f2:	bf00      	nop
  4002f4:	004002b9 	.word	0x004002b9
  4002f8:	00401669 	.word	0x00401669
  4002fc:	2040228c 	.word	0x2040228c
  400300:	00400b75 	.word	0x00400b75
  400304:	40008000 	.word	0x40008000
  400308:	00400b95 	.word	0x00400b95
  40030c:	0040026d 	.word	0x0040026d

00400310 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400310:	4b04      	ldr	r3, [pc, #16]	; (400324 <EDBG_COM_CLOCK_init+0x14>)
  400312:	699b      	ldr	r3, [r3, #24]
  400314:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400318:	d103      	bne.n	400322 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40031a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40031e:	4b01      	ldr	r3, [pc, #4]	; (400324 <EDBG_COM_CLOCK_init+0x14>)
  400320:	611a      	str	r2, [r3, #16]
  400322:	4770      	bx	lr
  400324:	400e0600 	.word	0x400e0600

00400328 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400328:	4b0f      	ldr	r3, [pc, #60]	; (400368 <EDBG_COM_PORT_init+0x40>)
  40032a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40032c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400330:	671a      	str	r2, [r3, #112]	; 0x70
  400332:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400334:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400338:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40033a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40033e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400340:	4a0a      	ldr	r2, [pc, #40]	; (40036c <EDBG_COM_PORT_init+0x44>)
  400342:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400346:	f043 0310 	orr.w	r3, r3, #16
  40034a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40034e:	4b08      	ldr	r3, [pc, #32]	; (400370 <EDBG_COM_PORT_init+0x48>)
  400350:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400352:	f042 0210 	orr.w	r2, r2, #16
  400356:	671a      	str	r2, [r3, #112]	; 0x70
  400358:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40035a:	f042 0210 	orr.w	r2, r2, #16
  40035e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400360:	2210      	movs	r2, #16
  400362:	605a      	str	r2, [r3, #4]
  400364:	4770      	bx	lr
  400366:	bf00      	nop
  400368:	400e0e00 	.word	0x400e0e00
  40036c:	40088000 	.word	0x40088000
  400370:	400e1000 	.word	0x400e1000

00400374 <EDBG_COM_init>:
{
  400374:	b510      	push	{r4, lr}
  400376:	b082      	sub	sp, #8
	EDBG_COM_CLOCK_init();
  400378:	4b07      	ldr	r3, [pc, #28]	; (400398 <EDBG_COM_init+0x24>)
  40037a:	4798      	blx	r3
	EDBG_COM_PORT_init();
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <EDBG_COM_init+0x28>)
  40037e:	4798      	blx	r3
	usart_async_init(&EDBG_COM, USART1, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, _usart_get_usart_async());
  400380:	4b07      	ldr	r3, [pc, #28]	; (4003a0 <EDBG_COM_init+0x2c>)
  400382:	4798      	blx	r3
  400384:	9000      	str	r0, [sp, #0]
  400386:	2310      	movs	r3, #16
  400388:	4a06      	ldr	r2, [pc, #24]	; (4003a4 <EDBG_COM_init+0x30>)
  40038a:	4907      	ldr	r1, [pc, #28]	; (4003a8 <EDBG_COM_init+0x34>)
  40038c:	4807      	ldr	r0, [pc, #28]	; (4003ac <EDBG_COM_init+0x38>)
  40038e:	4c08      	ldr	r4, [pc, #32]	; (4003b0 <EDBG_COM_init+0x3c>)
  400390:	47a0      	blx	r4
}
  400392:	b002      	add	sp, #8
  400394:	bd10      	pop	{r4, pc}
  400396:	bf00      	nop
  400398:	00400311 	.word	0x00400311
  40039c:	00400329 	.word	0x00400329
  4003a0:	00401a15 	.word	0x00401a15
  4003a4:	204001fc 	.word	0x204001fc
  4003a8:	40028000 	.word	0x40028000
  4003ac:	2040223c 	.word	0x2040223c
  4003b0:	00400e45 	.word	0x00400e45

004003b4 <system_init>:
}


void system_init(void)
{
  4003b4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4003b6:	4b24      	ldr	r3, [pc, #144]	; (400448 <system_init+0x94>)
  4003b8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003ba:	4b24      	ldr	r3, [pc, #144]	; (40044c <system_init+0x98>)
  4003bc:	699b      	ldr	r3, [r3, #24]
  4003be:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4003c2:	d103      	bne.n	4003cc <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4003c8:	4b20      	ldr	r3, [pc, #128]	; (40044c <system_init+0x98>)
  4003ca:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003cc:	4b1f      	ldr	r3, [pc, #124]	; (40044c <system_init+0x98>)
  4003ce:	699b      	ldr	r3, [r3, #24]
  4003d0:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4003d4:	d103      	bne.n	4003de <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003da:	4b1c      	ldr	r3, [pc, #112]	; (40044c <system_init+0x98>)
  4003dc:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4003de:	4a1c      	ldr	r2, [pc, #112]	; (400450 <system_init+0x9c>)
  4003e0:	6853      	ldr	r3, [r2, #4]
  4003e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4003e6:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_SODR = mask;
  4003e8:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
  4003ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4003f0:	6313      	str	r3, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4003f2:	6113      	str	r3, [r2, #16]
	((Pio *)hw)->PIO_PER = mask;
  4003f4:	6013      	str	r3, [r2, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4003f6:	4b17      	ldr	r3, [pc, #92]	; (400454 <system_init+0xa0>)
  4003f8:	2108      	movs	r1, #8
  4003fa:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4003fc:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4003fe:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400400:	4915      	ldr	r1, [pc, #84]	; (400458 <system_init+0xa4>)
  400402:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  400406:	6308      	str	r0, [r1, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400408:	6108      	str	r0, [r1, #16]
	((Pio *)hw)->PIO_PER = mask;
  40040a:	6008      	str	r0, [r1, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40040c:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
  400410:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400414:	6308      	str	r0, [r1, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400416:	6108      	str	r0, [r1, #16]
	((Pio *)hw)->PIO_PER = mask;
  400418:	6008      	str	r0, [r1, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40041a:	2101      	movs	r1, #1
  40041c:	6351      	str	r1, [r2, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40041e:	6111      	str	r1, [r2, #16]
	((Pio *)hw)->PIO_PER = mask;
  400420:	6011      	str	r1, [r2, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400422:	2204      	movs	r2, #4
  400424:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400426:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400428:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40042c:	601a      	str	r2, [r3, #0]
	
	gpio_set_pin_direction(ADC_BUSYn_5V, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(ADC_BUSYn_5V, GPIO_PULL_OFF);
	gpio_set_pin_function(ADC_BUSYn_5V, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
  40042e:	4b0b      	ldr	r3, [pc, #44]	; (40045c <system_init+0xa8>)
  400430:	4798      	blx	r3

	SPI_0_init();
  400432:	4b0b      	ldr	r3, [pc, #44]	; (400460 <system_init+0xac>)
  400434:	4798      	blx	r3
	EDBG_COM_init();
  400436:	4b0b      	ldr	r3, [pc, #44]	; (400464 <system_init+0xb0>)
  400438:	4798      	blx	r3

	ext_irq_init();
  40043a:	4b0b      	ldr	r3, [pc, #44]	; (400468 <system_init+0xb4>)
  40043c:	4798      	blx	r3

	ext_irq_register(ADC_BUSYn_5V, convert_complete_intr);
  40043e:	490b      	ldr	r1, [pc, #44]	; (40046c <system_init+0xb8>)
  400440:	2022      	movs	r0, #34	; 0x22
  400442:	4b0b      	ldr	r3, [pc, #44]	; (400470 <system_init+0xbc>)
  400444:	4798      	blx	r3
  400446:	bd08      	pop	{r3, pc}
  400448:	004010dd 	.word	0x004010dd
  40044c:	400e0600 	.word	0x400e0600
  400450:	400e1850 	.word	0x400e1850
  400454:	400e1000 	.word	0x400e1000
  400458:	400e1400 	.word	0x400e1400
  40045c:	00400259 	.word	0x00400259
  400460:	004002d1 	.word	0x004002d1
  400464:	00400375 	.word	0x00400375
  400468:	00400a25 	.word	0x00400a25
  40046c:	0040024d 	.word	0x0040024d
  400470:	00400a59 	.word	0x00400a59

00400474 <tx_cb_EDBG_COM>:
	tmp = ((Pio *)hw)->PIO_ODSR;
  400474:	4a04      	ldr	r2, [pc, #16]	; (400488 <tx_cb_EDBG_COM+0x14>)
  400476:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  400478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  40047c:	43d9      	mvns	r1, r3
  40047e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
	((Pio *)hw)->PIO_SODR = mask;
  400482:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400484:	6353      	str	r3, [r2, #52]	; 0x34
  400486:	4770      	bx	lr
  400488:	400e0e00 	.word	0x400e0e00

0040048c <rx_cb_EDBG_COM>:
}

static void rx_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
	/* Receive completed */
	data_arrived = 1;
  40048c:	2201      	movs	r2, #1
  40048e:	4b01      	ldr	r3, [pc, #4]	; (400494 <rx_cb_EDBG_COM+0x8>)
  400490:	601a      	str	r2, [r3, #0]
  400492:	4770      	bx	lr
  400494:	2040020c 	.word	0x2040020c

00400498 <err_cb_EDBG_COM>:
}

static void err_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
  400498:	4770      	bx	lr
	...

0040049c <put_char>:
	/* error handle */
//	io_write(&EDBG_COM.io, example_hello_world, 12);
}

void put_char( char c )
{
  40049c:	b500      	push	{lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	f88d 0007 	strb.w	r0, [sp, #7]
	while (io_write(&EDBG_COM.io, &c, 1) != 1) {
  4004a4:	2201      	movs	r2, #1
  4004a6:	f10d 0107 	add.w	r1, sp, #7
  4004aa:	4807      	ldr	r0, [pc, #28]	; (4004c8 <put_char+0x2c>)
  4004ac:	4b07      	ldr	r3, [pc, #28]	; (4004cc <put_char+0x30>)
  4004ae:	4798      	blx	r3
  4004b0:	2801      	cmp	r0, #1
  4004b2:	d1f7      	bne.n	4004a4 <put_char+0x8>
	}
	while( 1 )
		if( usart_async_get_status(&EDBG_COM.io, NULL) == ERR_NONE)
  4004b4:	2100      	movs	r1, #0
  4004b6:	4804      	ldr	r0, [pc, #16]	; (4004c8 <put_char+0x2c>)
  4004b8:	4b05      	ldr	r3, [pc, #20]	; (4004d0 <put_char+0x34>)
  4004ba:	4798      	blx	r3
  4004bc:	2800      	cmp	r0, #0
  4004be:	d1f9      	bne.n	4004b4 <put_char+0x18>
			break ;
}
  4004c0:	b003      	add	sp, #12
  4004c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4004c6:	bf00      	nop
  4004c8:	2040223c 	.word	0x2040223c
  4004cc:	00400b15 	.word	0x00400b15
  4004d0:	00400f79 	.word	0x00400f79

004004d4 <print>:


void print( char *msg)
{
  4004d4:	b538      	push	{r3, r4, r5, lr}
  4004d6:	4605      	mov	r5, r0
	for(int i = 0 ; i < strlen(msg); i++ )
  4004d8:	2400      	movs	r4, #0
  4004da:	e003      	b.n	4004e4 <print+0x10>
		put_char( msg[i] );
  4004dc:	5d28      	ldrb	r0, [r5, r4]
  4004de:	4b04      	ldr	r3, [pc, #16]	; (4004f0 <print+0x1c>)
  4004e0:	4798      	blx	r3
	for(int i = 0 ; i < strlen(msg); i++ )
  4004e2:	3401      	adds	r4, #1
  4004e4:	4628      	mov	r0, r5
  4004e6:	4b03      	ldr	r3, [pc, #12]	; (4004f4 <print+0x20>)
  4004e8:	4798      	blx	r3
  4004ea:	42a0      	cmp	r0, r4
  4004ec:	d8f6      	bhi.n	4004dc <print+0x8>
}
  4004ee:	bd38      	pop	{r3, r4, r5, pc}
  4004f0:	0040049d 	.word	0x0040049d
  4004f4:	00401b25 	.word	0x00401b25

004004f8 <get_ch>:

uint8_t get_ch( void )
{
	uint8_t recv_char;
	while( data_arrived == 0 )
  4004f8:	4b0a      	ldr	r3, [pc, #40]	; (400524 <get_ch+0x2c>)
  4004fa:	681b      	ldr	r3, [r3, #0]
  4004fc:	b90b      	cbnz	r3, 400502 <get_ch+0xa>
		return 0;
  4004fe:	2000      	movs	r0, #0
  400500:	4770      	bx	lr
{
  400502:	b500      	push	{lr}
  400504:	b083      	sub	sp, #12
	while (io_read(&EDBG_COM.io, &recv_char, 1) == 1)
  400506:	2201      	movs	r2, #1
  400508:	f10d 0107 	add.w	r1, sp, #7
  40050c:	4806      	ldr	r0, [pc, #24]	; (400528 <get_ch+0x30>)
  40050e:	4b07      	ldr	r3, [pc, #28]	; (40052c <get_ch+0x34>)
  400510:	4798      	blx	r3
		break ;
	data_arrived = 0 ;
  400512:	2200      	movs	r2, #0
  400514:	4b03      	ldr	r3, [pc, #12]	; (400524 <get_ch+0x2c>)
  400516:	601a      	str	r2, [r3, #0]
	
	return recv_char ;
  400518:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
  40051c:	b003      	add	sp, #12
  40051e:	f85d fb04 	ldr.w	pc, [sp], #4
  400522:	bf00      	nop
  400524:	2040020c 	.word	0x2040020c
  400528:	2040223c 	.word	0x2040223c
  40052c:	00400b45 	.word	0x00400b45

00400530 <get_char>:

uint8_t get_char( void )
{
  400530:	b500      	push	{lr}
  400532:	b083      	sub	sp, #12
	uint8_t recv_char;
	while( data_arrived == 0 )
  400534:	4b0a      	ldr	r3, [pc, #40]	; (400560 <get_char+0x30>)
  400536:	681b      	ldr	r3, [r3, #0]
  400538:	2b00      	cmp	r3, #0
  40053a:	d0fb      	beq.n	400534 <get_char+0x4>
		;
	while (io_read(&EDBG_COM.io, &recv_char, 1) == 1)
  40053c:	2201      	movs	r2, #1
  40053e:	f10d 0107 	add.w	r1, sp, #7
  400542:	4808      	ldr	r0, [pc, #32]	; (400564 <get_char+0x34>)
  400544:	4b08      	ldr	r3, [pc, #32]	; (400568 <get_char+0x38>)
  400546:	4798      	blx	r3
		break ;
	put_char( recv_char );
  400548:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40054c:	4b07      	ldr	r3, [pc, #28]	; (40056c <get_char+0x3c>)
  40054e:	4798      	blx	r3
	data_arrived = 0 ;
  400550:	2200      	movs	r2, #0
  400552:	4b03      	ldr	r3, [pc, #12]	; (400560 <get_char+0x30>)
  400554:	601a      	str	r2, [r3, #0]
	
	return recv_char ;
}
  400556:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40055a:	b003      	add	sp, #12
  40055c:	f85d fb04 	ldr.w	pc, [sp], #4
  400560:	2040020c 	.word	0x2040020c
  400564:	2040223c 	.word	0x2040223c
  400568:	00400b45 	.word	0x00400b45
  40056c:	0040049d 	.word	0x0040049d

00400570 <get_str>:

void get_str( char *ss )
{
  400570:	b538      	push	{r3, r4, r5, lr}
  400572:	4605      	mov	r5, r0
	uint8_t c ;
	int i = 0 ;

	ss[0] = 0 ;
  400574:	2400      	movs	r4, #0
  400576:	7004      	strb	r4, [r0, #0]
  400578:	e006      	b.n	400588 <get_str+0x18>
	while( 1 ){
		c = get_char();
		if( c == '\n'){
			ss[i] = 0 ;
  40057a:	2300      	movs	r3, #0
  40057c:	552b      	strb	r3, [r5, r4]
			return ;
  40057e:	bd38      	pop	{r3, r4, r5, pc}
		}else if( c == '\b' && i != 0 ){
			i--;
  400580:	3c01      	subs	r4, #1
			print("\b \b");
  400582:	4809      	ldr	r0, [pc, #36]	; (4005a8 <get_str+0x38>)
  400584:	4b09      	ldr	r3, [pc, #36]	; (4005ac <get_str+0x3c>)
  400586:	4798      	blx	r3
		c = get_char();
  400588:	4b09      	ldr	r3, [pc, #36]	; (4005b0 <get_str+0x40>)
  40058a:	4798      	blx	r3
		if( c == '\n'){
  40058c:	280a      	cmp	r0, #10
  40058e:	d0f4      	beq.n	40057a <get_str+0xa>
		}else if( c == '\b' && i != 0 ){
  400590:	2808      	cmp	r0, #8
  400592:	bf14      	ite	ne
  400594:	2300      	movne	r3, #0
  400596:	2301      	moveq	r3, #1
  400598:	2c00      	cmp	r4, #0
  40059a:	bf08      	it	eq
  40059c:	2300      	moveq	r3, #0
  40059e:	2b00      	cmp	r3, #0
  4005a0:	d1ee      	bne.n	400580 <get_str+0x10>
		}else{
			ss[i++] = c ;
  4005a2:	5528      	strb	r0, [r5, r4]
  4005a4:	3401      	adds	r4, #1
  4005a6:	e7ef      	b.n	400588 <get_str+0x18>
  4005a8:	00402d54 	.word	0x00402d54
  4005ac:	004004d5 	.word	0x004004d5
  4005b0:	00400531 	.word	0x00400531

004005b4 <dump_data>:
		}
	}
}

void dump_data( void )
{
  4005b4:	b570      	push	{r4, r5, r6, lr}
  4005b6:	b0a0      	sub	sp, #128	; 0x80
	char ss[128];
	int i;
	
	sprintf( ss, "ADC COUNT = %d\r\n", adc_count);
  4005b8:	4d3e      	ldr	r5, [pc, #248]	; (4006b4 <dump_data+0x100>)
  4005ba:	686a      	ldr	r2, [r5, #4]
  4005bc:	493e      	ldr	r1, [pc, #248]	; (4006b8 <dump_data+0x104>)
  4005be:	4668      	mov	r0, sp
  4005c0:	4b3e      	ldr	r3, [pc, #248]	; (4006bc <dump_data+0x108>)
  4005c2:	4798      	blx	r3
	print( ss );
  4005c4:	4668      	mov	r0, sp
  4005c6:	4c3e      	ldr	r4, [pc, #248]	; (4006c0 <dump_data+0x10c>)
  4005c8:	47a0      	blx	r4

adc_count = 32 ;
  4005ca:	2320      	movs	r3, #32
  4005cc:	606b      	str	r3, [r5, #4]
	print("ADC DATA :\r\n");
  4005ce:	483d      	ldr	r0, [pc, #244]	; (4006c4 <dump_data+0x110>)
  4005d0:	47a0      	blx	r4
	for( i = 0 ; i < adc_count ; i++ ){
  4005d2:	2400      	movs	r4, #0
  4005d4:	e004      	b.n	4005e0 <dump_data+0x2c>
		sprintf( ss, "%04X ", adc_data[i] );
		print(ss);
		if((i%8) == 7) print("\r\n");
  4005d6:	483c      	ldr	r0, [pc, #240]	; (4006c8 <dump_data+0x114>)
  4005d8:	4b39      	ldr	r3, [pc, #228]	; (4006c0 <dump_data+0x10c>)
  4005da:	4798      	blx	r3
  4005dc:	e018      	b.n	400610 <dump_data+0x5c>
	for( i = 0 ; i < adc_count ; i++ ){
  4005de:	3401      	adds	r4, #1
  4005e0:	4b34      	ldr	r3, [pc, #208]	; (4006b4 <dump_data+0x100>)
  4005e2:	685b      	ldr	r3, [r3, #4]
  4005e4:	429c      	cmp	r4, r3
  4005e6:	da19      	bge.n	40061c <dump_data+0x68>
		sprintf( ss, "%04X ", adc_data[i] );
  4005e8:	4b32      	ldr	r3, [pc, #200]	; (4006b4 <dump_data+0x100>)
  4005ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  4005ee:	689a      	ldr	r2, [r3, #8]
  4005f0:	4936      	ldr	r1, [pc, #216]	; (4006cc <dump_data+0x118>)
  4005f2:	4668      	mov	r0, sp
  4005f4:	4b31      	ldr	r3, [pc, #196]	; (4006bc <dump_data+0x108>)
  4005f6:	4798      	blx	r3
		print(ss);
  4005f8:	4668      	mov	r0, sp
  4005fa:	4b31      	ldr	r3, [pc, #196]	; (4006c0 <dump_data+0x10c>)
  4005fc:	4798      	blx	r3
		if((i%8) == 7) print("\r\n");
  4005fe:	4263      	negs	r3, r4
  400600:	f004 0507 	and.w	r5, r4, #7
  400604:	f003 0307 	and.w	r3, r3, #7
  400608:	bf58      	it	pl
  40060a:	425d      	negpl	r5, r3
  40060c:	2d07      	cmp	r5, #7
  40060e:	d0e2      	beq.n	4005d6 <dump_data+0x22>
		if((i%8) == 3) print(" ");
  400610:	2d03      	cmp	r5, #3
  400612:	d1e4      	bne.n	4005de <dump_data+0x2a>
  400614:	482e      	ldr	r0, [pc, #184]	; (4006d0 <dump_data+0x11c>)
  400616:	4b2a      	ldr	r3, [pc, #168]	; (4006c0 <dump_data+0x10c>)
  400618:	4798      	blx	r3
  40061a:	e7e0      	b.n	4005de <dump_data+0x2a>
	}
	print("\r\n");
  40061c:	482a      	ldr	r0, [pc, #168]	; (4006c8 <dump_data+0x114>)
  40061e:	4c28      	ldr	r4, [pc, #160]	; (4006c0 <dump_data+0x10c>)
  400620:	47a0      	blx	r4

	sprintf( ss, "Lower Discri Count = %d\r\n", lower_discri_count);
  400622:	4d2c      	ldr	r5, [pc, #176]	; (4006d4 <dump_data+0x120>)
  400624:	f855 2cf0 	ldr.w	r2, [r5, #-240]
  400628:	492b      	ldr	r1, [pc, #172]	; (4006d8 <dump_data+0x124>)
  40062a:	4668      	mov	r0, sp
  40062c:	4e23      	ldr	r6, [pc, #140]	; (4006bc <dump_data+0x108>)
  40062e:	47b0      	blx	r6
	print( ss );
  400630:	4668      	mov	r0, sp
  400632:	47a0      	blx	r4
	sprintf( ss, "Zero Cross Count = %d\r\n", zero_cross_count);
  400634:	f855 2cec 	ldr.w	r2, [r5, #-236]
  400638:	4928      	ldr	r1, [pc, #160]	; (4006dc <dump_data+0x128>)
  40063a:	4668      	mov	r0, sp
  40063c:	47b0      	blx	r6
	print( ss );
  40063e:	4668      	mov	r0, sp
  400640:	47a0      	blx	r4
	sprintf( ss, "Upper Discri Count = %d\r\n", upper_discri_count);
  400642:	f855 2ce8 	ldr.w	r2, [r5, #-232]
  400646:	4926      	ldr	r1, [pc, #152]	; (4006e0 <dump_data+0x12c>)
  400648:	4668      	mov	r0, sp
  40064a:	47b0      	blx	r6
	print( ss );
  40064c:	4668      	mov	r0, sp
  40064e:	47a0      	blx	r4

upper_discri_count = 45 ;
  400650:	232d      	movs	r3, #45	; 0x2d
  400652:	f845 3ce8 	str.w	r3, [r5, #-232]
	print("Upper Discri Time(msec) :\r\n");
  400656:	4823      	ldr	r0, [pc, #140]	; (4006e4 <dump_data+0x130>)
  400658:	47a0      	blx	r4
	for( i = 0 ; i < upper_discri_count ; i++ ){
  40065a:	2400      	movs	r4, #0
  40065c:	e004      	b.n	400668 <dump_data+0xb4>
		sprintf( ss, "%4d ", upper_discri_time[i] );
		print(ss);
		if((i%8) == 7) print("\r\n");
  40065e:	481a      	ldr	r0, [pc, #104]	; (4006c8 <dump_data+0x114>)
  400660:	4b17      	ldr	r3, [pc, #92]	; (4006c0 <dump_data+0x10c>)
  400662:	4798      	blx	r3
  400664:	e01a      	b.n	40069c <dump_data+0xe8>
	for( i = 0 ; i < upper_discri_count ; i++ ){
  400666:	3401      	adds	r4, #1
  400668:	4b1a      	ldr	r3, [pc, #104]	; (4006d4 <dump_data+0x120>)
  40066a:	f853 3ce8 	ldr.w	r3, [r3, #-232]
  40066e:	429c      	cmp	r4, r3
  400670:	da1a      	bge.n	4006a8 <dump_data+0xf4>
		sprintf( ss, "%4d ", upper_discri_time[i] );
  400672:	4b18      	ldr	r3, [pc, #96]	; (4006d4 <dump_data+0x120>)
  400674:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  400678:	f853 2ce4 	ldr.w	r2, [r3, #-228]
  40067c:	491a      	ldr	r1, [pc, #104]	; (4006e8 <dump_data+0x134>)
  40067e:	4668      	mov	r0, sp
  400680:	4b0e      	ldr	r3, [pc, #56]	; (4006bc <dump_data+0x108>)
  400682:	4798      	blx	r3
		print(ss);
  400684:	4668      	mov	r0, sp
  400686:	4b0e      	ldr	r3, [pc, #56]	; (4006c0 <dump_data+0x10c>)
  400688:	4798      	blx	r3
		if((i%8) == 7) print("\r\n");
  40068a:	4263      	negs	r3, r4
  40068c:	f004 0507 	and.w	r5, r4, #7
  400690:	f003 0307 	and.w	r3, r3, #7
  400694:	bf58      	it	pl
  400696:	425d      	negpl	r5, r3
  400698:	2d07      	cmp	r5, #7
  40069a:	d0e0      	beq.n	40065e <dump_data+0xaa>
		if((i%8) == 3) print(" ");
  40069c:	2d03      	cmp	r5, #3
  40069e:	d1e2      	bne.n	400666 <dump_data+0xb2>
  4006a0:	480b      	ldr	r0, [pc, #44]	; (4006d0 <dump_data+0x11c>)
  4006a2:	4b07      	ldr	r3, [pc, #28]	; (4006c0 <dump_data+0x10c>)
  4006a4:	4798      	blx	r3
  4006a6:	e7de      	b.n	400666 <dump_data+0xb2>
	}
	print("\r\n");
  4006a8:	4807      	ldr	r0, [pc, #28]	; (4006c8 <dump_data+0x114>)
  4006aa:	4b05      	ldr	r3, [pc, #20]	; (4006c0 <dump_data+0x10c>)
  4006ac:	4798      	blx	r3

}
  4006ae:	b020      	add	sp, #128	; 0x80
  4006b0:	bd70      	pop	{r4, r5, r6, pc}
  4006b2:	bf00      	nop
  4006b4:	2040020c 	.word	0x2040020c
  4006b8:	00402d58 	.word	0x00402d58
  4006bc:	00401a85 	.word	0x00401a85
  4006c0:	004004d5 	.word	0x004004d5
  4006c4:	00402d6c 	.word	0x00402d6c
  4006c8:	00402e28 	.word	0x00402e28
  4006cc:	00402d7c 	.word	0x00402d7c
  4006d0:	00402d80 	.word	0x00402d80
  4006d4:	20401304 	.word	0x20401304
  4006d8:	00402d84 	.word	0x00402d84
  4006dc:	00402da0 	.word	0x00402da0
  4006e0:	00402db8 	.word	0x00402db8
  4006e4:	00402dd4 	.word	0x00402dd4
  4006e8:	00402df0 	.word	0x00402df0

004006ec <dac_write>:

void dac_write( unsigned char *ss )
{
  4006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4006ee:	b083      	sub	sp, #12
  4006f0:	4607      	mov	r7, r0
	struct io_descriptor *io;

	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  4006f2:	4e0a      	ldr	r6, [pc, #40]	; (40071c <dac_write+0x30>)
  4006f4:	a901      	add	r1, sp, #4
  4006f6:	4630      	mov	r0, r6
  4006f8:	4b09      	ldr	r3, [pc, #36]	; (400720 <dac_write+0x34>)
  4006fa:	4798      	blx	r3
  4006fc:	4c09      	ldr	r4, [pc, #36]	; (400724 <dac_write+0x38>)
  4006fe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  400702:	6365      	str	r5, [r4, #52]	; 0x34
	
	gpio_set_pin_level(DAC_CSn_3V, false);

	spi_m_sync_enable(&SPI_0);
  400704:	4630      	mov	r0, r6
  400706:	4b08      	ldr	r3, [pc, #32]	; (400728 <dac_write+0x3c>)
  400708:	4798      	blx	r3
	io_write(io, ss, 2);
  40070a:	2202      	movs	r2, #2
  40070c:	4639      	mov	r1, r7
  40070e:	9801      	ldr	r0, [sp, #4]
  400710:	4b06      	ldr	r3, [pc, #24]	; (40072c <dac_write+0x40>)
  400712:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  400714:	6325      	str	r5, [r4, #48]	; 0x30

	gpio_set_pin_level(DAC_CSn_3V, true);
}
  400716:	b003      	add	sp, #12
  400718:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40071a:	bf00      	nop
  40071c:	2040228c 	.word	0x2040228c
  400720:	00400cc5 	.word	0x00400cc5
  400724:	400e1400 	.word	0x400e1400
  400728:	00400be5 	.word	0x00400be5
  40072c:	00400b15 	.word	0x00400b15

00400730 <adc_read>:

void adc_read( unsigned char *ss )
{
  400730:	b530      	push	{r4, r5, lr}
  400732:	b083      	sub	sp, #12
  400734:	4605      	mov	r5, r0
	struct io_descriptor *io;

	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  400736:	4c07      	ldr	r4, [pc, #28]	; (400754 <adc_read+0x24>)
  400738:	a901      	add	r1, sp, #4
  40073a:	4620      	mov	r0, r4
  40073c:	4b06      	ldr	r3, [pc, #24]	; (400758 <adc_read+0x28>)
  40073e:	4798      	blx	r3
	
	spi_m_sync_enable(&SPI_0);
  400740:	4620      	mov	r0, r4
  400742:	4b06      	ldr	r3, [pc, #24]	; (40075c <adc_read+0x2c>)
  400744:	4798      	blx	r3
	io_read(io, ss, 2);
  400746:	2202      	movs	r2, #2
  400748:	4629      	mov	r1, r5
  40074a:	9801      	ldr	r0, [sp, #4]
  40074c:	4b04      	ldr	r3, [pc, #16]	; (400760 <adc_read+0x30>)
  40074e:	4798      	blx	r3

}
  400750:	b003      	add	sp, #12
  400752:	bd30      	pop	{r4, r5, pc}
  400754:	2040228c 	.word	0x2040228c
  400758:	00400cc5 	.word	0x00400cc5
  40075c:	00400be5 	.word	0x00400be5
  400760:	00400b45 	.word	0x00400b45

00400764 <main_proc_start>:


void main_proc_start(void)
{
  400764:	b530      	push	{r4, r5, lr}
  400766:	b091      	sub	sp, #68	; 0x44
	char ss[64];
	unsigned short h ;


	convert_complete_flag = 0 ;
  400768:	2200      	movs	r2, #0
  40076a:	4b2d      	ldr	r3, [pc, #180]	; (400820 <main_proc_start+0xbc>)
  40076c:	601a      	str	r2, [r3, #0]
	ss[0] = dac_out0 >> 8 ; ss[1] = dac_out0 ; dac_write( ss );
  40076e:	4d2d      	ldr	r5, [pc, #180]	; (400824 <main_proc_start+0xc0>)
  400770:	682b      	ldr	r3, [r5, #0]
  400772:	121a      	asrs	r2, r3, #8
  400774:	f88d 2000 	strb.w	r2, [sp]
  400778:	f88d 3001 	strb.w	r3, [sp, #1]
  40077c:	4668      	mov	r0, sp
  40077e:	4c2a      	ldr	r4, [pc, #168]	; (400828 <main_proc_start+0xc4>)
  400780:	47a0      	blx	r4
	ss[0] = dac_out1 >> 8 ; ss[1] = dac_out1 ; dac_write( ss );
  400782:	686b      	ldr	r3, [r5, #4]
  400784:	121a      	asrs	r2, r3, #8
  400786:	f88d 2000 	strb.w	r2, [sp]
  40078a:	f88d 3001 	strb.w	r3, [sp, #1]
  40078e:	4668      	mov	r0, sp
  400790:	47a0      	blx	r4
	ss[0] = dac_out2 >> 8 ; ss[1] = dac_out2 ; dac_write( ss );
  400792:	68ab      	ldr	r3, [r5, #8]
  400794:	121a      	asrs	r2, r3, #8
  400796:	f88d 2000 	strb.w	r2, [sp]
  40079a:	f88d 3001 	strb.w	r3, [sp, #1]
  40079e:	4668      	mov	r0, sp
  4007a0:	47a0      	blx	r4
	((Pio *)hw)->PIO_CODR = mask;
  4007a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4007a6:	4b21      	ldr	r3, [pc, #132]	; (40082c <main_proc_start+0xc8>)
  4007a8:	635a      	str	r2, [r3, #52]	; 0x34
  4007aa:	2208      	movs	r2, #8
  4007ac:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  4007b0:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_SODR = mask;
  4007b2:	2201      	movs	r2, #1
  4007b4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  4007b8:	631a      	str	r2, [r3, #48]	; 0x30
  4007ba:	e002      	b.n	4007c2 <main_proc_start+0x5e>
	gpio_set_pin_level(ADC_CSn_3V, false);
	gpio_set_pin_level(FF_Enable_5V, true);

	while( 1 ){
		while( convert_complete_flag == 0 )
			if(get_ch()) goto LLL;
  4007bc:	4b1c      	ldr	r3, [pc, #112]	; (400830 <main_proc_start+0xcc>)
  4007be:	4798      	blx	r3
  4007c0:	b9f8      	cbnz	r0, 400802 <main_proc_start+0x9e>
		while( convert_complete_flag == 0 )
  4007c2:	4b17      	ldr	r3, [pc, #92]	; (400820 <main_proc_start+0xbc>)
  4007c4:	681b      	ldr	r3, [r3, #0]
  4007c6:	2b00      	cmp	r3, #0
  4007c8:	d0f8      	beq.n	4007bc <main_proc_start+0x58>
        adc_read( ss );
  4007ca:	4668      	mov	r0, sp
  4007cc:	4b19      	ldr	r3, [pc, #100]	; (400834 <main_proc_start+0xd0>)
  4007ce:	4798      	blx	r3
		h = ((unsigned short)(ss[0]) << 8) | ss[1] ;
  4007d0:	f89d 3000 	ldrb.w	r3, [sp]
  4007d4:	f89d 2001 	ldrb.w	r2, [sp, #1]
  4007d8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		h >>= 3 ;
		sprintf( ss, "ADC_Value = %04X\n", (unsigned)h );
  4007dc:	08d2      	lsrs	r2, r2, #3
  4007de:	4916      	ldr	r1, [pc, #88]	; (400838 <main_proc_start+0xd4>)
  4007e0:	4668      	mov	r0, sp
  4007e2:	4b16      	ldr	r3, [pc, #88]	; (40083c <main_proc_start+0xd8>)
  4007e4:	4798      	blx	r3
		print( ss );
  4007e6:	4668      	mov	r0, sp
  4007e8:	4b15      	ldr	r3, [pc, #84]	; (400840 <main_proc_start+0xdc>)
  4007ea:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  4007ec:	4b15      	ldr	r3, [pc, #84]	; (400844 <main_proc_start+0xe0>)
  4007ee:	2201      	movs	r2, #1
  4007f0:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_SODR = mask;
  4007f2:	631a      	str	r2, [r3, #48]	; 0x30
		gpio_set_pin_level(FF_Enable_5V, false);
		gpio_set_pin_level(FF_Enable_5V, true);
		convert_complete_flag = 0;
  4007f4:	2200      	movs	r2, #0
  4007f6:	4b0a      	ldr	r3, [pc, #40]	; (400820 <main_proc_start+0xbc>)
  4007f8:	601a      	str	r2, [r3, #0]
		if( get_ch() ) break ;
  4007fa:	4b0d      	ldr	r3, [pc, #52]	; (400830 <main_proc_start+0xcc>)
  4007fc:	4798      	blx	r3
  4007fe:	2800      	cmp	r0, #0
  400800:	d0df      	beq.n	4007c2 <main_proc_start+0x5e>
	((Pio *)hw)->PIO_CODR = mask;
  400802:	2201      	movs	r2, #1
  400804:	4b0f      	ldr	r3, [pc, #60]	; (400844 <main_proc_start+0xe0>)
  400806:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_SODR = mask;
  400808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40080c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400810:	631a      	str	r2, [r3, #48]	; 0x30
  400812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400816:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  40081a:	631a      	str	r2, [r3, #48]	; 0x30
LLL:;
	gpio_set_pin_level(FF_Enable_5V, false);
	gpio_set_pin_level(DAC_CSn_3V, true);
	gpio_set_pin_level(DAC_LDACn, true);

}
  40081c:	b011      	add	sp, #68	; 0x44
  40081e:	bd30      	pop	{r4, r5, pc}
  400820:	204001f8 	.word	0x204001f8
  400824:	20400000 	.word	0x20400000
  400828:	004006ed 	.word	0x004006ed
  40082c:	400e1200 	.word	0x400e1200
  400830:	004004f9 	.word	0x004004f9
  400834:	00400731 	.word	0x00400731
  400838:	00402df8 	.word	0x00402df8
  40083c:	00401a85 	.word	0x00401a85
  400840:	004004d5 	.word	0x004004d5
  400844:	400e0e00 	.word	0x400e0e00

00400848 <main>:


int main(void)
{
  400848:	b570      	push	{r4, r5, r6, lr}
  40084a:	b098      	sub	sp, #96	; 0x60
	uint8_t recv_char;
	char buf[80];
	int dac_out0=0xCFF, dac_out1=0xDFF, dac_out2=0xEFF ;
  40084c:	f640 43ff 	movw	r3, #3327	; 0xcff
  400850:	9303      	str	r3, [sp, #12]
  400852:	f640 53ff 	movw	r3, #3583	; 0xdff
  400856:	9302      	str	r3, [sp, #8]
  400858:	f640 63ff 	movw	r3, #3839	; 0xeff
  40085c:	9301      	str	r3, [sp, #4]
	char c ;
	int i;
	int start = 0 ;

	atmel_start_init();
  40085e:	4b3f      	ldr	r3, [pc, #252]	; (40095c <main+0x114>)
  400860:	4798      	blx	r3

	usart_async_register_callback(&EDBG_COM, USART_ASYNC_TXC_CB, tx_cb_EDBG_COM);
  400862:	4c3f      	ldr	r4, [pc, #252]	; (400960 <main+0x118>)
  400864:	4a3f      	ldr	r2, [pc, #252]	; (400964 <main+0x11c>)
  400866:	2101      	movs	r1, #1
  400868:	4620      	mov	r0, r4
  40086a:	4d3f      	ldr	r5, [pc, #252]	; (400968 <main+0x120>)
  40086c:	47a8      	blx	r5
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_RXC_CB, rx_cb_EDBG_COM);
  40086e:	4a3f      	ldr	r2, [pc, #252]	; (40096c <main+0x124>)
  400870:	2100      	movs	r1, #0
  400872:	4620      	mov	r0, r4
  400874:	47a8      	blx	r5
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_ERROR_CB, err_cb_EDBG_COM);
  400876:	4a3e      	ldr	r2, [pc, #248]	; (400970 <main+0x128>)
  400878:	2102      	movs	r1, #2
  40087a:	4620      	mov	r0, r4
  40087c:	47a8      	blx	r5
	usart_async_enable(&EDBG_COM);
  40087e:	4620      	mov	r0, r4
  400880:	4b3c      	ldr	r3, [pc, #240]	; (400974 <main+0x12c>)
  400882:	4798      	blx	r3
  400884:	e02e      	b.n	4008e4 <main+0x9c>
		case '1':
			if( start ){
				print("must when stop");
				continue ;
			}
			sscanf( buf, "%d %x", &i, &dac_out0);
  400886:	ab03      	add	r3, sp, #12
  400888:	466a      	mov	r2, sp
  40088a:	493b      	ldr	r1, [pc, #236]	; (400978 <main+0x130>)
  40088c:	a804      	add	r0, sp, #16
  40088e:	4c3b      	ldr	r4, [pc, #236]	; (40097c <main+0x134>)
  400890:	47a0      	blx	r4
			break ;
  400892:	e027      	b.n	4008e4 <main+0x9c>
		case '2':
			if( start ){
				print("must when stop");
				continue ;
			}
			sscanf( buf, "%d %x", &i, &dac_out1);
  400894:	ab02      	add	r3, sp, #8
  400896:	466a      	mov	r2, sp
  400898:	4937      	ldr	r1, [pc, #220]	; (400978 <main+0x130>)
  40089a:	a804      	add	r0, sp, #16
  40089c:	4c37      	ldr	r4, [pc, #220]	; (40097c <main+0x134>)
  40089e:	47a0      	blx	r4
			break ;
  4008a0:	e020      	b.n	4008e4 <main+0x9c>
		case '3':
			if( start ){
				print("must when stop");
				continue ;
			}
			sscanf( buf, "%d %x", &i, &dac_out2);
  4008a2:	ab01      	add	r3, sp, #4
  4008a4:	466a      	mov	r2, sp
  4008a6:	4934      	ldr	r1, [pc, #208]	; (400978 <main+0x130>)
  4008a8:	a804      	add	r0, sp, #16
  4008aa:	4c34      	ldr	r4, [pc, #208]	; (40097c <main+0x134>)
  4008ac:	47a0      	blx	r4
			break ;
  4008ae:	e019      	b.n	4008e4 <main+0x9c>
		case '4':
			start = 1; 
			main_proc_start();
  4008b0:	4b33      	ldr	r3, [pc, #204]	; (400980 <main+0x138>)
  4008b2:	4798      	blx	r3
			start = 0;
			break ;
  4008b4:	e016      	b.n	4008e4 <main+0x9c>
		case '6':
			if( start ){
				print("must when stop");
				continue ;
			}
			dump_data();
  4008b6:	4b33      	ldr	r3, [pc, #204]	; (400984 <main+0x13c>)
  4008b8:	4798      	blx	r3
		case '7':
			if( start ){
				print("must when stop");
				continue ;
			}
			adc_count = 0 ;
  4008ba:	4833      	ldr	r0, [pc, #204]	; (400988 <main+0x140>)
  4008bc:	2400      	movs	r4, #0
  4008be:	6044      	str	r4, [r0, #4]
			memset(adc_data, 0, sizeof(int) * DATA_NUM);
  4008c0:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  4008c4:	4632      	mov	r2, r6
  4008c6:	4621      	mov	r1, r4
  4008c8:	3008      	adds	r0, #8
  4008ca:	4d30      	ldr	r5, [pc, #192]	; (40098c <main+0x144>)
  4008cc:	47a8      	blx	r5
			lower_discri_count = 0 ;
  4008ce:	4830      	ldr	r0, [pc, #192]	; (400990 <main+0x148>)
  4008d0:	f840 4cf0 	str.w	r4, [r0, #-240]
			zero_cross_count = 0 ;
  4008d4:	f840 4cec 	str.w	r4, [r0, #-236]
			upper_discri_count = 0 ;
  4008d8:	f840 4ce8 	str.w	r4, [r0, #-232]
			memset(upper_discri_time, 0, sizeof(int) * DATA_NUM);
  4008dc:	4632      	mov	r2, r6
  4008de:	4621      	mov	r1, r4
  4008e0:	38e4      	subs	r0, #228	; 0xe4
  4008e2:	47a8      	blx	r5
		print("\r\n\r\n-----adc_control menu---\r\n");
  4008e4:	482b      	ldr	r0, [pc, #172]	; (400994 <main+0x14c>)
  4008e6:	4c2c      	ldr	r4, [pc, #176]	; (400998 <main+0x150>)
  4008e8:	47a0      	blx	r4
		sprintf(buf, "1:set DAC OUT0(ZeroCross):  0x%04X\r\n", dac_out0);
  4008ea:	9a03      	ldr	r2, [sp, #12]
  4008ec:	492b      	ldr	r1, [pc, #172]	; (40099c <main+0x154>)
  4008ee:	a804      	add	r0, sp, #16
  4008f0:	4d2b      	ldr	r5, [pc, #172]	; (4009a0 <main+0x158>)
  4008f2:	47a8      	blx	r5
		print(buf);
  4008f4:	a804      	add	r0, sp, #16
  4008f6:	47a0      	blx	r4
		sprintf(buf, "2:set DAC OUT1(LowerDescri):0x%04X\r\n", dac_out1);
  4008f8:	9a02      	ldr	r2, [sp, #8]
  4008fa:	492a      	ldr	r1, [pc, #168]	; (4009a4 <main+0x15c>)
  4008fc:	a804      	add	r0, sp, #16
  4008fe:	47a8      	blx	r5
		print(buf);
  400900:	a804      	add	r0, sp, #16
  400902:	47a0      	blx	r4
		sprintf(buf, "3:set DAC OUT2(UpperDescri):0x%04X\r\n", dac_out2);
  400904:	9a01      	ldr	r2, [sp, #4]
  400906:	4928      	ldr	r1, [pc, #160]	; (4009a8 <main+0x160>)
  400908:	a804      	add	r0, sp, #16
  40090a:	47a8      	blx	r5
		print(buf);
  40090c:	a804      	add	r0, sp, #16
  40090e:	47a0      	blx	r4
			print( "4:start\r\n");
  400910:	4826      	ldr	r0, [pc, #152]	; (4009ac <main+0x164>)
  400912:	47a0      	blx	r4
			print( "5:*stop\r\n" );
  400914:	4826      	ldr	r0, [pc, #152]	; (4009b0 <main+0x168>)
  400916:	47a0      	blx	r4
		print( "6:Data Read\r\n");
  400918:	4826      	ldr	r0, [pc, #152]	; (4009b4 <main+0x16c>)
  40091a:	47a0      	blx	r4
		print( "7:Reset\r\n");
  40091c:	4826      	ldr	r0, [pc, #152]	; (4009b8 <main+0x170>)
  40091e:	47a0      	blx	r4
		buf[0] = 0 ;
  400920:	2300      	movs	r3, #0
  400922:	f88d 3010 	strb.w	r3, [sp, #16]
		print( "> ");
  400926:	4825      	ldr	r0, [pc, #148]	; (4009bc <main+0x174>)
  400928:	47a0      	blx	r4
		get_str(buf);
  40092a:	a804      	add	r0, sp, #16
  40092c:	4b24      	ldr	r3, [pc, #144]	; (4009c0 <main+0x178>)
  40092e:	4798      	blx	r3
		switch( buf[0] ){
  400930:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400934:	3b31      	subs	r3, #49	; 0x31
  400936:	2b06      	cmp	r3, #6
  400938:	d8d4      	bhi.n	4008e4 <main+0x9c>
  40093a:	a201      	add	r2, pc, #4	; (adr r2, 400940 <main+0xf8>)
  40093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400940:	00400887 	.word	0x00400887
  400944:	00400895 	.word	0x00400895
  400948:	004008a3 	.word	0x004008a3
  40094c:	004008b1 	.word	0x004008b1
  400950:	004008e5 	.word	0x004008e5
  400954:	004008b7 	.word	0x004008b7
  400958:	004008bb 	.word	0x004008bb
  40095c:	004001d5 	.word	0x004001d5
  400960:	2040223c 	.word	0x2040223c
  400964:	00400475 	.word	0x00400475
  400968:	00400f05 	.word	0x00400f05
  40096c:	0040048d 	.word	0x0040048d
  400970:	00400499 	.word	0x00400499
  400974:	00400ed9 	.word	0x00400ed9
  400978:	00402edc 	.word	0x00402edc
  40097c:	00401acd 	.word	0x00401acd
  400980:	00400765 	.word	0x00400765
  400984:	004005b5 	.word	0x004005b5
  400988:	2040020c 	.word	0x2040020c
  40098c:	00401a75 	.word	0x00401a75
  400990:	20401304 	.word	0x20401304
  400994:	00402e0c 	.word	0x00402e0c
  400998:	004004d5 	.word	0x004004d5
  40099c:	00402e2c 	.word	0x00402e2c
  4009a0:	00401a85 	.word	0x00401a85
  4009a4:	00402e54 	.word	0x00402e54
  4009a8:	00402e7c 	.word	0x00402e7c
  4009ac:	00402ea4 	.word	0x00402ea4
  4009b0:	00402eb0 	.word	0x00402eb0
  4009b4:	00402ebc 	.word	0x00402ebc
  4009b8:	00402ecc 	.word	0x00402ecc
  4009bc:	00402ed8 	.word	0x00402ed8
  4009c0:	00400571 	.word	0x00400571

004009c4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4009c4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4009c8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4009ca:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4009cc:	f3bf 8f5f 	dmb	sy
  4009d0:	4770      	bx	lr

004009d2 <atomic_leave_critical>:
  4009d2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4009d6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4009d8:	f383 8810 	msr	PRIMASK, r3
  4009dc:	4770      	bx	lr
	...

004009e0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4009e0:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4009e2:	2501      	movs	r5, #1
  4009e4:	2400      	movs	r4, #0

	while (upper >= lower) {
  4009e6:	e007      	b.n	4009f8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4009e8:	4a0d      	ldr	r2, [pc, #52]	; (400a20 <process_ext_irq+0x40>)
  4009ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4009ee:	b1b3      	cbz	r3, 400a1e <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4009f0:	4798      	blx	r3
  4009f2:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4009f4:	3901      	subs	r1, #1
  4009f6:	b2cd      	uxtb	r5, r1
	while (upper >= lower) {
  4009f8:	42ac      	cmp	r4, r5
  4009fa:	d810      	bhi.n	400a1e <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  4009fc:	192b      	adds	r3, r5, r4
  4009fe:	105b      	asrs	r3, r3, #1
		if (middle >= EXT_IRQ_AMOUNT) {
  400a00:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
  400a04:	d10b      	bne.n	400a1e <process_ext_irq+0x3e>
  400a06:	b2db      	uxtb	r3, r3
		if (ext_irqs[middle].pin == pin) {
  400a08:	4a05      	ldr	r2, [pc, #20]	; (400a20 <process_ext_irq+0x40>)
  400a0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400a0e:	6852      	ldr	r2, [r2, #4]
  400a10:	4282      	cmp	r2, r0
  400a12:	d0e9      	beq.n	4009e8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400a14:	4282      	cmp	r2, r0
  400a16:	d2ed      	bcs.n	4009f4 <process_ext_irq+0x14>
			lower = middle + 1;
  400a18:	3101      	adds	r1, #1
  400a1a:	b2cc      	uxtb	r4, r1
  400a1c:	e7ec      	b.n	4009f8 <process_ext_irq+0x18>
  400a1e:	bd38      	pop	{r3, r4, r5, pc}
  400a20:	20402220 	.word	0x20402220

00400a24 <ext_irq_init>:
{
  400a24:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a26:	2300      	movs	r3, #0
  400a28:	b11b      	cbz	r3, 400a32 <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
  400a2a:	4808      	ldr	r0, [pc, #32]	; (400a4c <ext_irq_init+0x28>)
  400a2c:	4b08      	ldr	r3, [pc, #32]	; (400a50 <ext_irq_init+0x2c>)
  400a2e:	4798      	blx	r3
}
  400a30:	bd08      	pop	{r3, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
  400a32:	4a08      	ldr	r2, [pc, #32]	; (400a54 <ext_irq_init+0x30>)
  400a34:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400a38:	f04f 30ff 	mov.w	r0, #4294967295
  400a3c:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400a3e:	2100      	movs	r1, #0
  400a40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a44:	3301      	adds	r3, #1
  400a46:	b29b      	uxth	r3, r3
  400a48:	e7ee      	b.n	400a28 <ext_irq_init+0x4>
  400a4a:	bf00      	nop
  400a4c:	004009e1 	.word	0x004009e1
  400a50:	0040133d 	.word	0x0040133d
  400a54:	20402220 	.word	0x20402220

00400a58 <ext_irq_register>:
{
  400a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a5a:	b083      	sub	sp, #12
  400a5c:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  400a5e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400a60:	b163      	cbz	r3, 400a7c <ext_irq_register+0x24>
	bool    found = false;
  400a62:	2600      	movs	r6, #0
	if (NULL == cb) {
  400a64:	b1c9      	cbz	r1, 400a9a <ext_irq_register+0x42>
	if (!found) {
  400a66:	2e00      	cmp	r6, #0
  400a68:	d143      	bne.n	400af2 <ext_irq_register+0x9a>
  400a6a:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a6c:	bb0b      	cbnz	r3, 400ab2 <ext_irq_register+0x5a>
			if (NULL == ext_irqs[i].cb) {
  400a6e:	4a27      	ldr	r2, [pc, #156]	; (400b0c <ext_irq_register+0xb4>)
  400a70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  400a74:	b1b2      	cbz	r2, 400aa4 <ext_irq_register+0x4c>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a76:	3301      	adds	r3, #1
  400a78:	b2db      	uxtb	r3, r3
  400a7a:	e7f7      	b.n	400a6c <ext_irq_register+0x14>
		if (ext_irqs[i].pin == pin) {
  400a7c:	4618      	mov	r0, r3
  400a7e:	4a23      	ldr	r2, [pc, #140]	; (400b0c <ext_irq_register+0xb4>)
  400a80:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400a84:	6852      	ldr	r2, [r2, #4]
  400a86:	42aa      	cmp	r2, r5
  400a88:	d002      	beq.n	400a90 <ext_irq_register+0x38>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400a8a:	3301      	adds	r3, #1
  400a8c:	b2db      	uxtb	r3, r3
  400a8e:	e7e7      	b.n	400a60 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  400a90:	4b1e      	ldr	r3, [pc, #120]	; (400b0c <ext_irq_register+0xb4>)
  400a92:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  400a96:	2601      	movs	r6, #1
			break;
  400a98:	e7e4      	b.n	400a64 <ext_irq_register+0xc>
		if (!found) {
  400a9a:	b38e      	cbz	r6, 400b00 <ext_irq_register+0xa8>
		return _ext_irq_enable(pin, false);
  400a9c:	4628      	mov	r0, r5
  400a9e:	4b1c      	ldr	r3, [pc, #112]	; (400b10 <ext_irq_register+0xb8>)
  400aa0:	4798      	blx	r3
  400aa2:	e02b      	b.n	400afc <ext_irq_register+0xa4>
				ext_irqs[i].cb  = cb;
  400aa4:	4a19      	ldr	r2, [pc, #100]	; (400b0c <ext_irq_register+0xb4>)
  400aa6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
  400aaa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400aae:	6045      	str	r5, [r0, #4]
				found           = true;
  400ab0:	2601      	movs	r6, #1
  400ab2:	2200      	movs	r2, #0
  400ab4:	e001      	b.n	400aba <ext_irq_register+0x62>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  400ab6:	3201      	adds	r2, #1
  400ab8:	b2d2      	uxtb	r2, r2
  400aba:	2a00      	cmp	r2, #0
  400abc:	bf08      	it	eq
  400abe:	2b00      	cmpeq	r3, #0
  400ac0:	d117      	bne.n	400af2 <ext_irq_register+0x9a>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  400ac2:	469e      	mov	lr, r3
  400ac4:	4911      	ldr	r1, [pc, #68]	; (400b0c <ext_irq_register+0xb4>)
  400ac6:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  400aca:	6847      	ldr	r7, [r0, #4]
  400acc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400ad0:	6849      	ldr	r1, [r1, #4]
  400ad2:	428f      	cmp	r7, r1
  400ad4:	d2ef      	bcs.n	400ab6 <ext_irq_register+0x5e>
  400ad6:	f1b1 3fff 	cmp.w	r1, #4294967295
  400ada:	d0ec      	beq.n	400ab6 <ext_irq_register+0x5e>
				struct ext_irq tmp = ext_irqs[j];
  400adc:	4c0b      	ldr	r4, [pc, #44]	; (400b0c <ext_irq_register+0xb4>)
  400ade:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
  400ae2:	c803      	ldmia	r0, {r0, r1}
  400ae4:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[i] = tmp;
  400ae8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
  400aec:	e884 0003 	stmia.w	r4, {r0, r1}
  400af0:	e7e1      	b.n	400ab6 <ext_irq_register+0x5e>
	if (!found) {
  400af2:	b146      	cbz	r6, 400b06 <ext_irq_register+0xae>
	return _ext_irq_enable(pin, true);
  400af4:	2101      	movs	r1, #1
  400af6:	4628      	mov	r0, r5
  400af8:	4b05      	ldr	r3, [pc, #20]	; (400b10 <ext_irq_register+0xb8>)
  400afa:	4798      	blx	r3
}
  400afc:	b003      	add	sp, #12
  400afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  400b00:	f06f 000c 	mvn.w	r0, #12
  400b04:	e7fa      	b.n	400afc <ext_irq_register+0xa4>
		return ERR_INVALID_ARG;
  400b06:	f06f 000c 	mvn.w	r0, #12
  400b0a:	e7f7      	b.n	400afc <ext_irq_register+0xa4>
  400b0c:	20402220 	.word	0x20402220
  400b10:	0040135d 	.word	0x0040135d

00400b14 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400b14:	b570      	push	{r4, r5, r6, lr}
  400b16:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400b18:	4604      	mov	r4, r0
  400b1a:	460d      	mov	r5, r1
  400b1c:	2800      	cmp	r0, #0
  400b1e:	bf18      	it	ne
  400b20:	2900      	cmpne	r1, #0
  400b22:	bf14      	ite	ne
  400b24:	2001      	movne	r0, #1
  400b26:	2000      	moveq	r0, #0
  400b28:	2234      	movs	r2, #52	; 0x34
  400b2a:	4904      	ldr	r1, [pc, #16]	; (400b3c <io_write+0x28>)
  400b2c:	4b04      	ldr	r3, [pc, #16]	; (400b40 <io_write+0x2c>)
  400b2e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400b30:	6823      	ldr	r3, [r4, #0]
  400b32:	4632      	mov	r2, r6
  400b34:	4629      	mov	r1, r5
  400b36:	4620      	mov	r0, r4
  400b38:	4798      	blx	r3
}
  400b3a:	bd70      	pop	{r4, r5, r6, pc}
  400b3c:	00402ee4 	.word	0x00402ee4
  400b40:	00400fc5 	.word	0x00400fc5

00400b44 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400b44:	b570      	push	{r4, r5, r6, lr}
  400b46:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400b48:	4604      	mov	r4, r0
  400b4a:	460d      	mov	r5, r1
  400b4c:	2800      	cmp	r0, #0
  400b4e:	bf18      	it	ne
  400b50:	2900      	cmpne	r1, #0
  400b52:	bf14      	ite	ne
  400b54:	2001      	movne	r0, #1
  400b56:	2000      	moveq	r0, #0
  400b58:	223d      	movs	r2, #61	; 0x3d
  400b5a:	4904      	ldr	r1, [pc, #16]	; (400b6c <io_read+0x28>)
  400b5c:	4b04      	ldr	r3, [pc, #16]	; (400b70 <io_read+0x2c>)
  400b5e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400b60:	6863      	ldr	r3, [r4, #4]
  400b62:	4632      	mov	r2, r6
  400b64:	4629      	mov	r1, r5
  400b66:	4620      	mov	r0, r4
  400b68:	4798      	blx	r3
}
  400b6a:	bd70      	pop	{r4, r5, r6, pc}
  400b6c:	00402ee4 	.word	0x00402ee4
  400b70:	00400fc5 	.word	0x00400fc5

00400b74 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400b74:	b538      	push	{r3, r4, r5, lr}
  400b76:	460d      	mov	r5, r1
	ASSERT(spi);
  400b78:	4604      	mov	r4, r0
  400b7a:	2239      	movs	r2, #57	; 0x39
  400b7c:	4903      	ldr	r1, [pc, #12]	; (400b8c <spi_m_sync_set_func_ptr+0x18>)
  400b7e:	3000      	adds	r0, #0
  400b80:	bf18      	it	ne
  400b82:	2001      	movne	r0, #1
  400b84:	4b02      	ldr	r3, [pc, #8]	; (400b90 <spi_m_sync_set_func_ptr+0x1c>)
  400b86:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400b88:	6025      	str	r5, [r4, #0]
  400b8a:	bd38      	pop	{r3, r4, r5, pc}
  400b8c:	00402ef8 	.word	0x00402ef8
  400b90:	00400fc5 	.word	0x00400fc5

00400b94 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400b94:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400b96:	4604      	mov	r4, r0
  400b98:	460d      	mov	r5, r1
  400b9a:	2800      	cmp	r0, #0
  400b9c:	bf18      	it	ne
  400b9e:	2900      	cmpne	r1, #0
  400ba0:	bf14      	ite	ne
  400ba2:	2001      	movne	r0, #1
  400ba4:	2000      	moveq	r0, #0
  400ba6:	2240      	movs	r2, #64	; 0x40
  400ba8:	4909      	ldr	r1, [pc, #36]	; (400bd0 <spi_m_sync_init+0x3c>)
  400baa:	4b0a      	ldr	r3, [pc, #40]	; (400bd4 <spi_m_sync_init+0x40>)
  400bac:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400bae:	4620      	mov	r0, r4
  400bb0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400bb4:	4629      	mov	r1, r5
  400bb6:	4b08      	ldr	r3, [pc, #32]	; (400bd8 <spi_m_sync_init+0x44>)
  400bb8:	4798      	blx	r3

	if (rc < 0) {
  400bba:	2800      	cmp	r0, #0
  400bbc:	db07      	blt.n	400bce <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400bc2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400bc4:	4b05      	ldr	r3, [pc, #20]	; (400bdc <spi_m_sync_init+0x48>)
  400bc6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400bc8:	4b05      	ldr	r3, [pc, #20]	; (400be0 <spi_m_sync_init+0x4c>)
  400bca:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400bcc:	2000      	movs	r0, #0
}
  400bce:	bd38      	pop	{r3, r4, r5, pc}
  400bd0:	00402ef8 	.word	0x00402ef8
  400bd4:	00400fc5 	.word	0x00400fc5
  400bd8:	0040148d 	.word	0x0040148d
  400bdc:	00400c89 	.word	0x00400c89
  400be0:	00400c4d 	.word	0x00400c4d

00400be4 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400be4:	b510      	push	{r4, lr}
	ASSERT(spi);
  400be6:	4604      	mov	r4, r0
  400be8:	2257      	movs	r2, #87	; 0x57
  400bea:	4905      	ldr	r1, [pc, #20]	; (400c00 <spi_m_sync_enable+0x1c>)
  400bec:	3000      	adds	r0, #0
  400bee:	bf18      	it	ne
  400bf0:	2001      	movne	r0, #1
  400bf2:	4b04      	ldr	r3, [pc, #16]	; (400c04 <spi_m_sync_enable+0x20>)
  400bf4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400bf6:	1d20      	adds	r0, r4, #4
  400bf8:	4b03      	ldr	r3, [pc, #12]	; (400c08 <spi_m_sync_enable+0x24>)
  400bfa:	4798      	blx	r3
  400bfc:	bd10      	pop	{r4, pc}
  400bfe:	bf00      	nop
  400c00:	00402ef8 	.word	0x00402ef8
  400c04:	00400fc5 	.word	0x00400fc5
  400c08:	00401535 	.word	0x00401535

00400c0c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400c0c:	b530      	push	{r4, r5, lr}
  400c0e:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400c10:	4605      	mov	r5, r0
  400c12:	460c      	mov	r4, r1
  400c14:	2800      	cmp	r0, #0
  400c16:	bf18      	it	ne
  400c18:	2900      	cmpne	r1, #0
  400c1a:	bf14      	ite	ne
  400c1c:	2001      	movne	r0, #1
  400c1e:	2000      	moveq	r0, #0
  400c20:	22b3      	movs	r2, #179	; 0xb3
  400c22:	4907      	ldr	r1, [pc, #28]	; (400c40 <spi_m_sync_transfer+0x34>)
  400c24:	4b07      	ldr	r3, [pc, #28]	; (400c44 <spi_m_sync_transfer+0x38>)
  400c26:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400c28:	6823      	ldr	r3, [r4, #0]
  400c2a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400c2c:	6863      	ldr	r3, [r4, #4]
  400c2e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400c30:	68a3      	ldr	r3, [r4, #8]
  400c32:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400c34:	a901      	add	r1, sp, #4
  400c36:	1d28      	adds	r0, r5, #4
  400c38:	4b03      	ldr	r3, [pc, #12]	; (400c48 <spi_m_sync_transfer+0x3c>)
  400c3a:	4798      	blx	r3
}
  400c3c:	b005      	add	sp, #20
  400c3e:	bd30      	pop	{r4, r5, pc}
  400c40:	00402ef8 	.word	0x00402ef8
  400c44:	00400fc5 	.word	0x00400fc5
  400c48:	00401569 	.word	0x00401569

00400c4c <_spi_m_sync_io_write>:
{
  400c4c:	b570      	push	{r4, r5, r6, lr}
  400c4e:	b084      	sub	sp, #16
  400c50:	460e      	mov	r6, r1
  400c52:	4615      	mov	r5, r2
	ASSERT(io);
  400c54:	4604      	mov	r4, r0
  400c56:	22a3      	movs	r2, #163	; 0xa3
  400c58:	4908      	ldr	r1, [pc, #32]	; (400c7c <_spi_m_sync_io_write+0x30>)
  400c5a:	3000      	adds	r0, #0
  400c5c:	bf18      	it	ne
  400c5e:	2001      	movne	r0, #1
  400c60:	4b07      	ldr	r3, [pc, #28]	; (400c80 <_spi_m_sync_io_write+0x34>)
  400c62:	4798      	blx	r3
	xfer.rxbuf = 0;
  400c64:	2300      	movs	r3, #0
  400c66:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400c68:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400c6a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400c6c:	a901      	add	r1, sp, #4
  400c6e:	f1a4 000c 	sub.w	r0, r4, #12
  400c72:	4b04      	ldr	r3, [pc, #16]	; (400c84 <_spi_m_sync_io_write+0x38>)
  400c74:	4798      	blx	r3
}
  400c76:	b004      	add	sp, #16
  400c78:	bd70      	pop	{r4, r5, r6, pc}
  400c7a:	bf00      	nop
  400c7c:	00402ef8 	.word	0x00402ef8
  400c80:	00400fc5 	.word	0x00400fc5
  400c84:	00400c0d 	.word	0x00400c0d

00400c88 <_spi_m_sync_io_read>:
{
  400c88:	b570      	push	{r4, r5, r6, lr}
  400c8a:	b084      	sub	sp, #16
  400c8c:	460e      	mov	r6, r1
  400c8e:	4615      	mov	r5, r2
	ASSERT(io);
  400c90:	4604      	mov	r4, r0
  400c92:	2287      	movs	r2, #135	; 0x87
  400c94:	4908      	ldr	r1, [pc, #32]	; (400cb8 <_spi_m_sync_io_read+0x30>)
  400c96:	3000      	adds	r0, #0
  400c98:	bf18      	it	ne
  400c9a:	2001      	movne	r0, #1
  400c9c:	4b07      	ldr	r3, [pc, #28]	; (400cbc <_spi_m_sync_io_read+0x34>)
  400c9e:	4798      	blx	r3
	xfer.rxbuf = buf;
  400ca0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400ca2:	2300      	movs	r3, #0
  400ca4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400ca6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400ca8:	a901      	add	r1, sp, #4
  400caa:	f1a4 000c 	sub.w	r0, r4, #12
  400cae:	4b04      	ldr	r3, [pc, #16]	; (400cc0 <_spi_m_sync_io_read+0x38>)
  400cb0:	4798      	blx	r3
}
  400cb2:	b004      	add	sp, #16
  400cb4:	bd70      	pop	{r4, r5, r6, pc}
  400cb6:	bf00      	nop
  400cb8:	00402ef8 	.word	0x00402ef8
  400cbc:	00400fc5 	.word	0x00400fc5
  400cc0:	00400c0d 	.word	0x00400c0d

00400cc4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400cc4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400cc6:	4604      	mov	r4, r0
  400cc8:	460d      	mov	r5, r1
  400cca:	2800      	cmp	r0, #0
  400ccc:	bf18      	it	ne
  400cce:	2900      	cmpne	r1, #0
  400cd0:	bf14      	ite	ne
  400cd2:	2001      	movne	r0, #1
  400cd4:	2000      	moveq	r0, #0
  400cd6:	22bd      	movs	r2, #189	; 0xbd
  400cd8:	4903      	ldr	r1, [pc, #12]	; (400ce8 <spi_m_sync_get_io_descriptor+0x24>)
  400cda:	4b04      	ldr	r3, [pc, #16]	; (400cec <spi_m_sync_get_io_descriptor+0x28>)
  400cdc:	4798      	blx	r3
	*io = &spi->io;
  400cde:	340c      	adds	r4, #12
  400ce0:	602c      	str	r4, [r5, #0]
	return 0;
}
  400ce2:	2000      	movs	r0, #0
  400ce4:	bd38      	pop	{r3, r4, r5, pc}
  400ce6:	bf00      	nop
  400ce8:	00402ef8 	.word	0x00402ef8
  400cec:	00400fc5 	.word	0x00400fc5

00400cf0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  400cf0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  400cf2:	2300      	movs	r3, #0
  400cf4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
  400cf6:	69c3      	ldr	r3, [r0, #28]
  400cf8:	b11b      	cbz	r3, 400d02 <usart_transmission_complete+0x12>
  400cfa:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
  400cfe:	4610      	mov	r0, r2
  400d00:	4798      	blx	r3
  400d02:	bd08      	pop	{r3, pc}

00400d04 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  400d04:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  400d06:	2300      	movs	r3, #0
  400d08:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
  400d0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400d0c:	b11b      	cbz	r3, 400d16 <usart_error+0x12>
  400d0e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
  400d12:	4610      	mov	r0, r2
  400d14:	4798      	blx	r3
  400d16:	bd08      	pop	{r3, pc}

00400d18 <usart_fill_rx_buffer>:
{
  400d18:	b538      	push	{r3, r4, r5, lr}
  400d1a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  400d1c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
  400d20:	302c      	adds	r0, #44	; 0x2c
  400d22:	4b03      	ldr	r3, [pc, #12]	; (400d30 <usart_fill_rx_buffer+0x18>)
  400d24:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
  400d26:	6a23      	ldr	r3, [r4, #32]
  400d28:	b10b      	cbz	r3, 400d2e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
  400d2a:	4628      	mov	r0, r5
  400d2c:	4798      	blx	r3
  400d2e:	bd38      	pop	{r3, r4, r5, pc}
  400d30:	00401055 	.word	0x00401055

00400d34 <usart_async_write>:
{
  400d34:	b570      	push	{r4, r5, r6, lr}
  400d36:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
  400d38:	4604      	mov	r4, r0
  400d3a:	460e      	mov	r6, r1
  400d3c:	2800      	cmp	r0, #0
  400d3e:	bf18      	it	ne
  400d40:	2900      	cmpne	r1, #0
  400d42:	d002      	beq.n	400d4a <usart_async_write+0x16>
  400d44:	b9da      	cbnz	r2, 400d7e <usart_async_write+0x4a>
  400d46:	2000      	movs	r0, #0
  400d48:	e000      	b.n	400d4c <usart_async_write+0x18>
  400d4a:	2000      	movs	r0, #0
  400d4c:	f240 123b 	movw	r2, #315	; 0x13b
  400d50:	490d      	ldr	r1, [pc, #52]	; (400d88 <usart_async_write+0x54>)
  400d52:	4b0e      	ldr	r3, [pc, #56]	; (400d8c <usart_async_write+0x58>)
  400d54:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
  400d56:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  400d5a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  400d5e:	429a      	cmp	r2, r3
  400d60:	d10f      	bne.n	400d82 <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
  400d62:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
  400d64:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
  400d68:	2300      	movs	r3, #0
  400d6a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  400d6e:	2301      	movs	r3, #1
  400d70:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  400d72:	f104 0008 	add.w	r0, r4, #8
  400d76:	4b06      	ldr	r3, [pc, #24]	; (400d90 <usart_async_write+0x5c>)
  400d78:	4798      	blx	r3
	return (int32_t)length;
  400d7a:	4628      	mov	r0, r5
  400d7c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
  400d7e:	2001      	movs	r0, #1
  400d80:	e7e4      	b.n	400d4c <usart_async_write+0x18>
		return ERR_NO_RESOURCE;
  400d82:	f06f 001b 	mvn.w	r0, #27
}
  400d86:	bd70      	pop	{r4, r5, r6, pc}
  400d88:	00402f14 	.word	0x00402f14
  400d8c:	00400fc5 	.word	0x00400fc5
  400d90:	00401941 	.word	0x00401941

00400d94 <usart_process_byte_sent>:
{
  400d94:	b510      	push	{r4, lr}
  400d96:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
  400d98:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  400d9a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  400d9e:	4293      	cmp	r3, r2
  400da0:	d009      	beq.n	400db6 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  400da2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400da4:	1c59      	adds	r1, r3, #1
  400da6:	8781      	strh	r1, [r0, #60]	; 0x3c
  400da8:	5cd1      	ldrb	r1, [r2, r3]
  400daa:	4b04      	ldr	r3, [pc, #16]	; (400dbc <usart_process_byte_sent+0x28>)
  400dac:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  400dae:	4620      	mov	r0, r4
  400db0:	4b03      	ldr	r3, [pc, #12]	; (400dc0 <usart_process_byte_sent+0x2c>)
  400db2:	4798      	blx	r3
  400db4:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
  400db6:	4b03      	ldr	r3, [pc, #12]	; (400dc4 <usart_process_byte_sent+0x30>)
  400db8:	4798      	blx	r3
  400dba:	bd10      	pop	{r4, pc}
  400dbc:	0040191d 	.word	0x0040191d
  400dc0:	00401941 	.word	0x00401941
  400dc4:	00401965 	.word	0x00401965

00400dc8 <usart_async_read>:
{
  400dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dcc:	b082      	sub	sp, #8
  400dce:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
  400dd0:	4605      	mov	r5, r0
  400dd2:	4688      	mov	r8, r1
  400dd4:	2800      	cmp	r0, #0
  400dd6:	bf18      	it	ne
  400dd8:	2900      	cmpne	r1, #0
  400dda:	d002      	beq.n	400de2 <usart_async_read+0x1a>
  400ddc:	b9a2      	cbnz	r2, 400e08 <usart_async_read+0x40>
  400dde:	2000      	movs	r0, #0
  400de0:	e000      	b.n	400de4 <usart_async_read+0x1c>
  400de2:	2000      	movs	r0, #0
  400de4:	f44f 72ac 	mov.w	r2, #344	; 0x158
  400de8:	4910      	ldr	r1, [pc, #64]	; (400e2c <usart_async_read+0x64>)
  400dea:	4b11      	ldr	r3, [pc, #68]	; (400e30 <usart_async_read+0x68>)
  400dec:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
  400dee:	a801      	add	r0, sp, #4
  400df0:	4b10      	ldr	r3, [pc, #64]	; (400e34 <usart_async_read+0x6c>)
  400df2:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  400df4:	3534      	adds	r5, #52	; 0x34
  400df6:	4628      	mov	r0, r5
  400df8:	4b0f      	ldr	r3, [pc, #60]	; (400e38 <usart_async_read+0x70>)
  400dfa:	4798      	blx	r3
  400dfc:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
  400dfe:	a801      	add	r0, sp, #4
  400e00:	4b0e      	ldr	r3, [pc, #56]	; (400e3c <usart_async_read+0x74>)
  400e02:	4798      	blx	r3
	uint16_t                       was_read = 0;
  400e04:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
  400e06:	e007      	b.n	400e18 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
  400e08:	2001      	movs	r0, #1
  400e0a:	e7eb      	b.n	400de4 <usart_async_read+0x1c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  400e0c:	3401      	adds	r4, #1
  400e0e:	b2a4      	uxth	r4, r4
  400e10:	4441      	add	r1, r8
  400e12:	4628      	mov	r0, r5
  400e14:	4b0a      	ldr	r3, [pc, #40]	; (400e40 <usart_async_read+0x78>)
  400e16:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  400e18:	4621      	mov	r1, r4
  400e1a:	42a6      	cmp	r6, r4
  400e1c:	d901      	bls.n	400e22 <usart_async_read+0x5a>
  400e1e:	42bc      	cmp	r4, r7
  400e20:	d3f4      	bcc.n	400e0c <usart_async_read+0x44>
}
  400e22:	4620      	mov	r0, r4
  400e24:	b002      	add	sp, #8
  400e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e2a:	bf00      	nop
  400e2c:	00402f14 	.word	0x00402f14
  400e30:	00400fc5 	.word	0x00400fc5
  400e34:	004009c5 	.word	0x004009c5
  400e38:	00401095 	.word	0x00401095
  400e3c:	004009d3 	.word	0x004009d3
  400e40:	00401011 	.word	0x00401011

00400e44 <usart_async_init>:
{
  400e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e46:	4615      	mov	r5, r2
  400e48:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  400e4a:	4604      	mov	r4, r0
  400e4c:	460f      	mov	r7, r1
  400e4e:	2800      	cmp	r0, #0
  400e50:	bf18      	it	ne
  400e52:	2900      	cmpne	r1, #0
  400e54:	d008      	beq.n	400e68 <usart_async_init+0x24>
  400e56:	1c13      	adds	r3, r2, #0
  400e58:	bf18      	it	ne
  400e5a:	2301      	movne	r3, #1
  400e5c:	b116      	cbz	r6, 400e64 <usart_async_init+0x20>
  400e5e:	b10b      	cbz	r3, 400e64 <usart_async_init+0x20>
  400e60:	2001      	movs	r0, #1
  400e62:	e002      	b.n	400e6a <usart_async_init+0x26>
  400e64:	2000      	movs	r0, #0
  400e66:	e000      	b.n	400e6a <usart_async_init+0x26>
  400e68:	2000      	movs	r0, #0
  400e6a:	223a      	movs	r2, #58	; 0x3a
  400e6c:	4910      	ldr	r1, [pc, #64]	; (400eb0 <usart_async_init+0x6c>)
  400e6e:	4b11      	ldr	r3, [pc, #68]	; (400eb4 <usart_async_init+0x70>)
  400e70:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  400e72:	4632      	mov	r2, r6
  400e74:	4629      	mov	r1, r5
  400e76:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400e7a:	4b0f      	ldr	r3, [pc, #60]	; (400eb8 <usart_async_init+0x74>)
  400e7c:	4798      	blx	r3
  400e7e:	b9a0      	cbnz	r0, 400eaa <usart_async_init+0x66>
	init_status = _usart_async_init(&descr->device, hw);
  400e80:	4639      	mov	r1, r7
  400e82:	f104 0008 	add.w	r0, r4, #8
  400e86:	4b0d      	ldr	r3, [pc, #52]	; (400ebc <usart_async_init+0x78>)
  400e88:	4798      	blx	r3
	if (init_status) {
  400e8a:	4603      	mov	r3, r0
  400e8c:	b958      	cbnz	r0, 400ea6 <usart_async_init+0x62>
	descr->io.read  = usart_async_read;
  400e8e:	4a0c      	ldr	r2, [pc, #48]	; (400ec0 <usart_async_init+0x7c>)
  400e90:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
  400e92:	4a0c      	ldr	r2, [pc, #48]	; (400ec4 <usart_async_init+0x80>)
  400e94:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  400e96:	4a0c      	ldr	r2, [pc, #48]	; (400ec8 <usart_async_init+0x84>)
  400e98:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  400e9a:	4a0c      	ldr	r2, [pc, #48]	; (400ecc <usart_async_init+0x88>)
  400e9c:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  400e9e:	4a0c      	ldr	r2, [pc, #48]	; (400ed0 <usart_async_init+0x8c>)
  400ea0:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  400ea2:	4a0c      	ldr	r2, [pc, #48]	; (400ed4 <usart_async_init+0x90>)
  400ea4:	6162      	str	r2, [r4, #20]
}
  400ea6:	4618      	mov	r0, r3
  400ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
  400eaa:	f06f 030c 	mvn.w	r3, #12
  400eae:	e7fa      	b.n	400ea6 <usart_async_init+0x62>
  400eb0:	00402f14 	.word	0x00402f14
  400eb4:	00400fc5 	.word	0x00400fc5
  400eb8:	00400fcd 	.word	0x00400fcd
  400ebc:	0040183d 	.word	0x0040183d
  400ec0:	00400dc9 	.word	0x00400dc9
  400ec4:	00400d35 	.word	0x00400d35
  400ec8:	00400d95 	.word	0x00400d95
  400ecc:	00400d19 	.word	0x00400d19
  400ed0:	00400cf1 	.word	0x00400cf1
  400ed4:	00400d05 	.word	0x00400d05

00400ed8 <usart_async_enable>:
{
  400ed8:	b510      	push	{r4, lr}
	ASSERT(descr);
  400eda:	4604      	mov	r4, r0
  400edc:	2261      	movs	r2, #97	; 0x61
  400ede:	4906      	ldr	r1, [pc, #24]	; (400ef8 <usart_async_enable+0x20>)
  400ee0:	3000      	adds	r0, #0
  400ee2:	bf18      	it	ne
  400ee4:	2001      	movne	r0, #1
  400ee6:	4b05      	ldr	r3, [pc, #20]	; (400efc <usart_async_enable+0x24>)
  400ee8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
  400eea:	f104 0008 	add.w	r0, r4, #8
  400eee:	4b04      	ldr	r3, [pc, #16]	; (400f00 <usart_async_enable+0x28>)
  400ef0:	4798      	blx	r3
}
  400ef2:	2000      	movs	r0, #0
  400ef4:	bd10      	pop	{r4, pc}
  400ef6:	bf00      	nop
  400ef8:	00402f14 	.word	0x00402f14
  400efc:	00400fc5 	.word	0x00400fc5
  400f00:	004018e9 	.word	0x004018e9

00400f04 <usart_async_register_callback>:
{
  400f04:	b570      	push	{r4, r5, r6, lr}
  400f06:	460c      	mov	r4, r1
  400f08:	4616      	mov	r6, r2
	ASSERT(descr);
  400f0a:	4605      	mov	r5, r0
  400f0c:	2283      	movs	r2, #131	; 0x83
  400f0e:	4917      	ldr	r1, [pc, #92]	; (400f6c <usart_async_register_callback+0x68>)
  400f10:	3000      	adds	r0, #0
  400f12:	bf18      	it	ne
  400f14:	2001      	movne	r0, #1
  400f16:	4b16      	ldr	r3, [pc, #88]	; (400f70 <usart_async_register_callback+0x6c>)
  400f18:	4798      	blx	r3
	switch (type) {
  400f1a:	2c01      	cmp	r4, #1
  400f1c:	d010      	beq.n	400f40 <usart_async_register_callback+0x3c>
  400f1e:	b124      	cbz	r4, 400f2a <usart_async_register_callback+0x26>
  400f20:	2c02      	cmp	r4, #2
  400f22:	d018      	beq.n	400f56 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
  400f24:	f06f 000c 	mvn.w	r0, #12
}
  400f28:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
  400f2a:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
  400f2c:	1c32      	adds	r2, r6, #0
  400f2e:	bf18      	it	ne
  400f30:	2201      	movne	r2, #1
  400f32:	2101      	movs	r1, #1
  400f34:	f105 0008 	add.w	r0, r5, #8
  400f38:	4b0e      	ldr	r3, [pc, #56]	; (400f74 <usart_async_register_callback+0x70>)
  400f3a:	4798      	blx	r3
	return ERR_NONE;
  400f3c:	2000      	movs	r0, #0
		break;
  400f3e:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
  400f40:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
  400f42:	1c32      	adds	r2, r6, #0
  400f44:	bf18      	it	ne
  400f46:	2201      	movne	r2, #1
  400f48:	2102      	movs	r1, #2
  400f4a:	f105 0008 	add.w	r0, r5, #8
  400f4e:	4b09      	ldr	r3, [pc, #36]	; (400f74 <usart_async_register_callback+0x70>)
  400f50:	4798      	blx	r3
	return ERR_NONE;
  400f52:	2000      	movs	r0, #0
		break;
  400f54:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
  400f56:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
  400f58:	1c32      	adds	r2, r6, #0
  400f5a:	bf18      	it	ne
  400f5c:	2201      	movne	r2, #1
  400f5e:	2103      	movs	r1, #3
  400f60:	f105 0008 	add.w	r0, r5, #8
  400f64:	4b03      	ldr	r3, [pc, #12]	; (400f74 <usart_async_register_callback+0x70>)
  400f66:	4798      	blx	r3
	return ERR_NONE;
  400f68:	2000      	movs	r0, #0
		break;
  400f6a:	bd70      	pop	{r4, r5, r6, pc}
  400f6c:	00402f14 	.word	0x00402f14
  400f70:	00400fc5 	.word	0x00400fc5
  400f74:	0040198d 	.word	0x0040198d

00400f78 <usart_async_get_status>:
{
  400f78:	b538      	push	{r3, r4, r5, lr}
  400f7a:	460d      	mov	r5, r1
	ASSERT(descr);
  400f7c:	4604      	mov	r4, r0
  400f7e:	f240 120b 	movw	r2, #267	; 0x10b
  400f82:	490d      	ldr	r1, [pc, #52]	; (400fb8 <usart_async_get_status+0x40>)
  400f84:	3000      	adds	r0, #0
  400f86:	bf18      	it	ne
  400f88:	2001      	movne	r0, #1
  400f8a:	4b0c      	ldr	r3, [pc, #48]	; (400fbc <usart_async_get_status+0x44>)
  400f8c:	4798      	blx	r3
	if (status) {
  400f8e:	b14d      	cbz	r5, 400fa4 <usart_async_get_status+0x2c>
		status->flags = *tmp_stat;
  400f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400f92:	602b      	str	r3, [r5, #0]
		status->txcnt = *tmp_txcnt;
  400f94:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  400f98:	80ab      	strh	r3, [r5, #4]
		status->rxcnt = ringbuffer_num(&descr->rx);
  400f9a:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400f9e:	4b08      	ldr	r3, [pc, #32]	; (400fc0 <usart_async_get_status+0x48>)
  400fa0:	4798      	blx	r3
  400fa2:	80e8      	strh	r0, [r5, #6]
	if (*tmp_stat & USART_ASYNC_STATUS_BUSY) {
  400fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400fa6:	f013 0f01 	tst.w	r3, #1
  400faa:	d101      	bne.n	400fb0 <usart_async_get_status+0x38>
	return ERR_NONE;
  400fac:	2000      	movs	r0, #0
}
  400fae:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
  400fb0:	f06f 0003 	mvn.w	r0, #3
  400fb4:	bd38      	pop	{r3, r4, r5, pc}
  400fb6:	bf00      	nop
  400fb8:	00402f14 	.word	0x00402f14
  400fbc:	00400fc5 	.word	0x00400fc5
  400fc0:	00401095 	.word	0x00401095

00400fc4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400fc4:	b900      	cbnz	r0, 400fc8 <assert+0x4>
		__asm("BKPT #0");
  400fc6:	be00      	bkpt	0x0000
  400fc8:	4770      	bx	lr
	...

00400fcc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  400fcc:	b570      	push	{r4, r5, r6, lr}
  400fce:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  400fd0:	4604      	mov	r4, r0
  400fd2:	460e      	mov	r6, r1
  400fd4:	2800      	cmp	r0, #0
  400fd6:	bf18      	it	ne
  400fd8:	2900      	cmpne	r1, #0
  400fda:	d002      	beq.n	400fe2 <ringbuffer_init+0x16>
  400fdc:	b97a      	cbnz	r2, 400ffe <ringbuffer_init+0x32>
  400fde:	2000      	movs	r0, #0
  400fe0:	e000      	b.n	400fe4 <ringbuffer_init+0x18>
  400fe2:	2000      	movs	r0, #0
  400fe4:	2228      	movs	r2, #40	; 0x28
  400fe6:	4908      	ldr	r1, [pc, #32]	; (401008 <ringbuffer_init+0x3c>)
  400fe8:	4b08      	ldr	r3, [pc, #32]	; (40100c <ringbuffer_init+0x40>)
  400fea:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  400fec:	1e6b      	subs	r3, r5, #1
  400fee:	421d      	tst	r5, r3
  400ff0:	d107      	bne.n	401002 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  400ff2:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  400ff4:	2000      	movs	r0, #0
  400ff6:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  400ff8:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  400ffa:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  400ffc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  400ffe:	2001      	movs	r0, #1
  401000:	e7f0      	b.n	400fe4 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  401002:	f06f 000c 	mvn.w	r0, #12
}
  401006:	bd70      	pop	{r4, r5, r6, pc}
  401008:	00402f34 	.word	0x00402f34
  40100c:	00400fc5 	.word	0x00400fc5

00401010 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  401010:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb && data);
  401012:	4604      	mov	r4, r0
  401014:	460d      	mov	r5, r1
  401016:	2800      	cmp	r0, #0
  401018:	bf18      	it	ne
  40101a:	2900      	cmpne	r1, #0
  40101c:	bf14      	ite	ne
  40101e:	2001      	movne	r0, #1
  401020:	2000      	moveq	r0, #0
  401022:	2240      	movs	r2, #64	; 0x40
  401024:	4909      	ldr	r1, [pc, #36]	; (40104c <ringbuffer_get+0x3c>)
  401026:	4b0a      	ldr	r3, [pc, #40]	; (401050 <ringbuffer_get+0x40>)
  401028:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  40102a:	68e2      	ldr	r2, [r4, #12]
  40102c:	68a3      	ldr	r3, [r4, #8]
  40102e:	429a      	cmp	r2, r3
  401030:	d009      	beq.n	401046 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
  401032:	6822      	ldr	r2, [r4, #0]
  401034:	6861      	ldr	r1, [r4, #4]
  401036:	400b      	ands	r3, r1
  401038:	5cd3      	ldrb	r3, [r2, r3]
  40103a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
  40103c:	68a3      	ldr	r3, [r4, #8]
  40103e:	3301      	adds	r3, #1
  401040:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
  401042:	2000      	movs	r0, #0
  401044:	bd38      	pop	{r3, r4, r5, pc}
	}

	return ERR_NOT_FOUND;
  401046:	f06f 0009 	mvn.w	r0, #9
}
  40104a:	bd38      	pop	{r3, r4, r5, pc}
  40104c:	00402f34 	.word	0x00402f34
  401050:	00400fc5 	.word	0x00400fc5

00401054 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401054:	b538      	push	{r3, r4, r5, lr}
  401056:	460d      	mov	r5, r1
	ASSERT(rb);
  401058:	4604      	mov	r4, r0
  40105a:	2251      	movs	r2, #81	; 0x51
  40105c:	490b      	ldr	r1, [pc, #44]	; (40108c <ringbuffer_put+0x38>)
  40105e:	3000      	adds	r0, #0
  401060:	bf18      	it	ne
  401062:	2001      	movne	r0, #1
  401064:	4b0a      	ldr	r3, [pc, #40]	; (401090 <ringbuffer_put+0x3c>)
  401066:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401068:	6822      	ldr	r2, [r4, #0]
  40106a:	68e3      	ldr	r3, [r4, #12]
  40106c:	6861      	ldr	r1, [r4, #4]
  40106e:	400b      	ands	r3, r1
  401070:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401072:	68e3      	ldr	r3, [r4, #12]
  401074:	68a2      	ldr	r2, [r4, #8]
  401076:	1a9a      	subs	r2, r3, r2
  401078:	6861      	ldr	r1, [r4, #4]
  40107a:	428a      	cmp	r2, r1
  40107c:	d901      	bls.n	401082 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  40107e:	1a59      	subs	r1, r3, r1
  401080:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401082:	3301      	adds	r3, #1
  401084:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401086:	2000      	movs	r0, #0
  401088:	bd38      	pop	{r3, r4, r5, pc}
  40108a:	bf00      	nop
  40108c:	00402f34 	.word	0x00402f34
  401090:	00400fc5 	.word	0x00400fc5

00401094 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  401094:	b510      	push	{r4, lr}
	ASSERT(rb);
  401096:	4604      	mov	r4, r0
  401098:	2267      	movs	r2, #103	; 0x67
  40109a:	4905      	ldr	r1, [pc, #20]	; (4010b0 <ringbuffer_num+0x1c>)
  40109c:	3000      	adds	r0, #0
  40109e:	bf18      	it	ne
  4010a0:	2001      	movne	r0, #1
  4010a2:	4b04      	ldr	r3, [pc, #16]	; (4010b4 <ringbuffer_num+0x20>)
  4010a4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  4010a6:	68e0      	ldr	r0, [r4, #12]
  4010a8:	68a3      	ldr	r3, [r4, #8]
}
  4010aa:	1ac0      	subs	r0, r0, r3
  4010ac:	bd10      	pop	{r4, pc}
  4010ae:	bf00      	nop
  4010b0:	00402f34 	.word	0x00402f34
  4010b4:	00400fc5 	.word	0x00400fc5

004010b8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4010b8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4010ba:	4a06      	ldr	r2, [pc, #24]	; (4010d4 <_sbrk+0x1c>)
  4010bc:	6812      	ldr	r2, [r2, #0]
  4010be:	b122      	cbz	r2, 4010ca <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4010c0:	4a04      	ldr	r2, [pc, #16]	; (4010d4 <_sbrk+0x1c>)
  4010c2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4010c4:	4403      	add	r3, r0
  4010c6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4010c8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4010ca:	4903      	ldr	r1, [pc, #12]	; (4010d8 <_sbrk+0x20>)
  4010cc:	4a01      	ldr	r2, [pc, #4]	; (4010d4 <_sbrk+0x1c>)
  4010ce:	6011      	str	r1, [r2, #0]
  4010d0:	e7f6      	b.n	4010c0 <_sbrk+0x8>
  4010d2:	bf00      	nop
  4010d4:	20402228 	.word	0x20402228
  4010d8:	204028a8 	.word	0x204028a8

004010dc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4010dc:	b500      	push	{lr}
  4010de:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4010e0:	a801      	add	r0, sp, #4
  4010e2:	4b0e      	ldr	r3, [pc, #56]	; (40111c <_init_chip+0x40>)
  4010e4:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4010e6:	4a0e      	ldr	r2, [pc, #56]	; (401120 <_init_chip+0x44>)
  4010e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4010f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4010f8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4010fc:	a801      	add	r0, sp, #4
  4010fe:	4b09      	ldr	r3, [pc, #36]	; (401124 <_init_chip+0x48>)
  401100:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401102:	4a09      	ldr	r2, [pc, #36]	; (401128 <_init_chip+0x4c>)
  401104:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40110a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
	((Efc *)hw)->EEFC_FMR = tmp;
  40110e:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  401110:	4b06      	ldr	r3, [pc, #24]	; (40112c <_init_chip+0x50>)
  401112:	4798      	blx	r3
}
  401114:	b003      	add	sp, #12
  401116:	f85d fb04 	ldr.w	pc, [sp], #4
  40111a:	bf00      	nop
  40111c:	004009c5 	.word	0x004009c5
  401120:	e000ed00 	.word	0xe000ed00
  401124:	004009d3 	.word	0x004009d3
  401128:	400e0c00 	.word	0x400e0c00
  40112c:	00401459 	.word	0x00401459

00401130 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401130:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401132:	2500      	movs	r5, #0
  401134:	428d      	cmp	r5, r1
  401136:	d210      	bcs.n	40115a <_ffs+0x2a>
  401138:	2201      	movs	r2, #1
  40113a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40113c:	2b1f      	cmp	r3, #31
  40113e:	d80a      	bhi.n	401156 <_ffs+0x26>
			if (v[i] & bit) {
  401140:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401144:	4222      	tst	r2, r4
  401146:	d102      	bne.n	40114e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401148:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40114a:	3301      	adds	r3, #1
  40114c:	e7f6      	b.n	40113c <_ffs+0xc>
				return i * 32 + j;
  40114e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401152:	bc30      	pop	{r4, r5}
  401154:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401156:	3501      	adds	r5, #1
  401158:	e7ec      	b.n	401134 <_ffs+0x4>
	return -1;
  40115a:	f04f 30ff 	mov.w	r0, #4294967295
  40115e:	e7f8      	b.n	401152 <_ffs+0x22>

00401160 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401160:	b510      	push	{r4, lr}
  401162:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401164:	2300      	movs	r3, #0
  401166:	9301      	str	r3, [sp, #4]
  401168:	9302      	str	r3, [sp, #8]
  40116a:	9303      	str	r3, [sp, #12]
  40116c:	9304      	str	r3, [sp, #16]
  40116e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401170:	4b1b      	ldr	r3, [pc, #108]	; (4011e0 <_ext_irq_handler+0x80>)
  401172:	6818      	ldr	r0, [r3, #0]
  401174:	22f8      	movs	r2, #248	; 0xf8
  401176:	491b      	ldr	r1, [pc, #108]	; (4011e4 <_ext_irq_handler+0x84>)
  401178:	3000      	adds	r0, #0
  40117a:	bf18      	it	ne
  40117c:	2001      	movne	r0, #1
  40117e:	4b1a      	ldr	r3, [pc, #104]	; (4011e8 <_ext_irq_handler+0x88>)
  401180:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401182:	4a1a      	ldr	r2, [pc, #104]	; (4011ec <_ext_irq_handler+0x8c>)
  401184:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401186:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401188:	4013      	ands	r3, r2
  40118a:	9302      	str	r3, [sp, #8]
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  40118c:	e01f      	b.n	4011ce <_ext_irq_handler+0x6e>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  40118e:	4b14      	ldr	r3, [pc, #80]	; (4011e0 <_ext_irq_handler+0x80>)
  401190:	681b      	ldr	r3, [r3, #0]
  401192:	4620      	mov	r0, r4
  401194:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401196:	1163      	asrs	r3, r4, #5
  401198:	f004 041f 	and.w	r4, r4, #31
  40119c:	2201      	movs	r2, #1
  40119e:	fa02 f404 	lsl.w	r4, r2, r4
  4011a2:	aa06      	add	r2, sp, #24
  4011a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4011a8:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4011ac:	ea22 0204 	bic.w	r2, r2, r4
  4011b0:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4011b4:	2105      	movs	r1, #5
  4011b6:	a801      	add	r0, sp, #4
  4011b8:	4b0d      	ldr	r3, [pc, #52]	; (4011f0 <_ext_irq_handler+0x90>)
  4011ba:	4798      	blx	r3
  4011bc:	4604      	mov	r4, r0
		while (-1 != pos) {
  4011be:	f1b4 3fff 	cmp.w	r4, #4294967295
  4011c2:	d1e4      	bne.n	40118e <_ext_irq_handler+0x2e>
	return ((Pio *)hw)->PIO_ISR;
  4011c4:	4a09      	ldr	r2, [pc, #36]	; (4011ec <_ext_irq_handler+0x8c>)
  4011c6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4011c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4011ca:	400b      	ands	r3, r1
  4011cc:	9302      	str	r3, [sp, #8]
	while (flag_total) {
  4011ce:	b12b      	cbz	r3, 4011dc <_ext_irq_handler+0x7c>
		pos = _ffs(flags, 5);
  4011d0:	2105      	movs	r1, #5
  4011d2:	a801      	add	r0, sp, #4
  4011d4:	4b06      	ldr	r3, [pc, #24]	; (4011f0 <_ext_irq_handler+0x90>)
  4011d6:	4798      	blx	r3
  4011d8:	4604      	mov	r4, r0
		while (-1 != pos) {
  4011da:	e7f0      	b.n	4011be <_ext_irq_handler+0x5e>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4011dc:	b006      	add	sp, #24
  4011de:	bd10      	pop	{r4, pc}
  4011e0:	2040222c 	.word	0x2040222c
  4011e4:	00402f7c 	.word	0x00402f7c
  4011e8:	00400fc5 	.word	0x00400fc5
  4011ec:	400e1000 	.word	0x400e1000
  4011f0:	00401131 	.word	0x00401131

004011f4 <_pio_get_hardware_index>:
{
  4011f4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4011f6:	4604      	mov	r4, r0
  4011f8:	22d2      	movs	r2, #210	; 0xd2
  4011fa:	4905      	ldr	r1, [pc, #20]	; (401210 <_pio_get_hardware_index+0x1c>)
  4011fc:	3000      	adds	r0, #0
  4011fe:	bf18      	it	ne
  401200:	2001      	movne	r0, #1
  401202:	4b04      	ldr	r3, [pc, #16]	; (401214 <_pio_get_hardware_index+0x20>)
  401204:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401206:	4804      	ldr	r0, [pc, #16]	; (401218 <_pio_get_hardware_index+0x24>)
  401208:	4420      	add	r0, r4
}
  40120a:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40120e:	bd10      	pop	{r4, pc}
  401210:	00402f7c 	.word	0x00402f7c
  401214:	00400fc5 	.word	0x00400fc5
  401218:	bff1f200 	.word	0xbff1f200

0040121c <_pio_get_index>:
{
  40121c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40121e:	4604      	mov	r4, r0
  401220:	22e0      	movs	r2, #224	; 0xe0
  401222:	490d      	ldr	r1, [pc, #52]	; (401258 <_pio_get_index+0x3c>)
  401224:	3000      	adds	r0, #0
  401226:	bf18      	it	ne
  401228:	2001      	movne	r0, #1
  40122a:	4b0c      	ldr	r3, [pc, #48]	; (40125c <_pio_get_index+0x40>)
  40122c:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40122e:	4620      	mov	r0, r4
  401230:	4b0b      	ldr	r3, [pc, #44]	; (401260 <_pio_get_index+0x44>)
  401232:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401234:	2300      	movs	r3, #0
  401236:	b113      	cbz	r3, 40123e <_pio_get_index+0x22>
	return ERR_INVALID_DATA;
  401238:	f04f 30ff 	mov.w	r0, #4294967295
}
  40123c:	bd10      	pop	{r4, pc}
		if (_ext_irq[i].number == offset) {
  40123e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401242:	008a      	lsls	r2, r1, #2
  401244:	4907      	ldr	r1, [pc, #28]	; (401264 <_pio_get_index+0x48>)
  401246:	5c8a      	ldrb	r2, [r1, r2]
  401248:	4290      	cmp	r0, r2
  40124a:	d002      	beq.n	401252 <_pio_get_index+0x36>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  40124c:	3301      	adds	r3, #1
  40124e:	b2db      	uxtb	r3, r3
  401250:	e7f1      	b.n	401236 <_pio_get_index+0x1a>
			return i;
  401252:	b258      	sxtb	r0, r3
  401254:	bd10      	pop	{r4, pc}
  401256:	bf00      	nop
  401258:	00402f7c 	.word	0x00402f7c
  40125c:	00400fc5 	.word	0x00400fc5
  401260:	004011f5 	.word	0x004011f5
  401264:	00402f58 	.word	0x00402f58

00401268 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401268:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  40126a:	4604      	mov	r4, r0
  40126c:	f44f 72aa 	mov.w	r2, #340	; 0x154
  401270:	4929      	ldr	r1, [pc, #164]	; (401318 <_pio_init+0xb0>)
  401272:	3000      	adds	r0, #0
  401274:	bf18      	it	ne
  401276:	2001      	movne	r0, #1
  401278:	4b28      	ldr	r3, [pc, #160]	; (40131c <_pio_init+0xb4>)
  40127a:	4798      	blx	r3

	i = _pio_get_index(hw);
  40127c:	4620      	mov	r0, r4
  40127e:	4b28      	ldr	r3, [pc, #160]	; (401320 <_pio_init+0xb8>)
  401280:	4798      	blx	r3
	if (i < 0) {
  401282:	2800      	cmp	r0, #0
  401284:	db43      	blt.n	40130e <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401286:	4d27      	ldr	r5, [pc, #156]	; (401324 <_pio_init+0xbc>)
  401288:	00c2      	lsls	r2, r0, #3
  40128a:	1a11      	subs	r1, r2, r0
  40128c:	008b      	lsls	r3, r1, #2
  40128e:	442b      	add	r3, r5
  401290:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401292:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401296:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401298:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  40129c:	691b      	ldr	r3, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  40129e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	((Pio *)hw)->PIO_FELLSR = mask;
  4012a2:	2300      	movs	r3, #0
  4012a4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4012a8:	1a10      	subs	r0, r2, r0
  4012aa:	0083      	lsls	r3, r0, #2
  4012ac:	442b      	add	r3, r5
  4012ae:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4012b0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4012b4:	4620      	mov	r0, r4
  4012b6:	4b1c      	ldr	r3, [pc, #112]	; (401328 <_pio_init+0xc0>)
  4012b8:	4798      	blx	r3
  4012ba:	4428      	add	r0, r5
  4012bc:	f990 301c 	ldrsb.w	r3, [r0, #28]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	db0c      	blt.n	4012de <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012c4:	095a      	lsrs	r2, r3, #5
  4012c6:	f003 001f 	and.w	r0, r3, #31
  4012ca:	2101      	movs	r1, #1
  4012cc:	4081      	lsls	r1, r0
  4012ce:	3220      	adds	r2, #32
  4012d0:	4816      	ldr	r0, [pc, #88]	; (40132c <_pio_init+0xc4>)
  4012d2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4012d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4012da:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4012de:	2b00      	cmp	r3, #0
  4012e0:	db08      	blt.n	4012f4 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012e2:	095a      	lsrs	r2, r3, #5
  4012e4:	f003 001f 	and.w	r0, r3, #31
  4012e8:	2101      	movs	r1, #1
  4012ea:	4081      	lsls	r1, r0
  4012ec:	3260      	adds	r2, #96	; 0x60
  4012ee:	480f      	ldr	r0, [pc, #60]	; (40132c <_pio_init+0xc4>)
  4012f0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  4012f4:	2b00      	cmp	r3, #0
  4012f6:	db0d      	blt.n	401314 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012f8:	0959      	lsrs	r1, r3, #5
  4012fa:	f003 031f 	and.w	r3, r3, #31
  4012fe:	2201      	movs	r2, #1
  401300:	fa02 f303 	lsl.w	r3, r2, r3
  401304:	4a09      	ldr	r2, [pc, #36]	; (40132c <_pio_init+0xc4>)
  401306:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  40130a:	2000      	movs	r0, #0
  40130c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40130e:	f06f 0010 	mvn.w	r0, #16
  401312:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401314:	2000      	movs	r0, #0
}
  401316:	bd38      	pop	{r3, r4, r5, pc}
  401318:	00402f7c 	.word	0x00402f7c
  40131c:	00400fc5 	.word	0x00400fc5
  401320:	0040121d 	.word	0x0040121d
  401324:	00402f58 	.word	0x00402f58
  401328:	004011f5 	.word	0x004011f5
  40132c:	e000e100 	.word	0xe000e100

00401330 <PIOB_Handler>:
{
  401330:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401332:	4b01      	ldr	r3, [pc, #4]	; (401338 <PIOB_Handler+0x8>)
  401334:	4798      	blx	r3
  401336:	bd08      	pop	{r3, pc}
  401338:	00401161 	.word	0x00401161

0040133c <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  40133c:	b510      	push	{r4, lr}
  40133e:	4604      	mov	r4, r0
#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401340:	4803      	ldr	r0, [pc, #12]	; (401350 <_ext_irq_init+0x14>)
  401342:	4b04      	ldr	r3, [pc, #16]	; (401354 <_ext_irq_init+0x18>)
  401344:	4798      	blx	r3

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401346:	4b04      	ldr	r3, [pc, #16]	; (401358 <_ext_irq_init+0x1c>)
  401348:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
  40134a:	2000      	movs	r0, #0
  40134c:	bd10      	pop	{r4, pc}
  40134e:	bf00      	nop
  401350:	400e1000 	.word	0x400e1000
  401354:	00401269 	.word	0x00401269
  401358:	2040222c 	.word	0x2040222c

0040135c <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  40135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401360:	4604      	mov	r4, r0
  401362:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401364:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4013b8 <_ext_irq_enable+0x5c>
  401368:	f240 12a1 	movw	r2, #417	; 0x1a1
  40136c:	4641      	mov	r1, r8
  40136e:	289f      	cmp	r0, #159	; 0x9f
  401370:	bf8c      	ite	hi
  401372:	2000      	movhi	r0, #0
  401374:	2001      	movls	r0, #1
  401376:	4e0e      	ldr	r6, [pc, #56]	; (4013b0 <_ext_irq_enable+0x54>)
  401378:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  40137a:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  40137c:	22c3      	movs	r2, #195	; 0xc3
  40137e:	4641      	mov	r1, r8
  401380:	2d9f      	cmp	r5, #159	; 0x9f
  401382:	bf8c      	ite	hi
  401384:	2000      	movhi	r0, #0
  401386:	2001      	movls	r0, #1
  401388:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  40138a:	096d      	lsrs	r5, r5, #5
  40138c:	4b09      	ldr	r3, [pc, #36]	; (4013b4 <_ext_irq_enable+0x58>)
  40138e:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  401392:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  401396:	b937      	cbnz	r7, 4013a6 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  401398:	2301      	movs	r3, #1
  40139a:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  40139e:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  4013a0:	2000      	movs	r0, #0
  4013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4013a6:	2301      	movs	r3, #1
  4013a8:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  4013ac:	642c      	str	r4, [r5, #64]	; 0x40
  4013ae:	e7f7      	b.n	4013a0 <_ext_irq_enable+0x44>
  4013b0:	00400fc5 	.word	0x00400fc5
  4013b4:	400e0e00 	.word	0x400e0e00
  4013b8:	00402f7c 	.word	0x00402f7c

004013bc <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4013bc:	490e      	ldr	r1, [pc, #56]	; (4013f8 <_pmc_init_sources+0x3c>)
  4013be:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4013c0:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4013c4:	4b0d      	ldr	r3, [pc, #52]	; (4013fc <_pmc_init_sources+0x40>)
  4013c6:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4013c8:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4013ca:	4b0b      	ldr	r3, [pc, #44]	; (4013f8 <_pmc_init_sources+0x3c>)
  4013cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4013ce:	f013 0f01 	tst.w	r3, #1
  4013d2:	d0fa      	beq.n	4013ca <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4013d4:	4b08      	ldr	r3, [pc, #32]	; (4013f8 <_pmc_init_sources+0x3c>)
  4013d6:	6a19      	ldr	r1, [r3, #32]
  4013d8:	4a09      	ldr	r2, [pc, #36]	; (401400 <_pmc_init_sources+0x44>)
  4013da:	430a      	orrs	r2, r1
  4013dc:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4013de:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4013e0:	4a08      	ldr	r2, [pc, #32]	; (401404 <_pmc_init_sources+0x48>)
  4013e2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4013e4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4013e6:	4a08      	ldr	r2, [pc, #32]	; (401408 <_pmc_init_sources+0x4c>)
  4013e8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4013ea:	4b03      	ldr	r3, [pc, #12]	; (4013f8 <_pmc_init_sources+0x3c>)
  4013ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4013ee:	f013 0f02 	tst.w	r3, #2
  4013f2:	d0fa      	beq.n	4013ea <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4013f4:	4770      	bx	lr
  4013f6:	bf00      	nop
  4013f8:	400e0600 	.word	0x400e0600
  4013fc:	00373e01 	.word	0x00373e01
  401400:	01370000 	.word	0x01370000
  401404:	f800ffff 	.word	0xf800ffff
  401408:	20183f01 	.word	0x20183f01

0040140c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40140c:	4a11      	ldr	r2, [pc, #68]	; (401454 <_pmc_init_master_clock+0x48>)
  40140e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401414:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401416:	4b0f      	ldr	r3, [pc, #60]	; (401454 <_pmc_init_master_clock+0x48>)
  401418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40141a:	f013 0f08 	tst.w	r3, #8
  40141e:	d0fa      	beq.n	401416 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401420:	4a0c      	ldr	r2, [pc, #48]	; (401454 <_pmc_init_master_clock+0x48>)
  401422:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  40142c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40142e:	4b09      	ldr	r3, [pc, #36]	; (401454 <_pmc_init_master_clock+0x48>)
  401430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401432:	f013 0f08 	tst.w	r3, #8
  401436:	d0fa      	beq.n	40142e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401438:	4a06      	ldr	r2, [pc, #24]	; (401454 <_pmc_init_master_clock+0x48>)
  40143a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  40143c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401440:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401444:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401446:	4b03      	ldr	r3, [pc, #12]	; (401454 <_pmc_init_master_clock+0x48>)
  401448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40144a:	f013 0f08 	tst.w	r3, #8
  40144e:	d0fa      	beq.n	401446 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	400e0600 	.word	0x400e0600

00401458 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401458:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40145a:	4b02      	ldr	r3, [pc, #8]	; (401464 <_pmc_init+0xc>)
  40145c:	4798      	blx	r3
	_pmc_init_master_clock();
  40145e:	4b02      	ldr	r3, [pc, #8]	; (401468 <_pmc_init+0x10>)
  401460:	4798      	blx	r3
  401462:	bd08      	pop	{r3, pc}
  401464:	004013bd 	.word	0x004013bd
  401468:	0040140d 	.word	0x0040140d

0040146c <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  40146c:	2301      	movs	r3, #1
  40146e:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  401470:	2000      	movs	r0, #0
  401472:	4770      	bx	lr

00401474 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  401474:	4b04      	ldr	r3, [pc, #16]	; (401488 <_spi_get_hardware_index+0x14>)
  401476:	4403      	add	r3, r0
  401478:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  40147c:	2b05      	cmp	r3, #5
  40147e:	d001      	beq.n	401484 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  401480:	2000      	movs	r0, #0
	}
}
  401482:	4770      	bx	lr
		return 1;
  401484:	2001      	movs	r0, #1
  401486:	4770      	bx	lr
  401488:	bfff8000 	.word	0xbfff8000

0040148c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  40148c:	b570      	push	{r4, r5, r6, lr}
  40148e:	4606      	mov	r6, r0
  401490:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  401492:	4608      	mov	r0, r1
  401494:	4b20      	ldr	r3, [pc, #128]	; (401518 <_spi_m_sync_init+0x8c>)
  401496:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401498:	2300      	movs	r3, #0
  40149a:	b33b      	cbz	r3, 4014ec <_spi_m_sync_init+0x60>
	return NULL;
  40149c:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  40149e:	f44f 729a 	mov.w	r2, #308	; 0x134
  4014a2:	491e      	ldr	r1, [pc, #120]	; (40151c <_spi_m_sync_init+0x90>)
  4014a4:	2e00      	cmp	r6, #0
  4014a6:	bf18      	it	ne
  4014a8:	2c00      	cmpne	r4, #0
  4014aa:	bf14      	ite	ne
  4014ac:	2001      	movne	r0, #1
  4014ae:	2000      	moveq	r0, #0
  4014b0:	4b1b      	ldr	r3, [pc, #108]	; (401520 <_spi_m_sync_init+0x94>)
  4014b2:	4798      	blx	r3

	if (regs == NULL) {
  4014b4:	b355      	cbz	r5, 40150c <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4014b6:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4014b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4014bc:	d129      	bne.n	401512 <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  4014be:	2380      	movs	r3, #128	; 0x80
  4014c0:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  4014c2:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4014c4:	686a      	ldr	r2, [r5, #4]
  4014c6:	4b17      	ldr	r3, [pc, #92]	; (401524 <_spi_m_sync_init+0x98>)
  4014c8:	4013      	ands	r3, r2
  4014ca:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4014cc:	68ab      	ldr	r3, [r5, #8]
  4014ce:	4a16      	ldr	r2, [pc, #88]	; (401528 <_spi_m_sync_init+0x9c>)
  4014d0:	401a      	ands	r2, r3
  4014d2:	4b16      	ldr	r3, [pc, #88]	; (40152c <_spi_m_sync_init+0xa0>)
  4014d4:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  4014d6:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4014d8:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  4014da:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  4014dc:	8a2b      	ldrh	r3, [r5, #16]
  4014de:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4014e0:	68eb      	ldr	r3, [r5, #12]
  4014e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4014e6:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  4014e8:	2000      	movs	r0, #0
  4014ea:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  4014ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4014f0:	008a      	lsls	r2, r1, #2
  4014f2:	490f      	ldr	r1, [pc, #60]	; (401530 <_spi_m_sync_init+0xa4>)
  4014f4:	5c8a      	ldrb	r2, [r1, r2]
  4014f6:	4290      	cmp	r0, r2
  4014f8:	d002      	beq.n	401500 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4014fa:	3301      	adds	r3, #1
  4014fc:	b2db      	uxtb	r3, r3
  4014fe:	e7cc      	b.n	40149a <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  401500:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  401504:	00ab      	lsls	r3, r5, #2
  401506:	460d      	mov	r5, r1
  401508:	441d      	add	r5, r3
  40150a:	e7c8      	b.n	40149e <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  40150c:	f06f 000c 	mvn.w	r0, #12
  401510:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  401512:	f06f 0010 	mvn.w	r0, #16
}
  401516:	bd70      	pop	{r4, r5, r6, pc}
  401518:	00401475 	.word	0x00401475
  40151c:	00402fac 	.word	0x00402fac
  401520:	00400fc5 	.word	0x00400fc5
  401524:	feffff7c 	.word	0xfeffff7c
  401528:	fff1ff6f 	.word	0xfff1ff6f
  40152c:	000e0010 	.word	0x000e0010
  401530:	00402f98 	.word	0x00402f98

00401534 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  401534:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  401536:	4604      	mov	r4, r0
  401538:	b168      	cbz	r0, 401556 <_spi_m_sync_enable+0x22>
  40153a:	6803      	ldr	r3, [r0, #0]
  40153c:	b14b      	cbz	r3, 401552 <_spi_m_sync_enable+0x1e>
  40153e:	2001      	movs	r0, #1
  401540:	f44f 72b9 	mov.w	r2, #370	; 0x172
  401544:	4905      	ldr	r1, [pc, #20]	; (40155c <_spi_m_sync_enable+0x28>)
  401546:	4b06      	ldr	r3, [pc, #24]	; (401560 <_spi_m_sync_enable+0x2c>)
  401548:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  40154a:	6820      	ldr	r0, [r4, #0]
  40154c:	4b05      	ldr	r3, [pc, #20]	; (401564 <_spi_m_sync_enable+0x30>)
  40154e:	4798      	blx	r3
}
  401550:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  401552:	2000      	movs	r0, #0
  401554:	e7f4      	b.n	401540 <_spi_m_sync_enable+0xc>
  401556:	2000      	movs	r0, #0
  401558:	e7f2      	b.n	401540 <_spi_m_sync_enable+0xc>
  40155a:	bf00      	nop
  40155c:	00402fac 	.word	0x00402fac
  401560:	00400fc5 	.word	0x00400fc5
  401564:	0040146d 	.word	0x0040146d

00401568 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  401568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40156c:	b086      	sub	sp, #24
  40156e:	4607      	mov	r7, r0
  401570:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  401572:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  401574:	680b      	ldr	r3, [r1, #0]
  401576:	9301      	str	r3, [sp, #4]
  401578:	684b      	ldr	r3, [r1, #4]
  40157a:	9302      	str	r3, [sp, #8]
  40157c:	2300      	movs	r3, #0
  40157e:	9303      	str	r3, [sp, #12]
  401580:	9304      	str	r3, [sp, #16]
  401582:	7903      	ldrb	r3, [r0, #4]
  401584:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  401588:	1c26      	adds	r6, r4, #0
  40158a:	bf18      	it	ne
  40158c:	2601      	movne	r6, #1
  40158e:	f240 2231 	movw	r2, #561	; 0x231
  401592:	4933      	ldr	r1, [pc, #204]	; (401660 <_spi_m_sync_trans+0xf8>)
  401594:	2800      	cmp	r0, #0
  401596:	bf0c      	ite	eq
  401598:	2000      	moveq	r0, #0
  40159a:	f006 0001 	andne.w	r0, r6, #1
  40159e:	4b31      	ldr	r3, [pc, #196]	; (401664 <_spi_m_sync_trans+0xfc>)
  4015a0:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4015a2:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  4015a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4015a8:	d122      	bne.n	4015f0 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  4015aa:	f06f 0013 	mvn.w	r0, #19
  4015ae:	e053      	b.n	401658 <_spi_m_sync_trans+0xf0>
		return false;
  4015b0:	2300      	movs	r3, #0
  4015b2:	e035      	b.n	401620 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  4015b4:	7850      	ldrb	r0, [r2, #1]
  4015b6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  4015ba:	3202      	adds	r2, #2
  4015bc:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  4015be:	3301      	adds	r3, #1
  4015c0:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  4015c2:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  4015c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  4015c8:	f240 2222 	movw	r2, #546	; 0x222
  4015cc:	4924      	ldr	r1, [pc, #144]	; (401660 <_spi_m_sync_trans+0xf8>)
  4015ce:	4630      	mov	r0, r6
  4015d0:	4b24      	ldr	r3, [pc, #144]	; (401664 <_spi_m_sync_trans+0xfc>)
  4015d2:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  4015d4:	f018 0f08 	tst.w	r8, #8
  4015d8:	d038      	beq.n	40164c <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  4015da:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  4015de:	2800      	cmp	r0, #0
  4015e0:	db36      	blt.n	401650 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  4015e2:	9803      	ldr	r0, [sp, #12]
  4015e4:	68ab      	ldr	r3, [r5, #8]
  4015e6:	4298      	cmp	r0, r3
  4015e8:	d302      	bcc.n	4015f0 <_spi_m_sync_trans+0x88>
  4015ea:	9a04      	ldr	r2, [sp, #16]
  4015ec:	4293      	cmp	r3, r2
  4015ee:	d92f      	bls.n	401650 <_spi_m_sync_trans+0xe8>
  4015f0:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  4015f2:	f013 0f01 	tst.w	r3, #1
  4015f6:	d0db      	beq.n	4015b0 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  4015f8:	68a3      	ldr	r3, [r4, #8]
  4015fa:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  4015fc:	9a02      	ldr	r2, [sp, #8]
  4015fe:	b15a      	cbz	r2, 401618 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  401600:	1c51      	adds	r1, r2, #1
  401602:	9102      	str	r1, [sp, #8]
  401604:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  401606:	f89d 2014 	ldrb.w	r2, [sp, #20]
  40160a:	2a01      	cmp	r2, #1
  40160c:	d904      	bls.n	401618 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  40160e:	460a      	mov	r2, r1
  401610:	3101      	adds	r1, #1
  401612:	9102      	str	r1, [sp, #8]
  401614:	0a1b      	lsrs	r3, r3, #8
  401616:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  401618:	9b04      	ldr	r3, [sp, #16]
  40161a:	3301      	adds	r3, #1
  40161c:	9304      	str	r3, [sp, #16]
	return true;
  40161e:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401620:	2b00      	cmp	r3, #0
  401622:	d1cf      	bne.n	4015c4 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401624:	9b03      	ldr	r3, [sp, #12]
  401626:	9a04      	ldr	r2, [sp, #16]
  401628:	429a      	cmp	r2, r3
  40162a:	d3cb      	bcc.n	4015c4 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  40162c:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  40162e:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401630:	f012 0f02 	tst.w	r2, #2
  401634:	d0c6      	beq.n	4015c4 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  401636:	9a01      	ldr	r2, [sp, #4]
  401638:	2a00      	cmp	r2, #0
  40163a:	d0c0      	beq.n	4015be <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  40163c:	1c51      	adds	r1, r2, #1
  40163e:	9101      	str	r1, [sp, #4]
  401640:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401642:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401646:	2801      	cmp	r0, #1
  401648:	d8b4      	bhi.n	4015b4 <_spi_m_sync_trans+0x4c>
  40164a:	e7b8      	b.n	4015be <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  40164c:	2000      	movs	r0, #0
  40164e:	e7c6      	b.n	4015de <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401650:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401652:	f413 7f00 	tst.w	r3, #512	; 0x200
  401656:	d0fb      	beq.n	401650 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  401658:	b006      	add	sp, #24
  40165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40165e:	bf00      	nop
  401660:	00402fac 	.word	0x00402fac
  401664:	00400fc5 	.word	0x00400fc5

00401668 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  401668:	2000      	movs	r0, #0
  40166a:	4770      	bx	lr

0040166c <_usart_init_irq_param>:
/**
 * \brief Init irq param with the given usart hardware instance
 */
static void _usart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
	if (hw == USART1) {
  40166c:	4b03      	ldr	r3, [pc, #12]	; (40167c <_usart_init_irq_param+0x10>)
  40166e:	4298      	cmp	r0, r3
  401670:	d000      	beq.n	401674 <_usart_init_irq_param+0x8>
  401672:	4770      	bx	lr
		_usart1_dev = dev;
  401674:	4b02      	ldr	r3, [pc, #8]	; (401680 <_usart_init_irq_param+0x14>)
  401676:	6019      	str	r1, [r3, #0]
	}
}
  401678:	e7fb      	b.n	401672 <_usart_init_irq_param+0x6>
  40167a:	bf00      	nop
  40167c:	40028000 	.word	0x40028000
  401680:	20402230 	.word	0x20402230

00401684 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401684:	b510      	push	{r4, lr}
	ASSERT(hw);
  401686:	4604      	mov	r4, r0
  401688:	f240 222f 	movw	r2, #559	; 0x22f
  40168c:	4905      	ldr	r1, [pc, #20]	; (4016a4 <_usart_get_hardware_index+0x20>)
  40168e:	3000      	adds	r0, #0
  401690:	bf18      	it	ne
  401692:	2001      	movne	r0, #1
  401694:	4b04      	ldr	r3, [pc, #16]	; (4016a8 <_usart_get_hardware_index+0x24>)
  401696:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401698:	4804      	ldr	r0, [pc, #16]	; (4016ac <_usart_get_hardware_index+0x28>)
  40169a:	4420      	add	r0, r4
}
  40169c:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4016a0:	bd10      	pop	{r4, pc}
  4016a2:	bf00      	nop
  4016a4:	00402fd0 	.word	0x00402fd0
  4016a8:	00400fc5 	.word	0x00400fc5
  4016ac:	bffdc000 	.word	0xbffdc000

004016b0 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4016b0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4016b2:	4604      	mov	r4, r0
  4016b4:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  4016b8:	490e      	ldr	r1, [pc, #56]	; (4016f4 <_get_usart_index+0x44>)
  4016ba:	3000      	adds	r0, #0
  4016bc:	bf18      	it	ne
  4016be:	2001      	movne	r0, #1
  4016c0:	4b0d      	ldr	r3, [pc, #52]	; (4016f8 <_get_usart_index+0x48>)
  4016c2:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4016c4:	4620      	mov	r0, r4
  4016c6:	4b0d      	ldr	r3, [pc, #52]	; (4016fc <_get_usart_index+0x4c>)
  4016c8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4016ca:	2300      	movs	r3, #0
  4016cc:	b143      	cbz	r3, 4016e0 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4016ce:	f240 22be 	movw	r2, #702	; 0x2be
  4016d2:	4908      	ldr	r1, [pc, #32]	; (4016f4 <_get_usart_index+0x44>)
  4016d4:	2000      	movs	r0, #0
  4016d6:	4b08      	ldr	r3, [pc, #32]	; (4016f8 <_get_usart_index+0x48>)
  4016d8:	4798      	blx	r3
	return 0;
  4016da:	2300      	movs	r3, #0
}
  4016dc:	4618      	mov	r0, r3
  4016de:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4016e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4016e4:	008a      	lsls	r2, r1, #2
  4016e6:	4906      	ldr	r1, [pc, #24]	; (401700 <_get_usart_index+0x50>)
  4016e8:	5c8a      	ldrb	r2, [r1, r2]
  4016ea:	4290      	cmp	r0, r2
  4016ec:	d0f6      	beq.n	4016dc <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4016ee:	3301      	adds	r3, #1
  4016f0:	b2db      	uxtb	r3, r3
  4016f2:	e7eb      	b.n	4016cc <_get_usart_index+0x1c>
  4016f4:	00402fd0 	.word	0x00402fd0
  4016f8:	00400fc5 	.word	0x00400fc5
  4016fc:	00401685 	.word	0x00401685
  401700:	00402fc4 	.word	0x00402fc4

00401704 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401704:	b510      	push	{r4, lr}
	ASSERT(hw);
  401706:	4604      	mov	r4, r0
  401708:	f240 22cb 	movw	r2, #715	; 0x2cb
  40170c:	4911      	ldr	r1, [pc, #68]	; (401754 <_usart_init+0x50>)
  40170e:	3000      	adds	r0, #0
  401710:	bf18      	it	ne
  401712:	2001      	movne	r0, #1
  401714:	4b10      	ldr	r3, [pc, #64]	; (401758 <_usart_init+0x54>)
  401716:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401718:	4620      	mov	r0, r4
  40171a:	4b10      	ldr	r3, [pc, #64]	; (40175c <_usart_init+0x58>)
  40171c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40171e:	4b10      	ldr	r3, [pc, #64]	; (401760 <_usart_init+0x5c>)
  401720:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401724:	2300      	movs	r3, #0
  401726:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401728:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40172a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40172c:	22ac      	movs	r2, #172	; 0xac
  40172e:	6022      	str	r2, [r4, #0]
  401730:	f44f 7280 	mov.w	r2, #256	; 0x100
  401734:	6022      	str	r2, [r4, #0]
  401736:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40173a:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  40173c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401740:	0081      	lsls	r1, r0, #2
  401742:	4a08      	ldr	r2, [pc, #32]	; (401764 <_usart_init+0x60>)
  401744:	440a      	add	r2, r1
  401746:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401748:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40174a:	4a07      	ldr	r2, [pc, #28]	; (401768 <_usart_init+0x64>)
  40174c:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40174e:	4618      	mov	r0, r3
  401750:	bd10      	pop	{r4, pc}
  401752:	bf00      	nop
  401754:	00402fd0 	.word	0x00402fd0
  401758:	00400fc5 	.word	0x00400fc5
  40175c:	004016b1 	.word	0x004016b1
  401760:	55534100 	.word	0x55534100
  401764:	00402fc4 	.word	0x00402fc4
  401768:	00030051 	.word	0x00030051

0040176c <_usart_get_irq_num>:
{
  40176c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40176e:	4604      	mov	r4, r0
  401770:	22ae      	movs	r2, #174	; 0xae
  401772:	4906      	ldr	r1, [pc, #24]	; (40178c <_usart_get_irq_num+0x20>)
  401774:	3000      	adds	r0, #0
  401776:	bf18      	it	ne
  401778:	2001      	movne	r0, #1
  40177a:	4b05      	ldr	r3, [pc, #20]	; (401790 <_usart_get_irq_num+0x24>)
  40177c:	4798      	blx	r3
	return USART0_IRQn + _usart_get_hardware_index(hw);
  40177e:	4620      	mov	r0, r4
  401780:	4b04      	ldr	r3, [pc, #16]	; (401794 <_usart_get_irq_num+0x28>)
  401782:	4798      	blx	r3
  401784:	300d      	adds	r0, #13
}
  401786:	b2c0      	uxtb	r0, r0
  401788:	bd10      	pop	{r4, pc}
  40178a:	bf00      	nop
  40178c:	00402fd0 	.word	0x00402fd0
  401790:	00400fc5 	.word	0x00400fc5
  401794:	00401685 	.word	0x00401685

00401798 <_usart_interrupt_handler>:
{
  401798:	b510      	push	{r4, lr}
	ASSERT(device);
  40179a:	4604      	mov	r4, r0
  40179c:	f240 2289 	movw	r2, #649	; 0x289
  4017a0:	4923      	ldr	r1, [pc, #140]	; (401830 <_usart_interrupt_handler+0x98>)
  4017a2:	3000      	adds	r0, #0
  4017a4:	bf18      	it	ne
  4017a6:	2001      	movne	r0, #1
  4017a8:	4b22      	ldr	r3, [pc, #136]	; (401834 <_usart_interrupt_handler+0x9c>)
  4017aa:	4798      	blx	r3
	void *hw = device->hw;
  4017ac:	69a3      	ldr	r3, [r4, #24]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  4017ae:	695a      	ldr	r2, [r3, #20]
	if (hri_usart_get_US_CSR_TXRDY_bit(hw) && hri_usart_get_US_IMR_TXRDY_bit(hw)) {
  4017b0:	f012 0f02 	tst.w	r2, #2
  4017b4:	d003      	beq.n	4017be <_usart_interrupt_handler+0x26>
	return (((Usart *)hw)->US_IMR & US_IMR_TXRDY) >> US_IMR_TXRDY_Pos;
  4017b6:	691a      	ldr	r2, [r3, #16]
  4017b8:	f012 0f02 	tst.w	r2, #2
  4017bc:	d118      	bne.n	4017f0 <_usart_interrupt_handler+0x58>
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4017be:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_TXEMPTY_bit(hw) && hri_usart_get_US_IMR_TXEMPTY_bit(hw)) {
  4017c0:	f412 7f00 	tst.w	r2, #512	; 0x200
  4017c4:	d003      	beq.n	4017ce <_usart_interrupt_handler+0x36>
	return (((Usart *)hw)->US_IMR & US_IMR_TXEMPTY) >> US_IMR_TXEMPTY_Pos;
  4017c6:	691a      	ldr	r2, [r3, #16]
  4017c8:	f412 7f00 	tst.w	r2, #512	; 0x200
  4017cc:	d116      	bne.n	4017fc <_usart_interrupt_handler+0x64>
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4017ce:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_RXRDY_bit(hw) && hri_usart_get_US_IMR_RXRDY_bit(hw)) {
  4017d0:	f012 0f01 	tst.w	r2, #1
  4017d4:	d01f      	beq.n	401816 <_usart_interrupt_handler+0x7e>
	return (((Usart *)hw)->US_IMR & US_IMR_RXRDY) >> US_IMR_RXRDY_Pos;
  4017d6:	691a      	ldr	r2, [r3, #16]
  4017d8:	f012 0f01 	tst.w	r2, #1
  4017dc:	d01b      	beq.n	401816 <_usart_interrupt_handler+0x7e>
	return ((Usart *)hw)->US_CSR;
  4017de:	6959      	ldr	r1, [r3, #20]
		if (hri_usart_read_US_CSR_reg(hw) &
  4017e0:	4a15      	ldr	r2, [pc, #84]	; (401838 <_usart_interrupt_handler+0xa0>)
  4017e2:	4211      	tst	r1, r2
  4017e4:	d011      	beq.n	40180a <_usart_interrupt_handler+0x72>
	return ((Usart *)hw)->US_RHR;
  4017e6:	699a      	ldr	r2, [r3, #24]
	((Usart *)hw)->US_CR = data;
  4017e8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4017ec:	601a      	str	r2, [r3, #0]
  4017ee:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  4017f0:	2202      	movs	r2, #2
  4017f2:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
  4017f4:	6823      	ldr	r3, [r4, #0]
  4017f6:	4620      	mov	r0, r4
  4017f8:	4798      	blx	r3
  4017fa:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  4017fc:	f44f 7200 	mov.w	r2, #512	; 0x200
  401800:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
  401802:	68a3      	ldr	r3, [r4, #8]
  401804:	4620      	mov	r0, r4
  401806:	4798      	blx	r3
  401808:	bd10      	pop	{r4, pc}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_usart_read_US_RHR_reg(hw));
  40180a:	6862      	ldr	r2, [r4, #4]
	return ((Usart *)hw)->US_RHR;
  40180c:	6999      	ldr	r1, [r3, #24]
  40180e:	b2c9      	uxtb	r1, r1
  401810:	4620      	mov	r0, r4
  401812:	4790      	blx	r2
  401814:	bd10      	pop	{r4, pc}
	return ((Usart *)hw)->US_CSR;
  401816:	6959      	ldr	r1, [r3, #20]
	} else if (hri_usart_read_US_CSR_reg(hw) &
  401818:	4a07      	ldr	r2, [pc, #28]	; (401838 <_usart_interrupt_handler+0xa0>)
  40181a:	4211      	tst	r1, r2
  40181c:	d100      	bne.n	401820 <_usart_interrupt_handler+0x88>
  40181e:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_CR = data;
  401820:	f44f 7280 	mov.w	r2, #256	; 0x100
  401824:	601a      	str	r2, [r3, #0]
		device->usart_cb.error_cb(device);
  401826:	68e3      	ldr	r3, [r4, #12]
  401828:	4620      	mov	r0, r4
  40182a:	4798      	blx	r3
  40182c:	e7f7      	b.n	40181e <_usart_interrupt_handler+0x86>
  40182e:	bf00      	nop
  401830:	00402fd0 	.word	0x00402fd0
  401834:	00400fc5 	.word	0x00400fc5
  401838:	010000e0 	.word	0x010000e0

0040183c <_usart_async_init>:
{
  40183c:	b570      	push	{r4, r5, r6, lr}
  40183e:	460c      	mov	r4, r1
	ASSERT(device);
  401840:	4606      	mov	r6, r0
  401842:	22d1      	movs	r2, #209	; 0xd1
  401844:	4922      	ldr	r1, [pc, #136]	; (4018d0 <_usart_async_init+0x94>)
  401846:	3000      	adds	r0, #0
  401848:	bf18      	it	ne
  40184a:	2001      	movne	r0, #1
  40184c:	4b21      	ldr	r3, [pc, #132]	; (4018d4 <_usart_async_init+0x98>)
  40184e:	4798      	blx	r3
	init_status = _usart_init(hw);
  401850:	4620      	mov	r0, r4
  401852:	4b21      	ldr	r3, [pc, #132]	; (4018d8 <_usart_async_init+0x9c>)
  401854:	4798      	blx	r3
	if (init_status) {
  401856:	4605      	mov	r5, r0
  401858:	b108      	cbz	r0, 40185e <_usart_async_init+0x22>
}
  40185a:	4628      	mov	r0, r5
  40185c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  40185e:	61b4      	str	r4, [r6, #24]
	_usart_init_irq_param(hw, device);
  401860:	4631      	mov	r1, r6
  401862:	4620      	mov	r0, r4
  401864:	4b1d      	ldr	r3, [pc, #116]	; (4018dc <_usart_async_init+0xa0>)
  401866:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401868:	4620      	mov	r0, r4
  40186a:	4b1d      	ldr	r3, [pc, #116]	; (4018e0 <_usart_async_init+0xa4>)
  40186c:	4798      	blx	r3
  40186e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401870:	2b00      	cmp	r3, #0
  401872:	db0d      	blt.n	401890 <_usart_async_init+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401874:	095b      	lsrs	r3, r3, #5
  401876:	f000 001f 	and.w	r0, r0, #31
  40187a:	2201      	movs	r2, #1
  40187c:	fa02 f000 	lsl.w	r0, r2, r0
  401880:	3320      	adds	r3, #32
  401882:	4a18      	ldr	r2, [pc, #96]	; (4018e4 <_usart_async_init+0xa8>)
  401884:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40188c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401890:	4620      	mov	r0, r4
  401892:	4b13      	ldr	r3, [pc, #76]	; (4018e0 <_usart_async_init+0xa4>)
  401894:	4798      	blx	r3
  401896:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401898:	2b00      	cmp	r3, #0
  40189a:	db09      	blt.n	4018b0 <_usart_async_init+0x74>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40189c:	095b      	lsrs	r3, r3, #5
  40189e:	f000 001f 	and.w	r0, r0, #31
  4018a2:	2201      	movs	r2, #1
  4018a4:	fa02 f000 	lsl.w	r0, r2, r0
  4018a8:	3360      	adds	r3, #96	; 0x60
  4018aa:	4a0e      	ldr	r2, [pc, #56]	; (4018e4 <_usart_async_init+0xa8>)
  4018ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  4018b0:	4620      	mov	r0, r4
  4018b2:	4b0b      	ldr	r3, [pc, #44]	; (4018e0 <_usart_async_init+0xa4>)
  4018b4:	4798      	blx	r3
  4018b6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  4018b8:	2b00      	cmp	r3, #0
  4018ba:	dbce      	blt.n	40185a <_usart_async_init+0x1e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018bc:	095b      	lsrs	r3, r3, #5
  4018be:	f000 001f 	and.w	r0, r0, #31
  4018c2:	2201      	movs	r2, #1
  4018c4:	fa02 f000 	lsl.w	r0, r2, r0
  4018c8:	4a06      	ldr	r2, [pc, #24]	; (4018e4 <_usart_async_init+0xa8>)
  4018ca:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  4018ce:	e7c4      	b.n	40185a <_usart_async_init+0x1e>
  4018d0:	00402fd0 	.word	0x00402fd0
  4018d4:	00400fc5 	.word	0x00400fc5
  4018d8:	00401705 	.word	0x00401705
  4018dc:	0040166d 	.word	0x0040166d
  4018e0:	0040176d 	.word	0x0040176d
  4018e4:	e000e100 	.word	0xe000e100

004018e8 <_usart_async_enable>:
{
  4018e8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4018ea:	4e0a      	ldr	r6, [pc, #40]	; (401914 <_usart_async_enable+0x2c>)
  4018ec:	4604      	mov	r4, r0
  4018ee:	f240 1213 	movw	r2, #275	; 0x113
  4018f2:	4631      	mov	r1, r6
  4018f4:	3000      	adds	r0, #0
  4018f6:	bf18      	it	ne
  4018f8:	2001      	movne	r0, #1
  4018fa:	4d07      	ldr	r5, [pc, #28]	; (401918 <_usart_async_enable+0x30>)
  4018fc:	47a8      	blx	r5
	_usart_enable(device->hw);
  4018fe:	69a4      	ldr	r4, [r4, #24]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401900:	f44f 723d 	mov.w	r2, #756	; 0x2f4
  401904:	4631      	mov	r1, r6
  401906:	1c20      	adds	r0, r4, #0
  401908:	bf18      	it	ne
  40190a:	2001      	movne	r0, #1
  40190c:	47a8      	blx	r5
  40190e:	2350      	movs	r3, #80	; 0x50
  401910:	6023      	str	r3, [r4, #0]
  401912:	bd70      	pop	{r4, r5, r6, pc}
  401914:	00402fd0 	.word	0x00402fd0
  401918:	00400fc5 	.word	0x00400fc5

0040191c <_usart_async_write_byte>:
{
  40191c:	b538      	push	{r3, r4, r5, lr}
  40191e:	460c      	mov	r4, r1
	ASSERT(device);
  401920:	4605      	mov	r5, r0
  401922:	f240 12b5 	movw	r2, #437	; 0x1b5
  401926:	4904      	ldr	r1, [pc, #16]	; (401938 <_usart_async_write_byte+0x1c>)
  401928:	3000      	adds	r0, #0
  40192a:	bf18      	it	ne
  40192c:	2001      	movne	r0, #1
  40192e:	4b03      	ldr	r3, [pc, #12]	; (40193c <_usart_async_write_byte+0x20>)
  401930:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401932:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401934:	61dc      	str	r4, [r3, #28]
  401936:	bd38      	pop	{r3, r4, r5, pc}
  401938:	00402fd0 	.word	0x00402fd0
  40193c:	00400fc5 	.word	0x00400fc5

00401940 <_usart_async_enable_byte_sent_irq>:
{
  401940:	b510      	push	{r4, lr}
	ASSERT(device);
  401942:	4604      	mov	r4, r0
  401944:	f240 221d 	movw	r2, #541	; 0x21d
  401948:	4904      	ldr	r1, [pc, #16]	; (40195c <_usart_async_enable_byte_sent_irq+0x1c>)
  40194a:	3000      	adds	r0, #0
  40194c:	bf18      	it	ne
  40194e:	2001      	movne	r0, #1
  401950:	4b03      	ldr	r3, [pc, #12]	; (401960 <_usart_async_enable_byte_sent_irq+0x20>)
  401952:	4798      	blx	r3
	hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  401954:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  401956:	2202      	movs	r2, #2
  401958:	609a      	str	r2, [r3, #8]
  40195a:	bd10      	pop	{r4, pc}
  40195c:	00402fd0 	.word	0x00402fd0
  401960:	00400fc5 	.word	0x00400fc5

00401964 <_usart_async_enable_tx_done_irq>:
{
  401964:	b510      	push	{r4, lr}
	ASSERT(device);
  401966:	4604      	mov	r4, r0
  401968:	f240 2226 	movw	r2, #550	; 0x226
  40196c:	4905      	ldr	r1, [pc, #20]	; (401984 <_usart_async_enable_tx_done_irq+0x20>)
  40196e:	3000      	adds	r0, #0
  401970:	bf18      	it	ne
  401972:	2001      	movne	r0, #1
  401974:	4b04      	ldr	r3, [pc, #16]	; (401988 <_usart_async_enable_tx_done_irq+0x24>)
  401976:	4798      	blx	r3
	hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  401978:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  40197a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40197e:	609a      	str	r2, [r3, #8]
  401980:	bd10      	pop	{r4, pc}
  401982:	bf00      	nop
  401984:	00402fd0 	.word	0x00402fd0
  401988:	00400fc5 	.word	0x00400fc5

0040198c <_usart_async_set_irq_state>:
{
  40198c:	b570      	push	{r4, r5, r6, lr}
  40198e:	460c      	mov	r4, r1
  401990:	4616      	mov	r6, r2
	ASSERT(device);
  401992:	4605      	mov	r5, r0
  401994:	f44f 7214 	mov.w	r2, #592	; 0x250
  401998:	491b      	ldr	r1, [pc, #108]	; (401a08 <_usart_async_set_irq_state+0x7c>)
  40199a:	3000      	adds	r0, #0
  40199c:	bf18      	it	ne
  40199e:	2001      	movne	r0, #1
  4019a0:	4b1a      	ldr	r3, [pc, #104]	; (401a0c <_usart_async_set_irq_state+0x80>)
  4019a2:	4798      	blx	r3
	if (state) {
  4019a4:	b1c6      	cbz	r6, 4019d8 <_usart_async_set_irq_state+0x4c>
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  4019a6:	2c02      	cmp	r4, #2
  4019a8:	bf18      	it	ne
  4019aa:	2c00      	cmpne	r4, #0
  4019ac:	d004      	beq.n	4019b8 <_usart_async_set_irq_state+0x2c>
		} else if (USART_ASYNC_RX_DONE == type) {
  4019ae:	2c01      	cmp	r4, #1
  4019b0:	d00a      	beq.n	4019c8 <_usart_async_set_irq_state+0x3c>
		} else if (USART_ASYNC_ERROR == type) {
  4019b2:	2c03      	cmp	r4, #3
  4019b4:	d00c      	beq.n	4019d0 <_usart_async_set_irq_state+0x44>
  4019b6:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  4019b8:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  4019ba:	2202      	movs	r2, #2
  4019bc:	609a      	str	r2, [r3, #8]
			hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  4019be:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  4019c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019c4:	609a      	str	r2, [r3, #8]
  4019c6:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_RXRDY_bit(device->hw);
  4019c8:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_RXRDY;
  4019ca:	2201      	movs	r2, #1
  4019cc:	609a      	str	r2, [r3, #8]
  4019ce:	bd70      	pop	{r4, r5, r6, pc}
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  4019d0:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = mask;
  4019d2:	4a0f      	ldr	r2, [pc, #60]	; (401a10 <_usart_async_set_irq_state+0x84>)
  4019d4:	609a      	str	r2, [r3, #8]
  4019d6:	bd70      	pop	{r4, r5, r6, pc}
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  4019d8:	2c02      	cmp	r4, #2
  4019da:	bf18      	it	ne
  4019dc:	2c00      	cmpne	r4, #0
  4019de:	d007      	beq.n	4019f0 <_usart_async_set_irq_state+0x64>
		} else if (USART_ASYNC_RX_DONE == type) {
  4019e0:	2c01      	cmp	r4, #1
  4019e2:	d00d      	beq.n	401a00 <_usart_async_set_irq_state+0x74>
		} else if (USART_ASYNC_ERROR == type) {
  4019e4:	2c03      	cmp	r4, #3
  4019e6:	d1e6      	bne.n	4019b6 <_usart_async_set_irq_state+0x2a>
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  4019e8:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = mask;
  4019ea:	4a09      	ldr	r2, [pc, #36]	; (401a10 <_usart_async_set_irq_state+0x84>)
  4019ec:	60da      	str	r2, [r3, #12]
}
  4019ee:	e7e2      	b.n	4019b6 <_usart_async_set_irq_state+0x2a>
			hri_usart_clear_US_IMR_TXRDY_bit(device->hw);
  4019f0:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  4019f2:	2202      	movs	r2, #2
  4019f4:	60da      	str	r2, [r3, #12]
			hri_usart_clear_US_IMR_TXEMPTY_bit(device->hw);
  4019f6:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  4019f8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019fc:	60da      	str	r2, [r3, #12]
  4019fe:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_clear_US_IMR_RXRDY_bit(device->hw);
  401a00:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_RXRDY;
  401a02:	2201      	movs	r2, #1
  401a04:	60da      	str	r2, [r3, #12]
  401a06:	bd70      	pop	{r4, r5, r6, pc}
  401a08:	00402fd0 	.word	0x00402fd0
  401a0c:	00400fc5 	.word	0x00400fc5
  401a10:	010000e0 	.word	0x010000e0

00401a14 <_usart_get_usart_async>:
}
  401a14:	2000      	movs	r0, #0
  401a16:	4770      	bx	lr

00401a18 <USART1_Handler>:
{
  401a18:	b508      	push	{r3, lr}
	_usart_interrupt_handler(_usart1_dev);
  401a1a:	4b02      	ldr	r3, [pc, #8]	; (401a24 <USART1_Handler+0xc>)
  401a1c:	6818      	ldr	r0, [r3, #0]
  401a1e:	4b02      	ldr	r3, [pc, #8]	; (401a28 <USART1_Handler+0x10>)
  401a20:	4798      	blx	r3
  401a22:	bd08      	pop	{r3, pc}
  401a24:	20402230 	.word	0x20402230
  401a28:	00401799 	.word	0x00401799

00401a2c <__libc_init_array>:
  401a2c:	b570      	push	{r4, r5, r6, lr}
  401a2e:	4e0d      	ldr	r6, [pc, #52]	; (401a64 <__libc_init_array+0x38>)
  401a30:	4c0d      	ldr	r4, [pc, #52]	; (401a68 <__libc_init_array+0x3c>)
  401a32:	1ba4      	subs	r4, r4, r6
  401a34:	10a4      	asrs	r4, r4, #2
  401a36:	2500      	movs	r5, #0
  401a38:	42a5      	cmp	r5, r4
  401a3a:	d109      	bne.n	401a50 <__libc_init_array+0x24>
  401a3c:	4e0b      	ldr	r6, [pc, #44]	; (401a6c <__libc_init_array+0x40>)
  401a3e:	4c0c      	ldr	r4, [pc, #48]	; (401a70 <__libc_init_array+0x44>)
  401a40:	f001 fbb8 	bl	4031b4 <_init>
  401a44:	1ba4      	subs	r4, r4, r6
  401a46:	10a4      	asrs	r4, r4, #2
  401a48:	2500      	movs	r5, #0
  401a4a:	42a5      	cmp	r5, r4
  401a4c:	d105      	bne.n	401a5a <__libc_init_array+0x2e>
  401a4e:	bd70      	pop	{r4, r5, r6, pc}
  401a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401a54:	4798      	blx	r3
  401a56:	3501      	adds	r5, #1
  401a58:	e7ee      	b.n	401a38 <__libc_init_array+0xc>
  401a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401a5e:	4798      	blx	r3
  401a60:	3501      	adds	r5, #1
  401a62:	e7f2      	b.n	401a4a <__libc_init_array+0x1e>
  401a64:	004031c0 	.word	0x004031c0
  401a68:	004031c0 	.word	0x004031c0
  401a6c:	004031c0 	.word	0x004031c0
  401a70:	004031c4 	.word	0x004031c4

00401a74 <memset>:
  401a74:	4402      	add	r2, r0
  401a76:	4603      	mov	r3, r0
  401a78:	4293      	cmp	r3, r2
  401a7a:	d100      	bne.n	401a7e <memset+0xa>
  401a7c:	4770      	bx	lr
  401a7e:	f803 1b01 	strb.w	r1, [r3], #1
  401a82:	e7f9      	b.n	401a78 <memset+0x4>

00401a84 <siprintf>:
  401a84:	b40e      	push	{r1, r2, r3}
  401a86:	b500      	push	{lr}
  401a88:	b09c      	sub	sp, #112	; 0x70
  401a8a:	f44f 7102 	mov.w	r1, #520	; 0x208
  401a8e:	ab1d      	add	r3, sp, #116	; 0x74
  401a90:	f8ad 1014 	strh.w	r1, [sp, #20]
  401a94:	9002      	str	r0, [sp, #8]
  401a96:	9006      	str	r0, [sp, #24]
  401a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  401a9c:	480a      	ldr	r0, [pc, #40]	; (401ac8 <siprintf+0x44>)
  401a9e:	9104      	str	r1, [sp, #16]
  401aa0:	9107      	str	r1, [sp, #28]
  401aa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401aa6:	f853 2b04 	ldr.w	r2, [r3], #4
  401aaa:	f8ad 1016 	strh.w	r1, [sp, #22]
  401aae:	6800      	ldr	r0, [r0, #0]
  401ab0:	9301      	str	r3, [sp, #4]
  401ab2:	a902      	add	r1, sp, #8
  401ab4:	f000 f8f8 	bl	401ca8 <_svfiprintf_r>
  401ab8:	9b02      	ldr	r3, [sp, #8]
  401aba:	2200      	movs	r2, #0
  401abc:	701a      	strb	r2, [r3, #0]
  401abe:	b01c      	add	sp, #112	; 0x70
  401ac0:	f85d eb04 	ldr.w	lr, [sp], #4
  401ac4:	b003      	add	sp, #12
  401ac6:	4770      	bx	lr
  401ac8:	2040000c 	.word	0x2040000c

00401acc <siscanf>:
  401acc:	b40e      	push	{r1, r2, r3}
  401ace:	b530      	push	{r4, r5, lr}
  401ad0:	b09c      	sub	sp, #112	; 0x70
  401ad2:	ac1f      	add	r4, sp, #124	; 0x7c
  401ad4:	f44f 7201 	mov.w	r2, #516	; 0x204
  401ad8:	f854 5b04 	ldr.w	r5, [r4], #4
  401adc:	f8ad 2014 	strh.w	r2, [sp, #20]
  401ae0:	9002      	str	r0, [sp, #8]
  401ae2:	9006      	str	r0, [sp, #24]
  401ae4:	f000 f81e 	bl	401b24 <strlen>
  401ae8:	4b0b      	ldr	r3, [pc, #44]	; (401b18 <siscanf+0x4c>)
  401aea:	9003      	str	r0, [sp, #12]
  401aec:	9007      	str	r0, [sp, #28]
  401aee:	930b      	str	r3, [sp, #44]	; 0x2c
  401af0:	480a      	ldr	r0, [pc, #40]	; (401b1c <siscanf+0x50>)
  401af2:	9401      	str	r4, [sp, #4]
  401af4:	2300      	movs	r3, #0
  401af6:	930f      	str	r3, [sp, #60]	; 0x3c
  401af8:	9314      	str	r3, [sp, #80]	; 0x50
  401afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401afe:	f8ad 3016 	strh.w	r3, [sp, #22]
  401b02:	462a      	mov	r2, r5
  401b04:	4623      	mov	r3, r4
  401b06:	a902      	add	r1, sp, #8
  401b08:	6800      	ldr	r0, [r0, #0]
  401b0a:	f000 fa1b 	bl	401f44 <__ssvfiscanf_r>
  401b0e:	b01c      	add	sp, #112	; 0x70
  401b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  401b14:	b003      	add	sp, #12
  401b16:	4770      	bx	lr
  401b18:	00401b21 	.word	0x00401b21
  401b1c:	2040000c 	.word	0x2040000c

00401b20 <__seofread>:
  401b20:	2000      	movs	r0, #0
  401b22:	4770      	bx	lr

00401b24 <strlen>:
  401b24:	4603      	mov	r3, r0
  401b26:	f813 2b01 	ldrb.w	r2, [r3], #1
  401b2a:	2a00      	cmp	r2, #0
  401b2c:	d1fb      	bne.n	401b26 <strlen+0x2>
  401b2e:	1a18      	subs	r0, r3, r0
  401b30:	3801      	subs	r0, #1
  401b32:	4770      	bx	lr

00401b34 <_malloc_r>:
  401b34:	b570      	push	{r4, r5, r6, lr}
  401b36:	1ccd      	adds	r5, r1, #3
  401b38:	f025 0503 	bic.w	r5, r5, #3
  401b3c:	3508      	adds	r5, #8
  401b3e:	2d0c      	cmp	r5, #12
  401b40:	bf38      	it	cc
  401b42:	250c      	movcc	r5, #12
  401b44:	2d00      	cmp	r5, #0
  401b46:	4606      	mov	r6, r0
  401b48:	db01      	blt.n	401b4e <_malloc_r+0x1a>
  401b4a:	42a9      	cmp	r1, r5
  401b4c:	d903      	bls.n	401b56 <_malloc_r+0x22>
  401b4e:	230c      	movs	r3, #12
  401b50:	6033      	str	r3, [r6, #0]
  401b52:	2000      	movs	r0, #0
  401b54:	bd70      	pop	{r4, r5, r6, pc}
  401b56:	f001 f870 	bl	402c3a <__malloc_lock>
  401b5a:	4a23      	ldr	r2, [pc, #140]	; (401be8 <_malloc_r+0xb4>)
  401b5c:	6814      	ldr	r4, [r2, #0]
  401b5e:	4621      	mov	r1, r4
  401b60:	b991      	cbnz	r1, 401b88 <_malloc_r+0x54>
  401b62:	4c22      	ldr	r4, [pc, #136]	; (401bec <_malloc_r+0xb8>)
  401b64:	6823      	ldr	r3, [r4, #0]
  401b66:	b91b      	cbnz	r3, 401b70 <_malloc_r+0x3c>
  401b68:	4630      	mov	r0, r6
  401b6a:	f000 fe2d 	bl	4027c8 <_sbrk_r>
  401b6e:	6020      	str	r0, [r4, #0]
  401b70:	4629      	mov	r1, r5
  401b72:	4630      	mov	r0, r6
  401b74:	f000 fe28 	bl	4027c8 <_sbrk_r>
  401b78:	1c43      	adds	r3, r0, #1
  401b7a:	d126      	bne.n	401bca <_malloc_r+0x96>
  401b7c:	230c      	movs	r3, #12
  401b7e:	6033      	str	r3, [r6, #0]
  401b80:	4630      	mov	r0, r6
  401b82:	f001 f85b 	bl	402c3c <__malloc_unlock>
  401b86:	e7e4      	b.n	401b52 <_malloc_r+0x1e>
  401b88:	680b      	ldr	r3, [r1, #0]
  401b8a:	1b5b      	subs	r3, r3, r5
  401b8c:	d41a      	bmi.n	401bc4 <_malloc_r+0x90>
  401b8e:	2b0b      	cmp	r3, #11
  401b90:	d90f      	bls.n	401bb2 <_malloc_r+0x7e>
  401b92:	600b      	str	r3, [r1, #0]
  401b94:	50cd      	str	r5, [r1, r3]
  401b96:	18cc      	adds	r4, r1, r3
  401b98:	4630      	mov	r0, r6
  401b9a:	f001 f84f 	bl	402c3c <__malloc_unlock>
  401b9e:	f104 000b 	add.w	r0, r4, #11
  401ba2:	1d23      	adds	r3, r4, #4
  401ba4:	f020 0007 	bic.w	r0, r0, #7
  401ba8:	1ac3      	subs	r3, r0, r3
  401baa:	d01b      	beq.n	401be4 <_malloc_r+0xb0>
  401bac:	425a      	negs	r2, r3
  401bae:	50e2      	str	r2, [r4, r3]
  401bb0:	bd70      	pop	{r4, r5, r6, pc}
  401bb2:	428c      	cmp	r4, r1
  401bb4:	bf0d      	iteet	eq
  401bb6:	6863      	ldreq	r3, [r4, #4]
  401bb8:	684b      	ldrne	r3, [r1, #4]
  401bba:	6063      	strne	r3, [r4, #4]
  401bbc:	6013      	streq	r3, [r2, #0]
  401bbe:	bf18      	it	ne
  401bc0:	460c      	movne	r4, r1
  401bc2:	e7e9      	b.n	401b98 <_malloc_r+0x64>
  401bc4:	460c      	mov	r4, r1
  401bc6:	6849      	ldr	r1, [r1, #4]
  401bc8:	e7ca      	b.n	401b60 <_malloc_r+0x2c>
  401bca:	1cc4      	adds	r4, r0, #3
  401bcc:	f024 0403 	bic.w	r4, r4, #3
  401bd0:	42a0      	cmp	r0, r4
  401bd2:	d005      	beq.n	401be0 <_malloc_r+0xac>
  401bd4:	1a21      	subs	r1, r4, r0
  401bd6:	4630      	mov	r0, r6
  401bd8:	f000 fdf6 	bl	4027c8 <_sbrk_r>
  401bdc:	3001      	adds	r0, #1
  401bde:	d0cd      	beq.n	401b7c <_malloc_r+0x48>
  401be0:	6025      	str	r5, [r4, #0]
  401be2:	e7d9      	b.n	401b98 <_malloc_r+0x64>
  401be4:	bd70      	pop	{r4, r5, r6, pc}
  401be6:	bf00      	nop
  401be8:	20402234 	.word	0x20402234
  401bec:	20402238 	.word	0x20402238

00401bf0 <__ssputs_r>:
  401bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bf4:	688e      	ldr	r6, [r1, #8]
  401bf6:	429e      	cmp	r6, r3
  401bf8:	4682      	mov	sl, r0
  401bfa:	460c      	mov	r4, r1
  401bfc:	4691      	mov	r9, r2
  401bfe:	4698      	mov	r8, r3
  401c00:	d835      	bhi.n	401c6e <__ssputs_r+0x7e>
  401c02:	898a      	ldrh	r2, [r1, #12]
  401c04:	f412 6f90 	tst.w	r2, #1152	; 0x480
  401c08:	d031      	beq.n	401c6e <__ssputs_r+0x7e>
  401c0a:	6825      	ldr	r5, [r4, #0]
  401c0c:	6909      	ldr	r1, [r1, #16]
  401c0e:	1a6f      	subs	r7, r5, r1
  401c10:	6965      	ldr	r5, [r4, #20]
  401c12:	2302      	movs	r3, #2
  401c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  401c18:	fb95 f5f3 	sdiv	r5, r5, r3
  401c1c:	f108 0301 	add.w	r3, r8, #1
  401c20:	443b      	add	r3, r7
  401c22:	429d      	cmp	r5, r3
  401c24:	bf38      	it	cc
  401c26:	461d      	movcc	r5, r3
  401c28:	0553      	lsls	r3, r2, #21
  401c2a:	d531      	bpl.n	401c90 <__ssputs_r+0xa0>
  401c2c:	4629      	mov	r1, r5
  401c2e:	f7ff ff81 	bl	401b34 <_malloc_r>
  401c32:	4606      	mov	r6, r0
  401c34:	b950      	cbnz	r0, 401c4c <__ssputs_r+0x5c>
  401c36:	230c      	movs	r3, #12
  401c38:	f8ca 3000 	str.w	r3, [sl]
  401c3c:	89a3      	ldrh	r3, [r4, #12]
  401c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401c42:	81a3      	strh	r3, [r4, #12]
  401c44:	f04f 30ff 	mov.w	r0, #4294967295
  401c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c4c:	463a      	mov	r2, r7
  401c4e:	6921      	ldr	r1, [r4, #16]
  401c50:	f000 ffce 	bl	402bf0 <memcpy>
  401c54:	89a3      	ldrh	r3, [r4, #12]
  401c56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  401c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401c5e:	81a3      	strh	r3, [r4, #12]
  401c60:	6126      	str	r6, [r4, #16]
  401c62:	6165      	str	r5, [r4, #20]
  401c64:	443e      	add	r6, r7
  401c66:	1bed      	subs	r5, r5, r7
  401c68:	6026      	str	r6, [r4, #0]
  401c6a:	60a5      	str	r5, [r4, #8]
  401c6c:	4646      	mov	r6, r8
  401c6e:	4546      	cmp	r6, r8
  401c70:	bf28      	it	cs
  401c72:	4646      	movcs	r6, r8
  401c74:	4632      	mov	r2, r6
  401c76:	4649      	mov	r1, r9
  401c78:	6820      	ldr	r0, [r4, #0]
  401c7a:	f000 ffc4 	bl	402c06 <memmove>
  401c7e:	68a3      	ldr	r3, [r4, #8]
  401c80:	1b9b      	subs	r3, r3, r6
  401c82:	60a3      	str	r3, [r4, #8]
  401c84:	6823      	ldr	r3, [r4, #0]
  401c86:	441e      	add	r6, r3
  401c88:	6026      	str	r6, [r4, #0]
  401c8a:	2000      	movs	r0, #0
  401c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c90:	462a      	mov	r2, r5
  401c92:	f001 f823 	bl	402cdc <_realloc_r>
  401c96:	4606      	mov	r6, r0
  401c98:	2800      	cmp	r0, #0
  401c9a:	d1e1      	bne.n	401c60 <__ssputs_r+0x70>
  401c9c:	6921      	ldr	r1, [r4, #16]
  401c9e:	4650      	mov	r0, sl
  401ca0:	f000 ffce 	bl	402c40 <_free_r>
  401ca4:	e7c7      	b.n	401c36 <__ssputs_r+0x46>
	...

00401ca8 <_svfiprintf_r>:
  401ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cac:	b09d      	sub	sp, #116	; 0x74
  401cae:	4680      	mov	r8, r0
  401cb0:	9303      	str	r3, [sp, #12]
  401cb2:	898b      	ldrh	r3, [r1, #12]
  401cb4:	061c      	lsls	r4, r3, #24
  401cb6:	460d      	mov	r5, r1
  401cb8:	4616      	mov	r6, r2
  401cba:	d50f      	bpl.n	401cdc <_svfiprintf_r+0x34>
  401cbc:	690b      	ldr	r3, [r1, #16]
  401cbe:	b96b      	cbnz	r3, 401cdc <_svfiprintf_r+0x34>
  401cc0:	2140      	movs	r1, #64	; 0x40
  401cc2:	f7ff ff37 	bl	401b34 <_malloc_r>
  401cc6:	6028      	str	r0, [r5, #0]
  401cc8:	6128      	str	r0, [r5, #16]
  401cca:	b928      	cbnz	r0, 401cd8 <_svfiprintf_r+0x30>
  401ccc:	230c      	movs	r3, #12
  401cce:	f8c8 3000 	str.w	r3, [r8]
  401cd2:	f04f 30ff 	mov.w	r0, #4294967295
  401cd6:	e0c5      	b.n	401e64 <_svfiprintf_r+0x1bc>
  401cd8:	2340      	movs	r3, #64	; 0x40
  401cda:	616b      	str	r3, [r5, #20]
  401cdc:	2300      	movs	r3, #0
  401cde:	9309      	str	r3, [sp, #36]	; 0x24
  401ce0:	2320      	movs	r3, #32
  401ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  401ce6:	2330      	movs	r3, #48	; 0x30
  401ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  401cec:	f04f 0b01 	mov.w	fp, #1
  401cf0:	4637      	mov	r7, r6
  401cf2:	463c      	mov	r4, r7
  401cf4:	f814 3b01 	ldrb.w	r3, [r4], #1
  401cf8:	2b00      	cmp	r3, #0
  401cfa:	d13c      	bne.n	401d76 <_svfiprintf_r+0xce>
  401cfc:	ebb7 0a06 	subs.w	sl, r7, r6
  401d00:	d00b      	beq.n	401d1a <_svfiprintf_r+0x72>
  401d02:	4653      	mov	r3, sl
  401d04:	4632      	mov	r2, r6
  401d06:	4629      	mov	r1, r5
  401d08:	4640      	mov	r0, r8
  401d0a:	f7ff ff71 	bl	401bf0 <__ssputs_r>
  401d0e:	3001      	adds	r0, #1
  401d10:	f000 80a3 	beq.w	401e5a <_svfiprintf_r+0x1b2>
  401d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d16:	4453      	add	r3, sl
  401d18:	9309      	str	r3, [sp, #36]	; 0x24
  401d1a:	783b      	ldrb	r3, [r7, #0]
  401d1c:	2b00      	cmp	r3, #0
  401d1e:	f000 809c 	beq.w	401e5a <_svfiprintf_r+0x1b2>
  401d22:	2300      	movs	r3, #0
  401d24:	f04f 32ff 	mov.w	r2, #4294967295
  401d28:	9304      	str	r3, [sp, #16]
  401d2a:	9307      	str	r3, [sp, #28]
  401d2c:	9205      	str	r2, [sp, #20]
  401d2e:	9306      	str	r3, [sp, #24]
  401d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  401d34:	931a      	str	r3, [sp, #104]	; 0x68
  401d36:	2205      	movs	r2, #5
  401d38:	7821      	ldrb	r1, [r4, #0]
  401d3a:	4850      	ldr	r0, [pc, #320]	; (401e7c <_svfiprintf_r+0x1d4>)
  401d3c:	f000 ff08 	bl	402b50 <memchr>
  401d40:	1c67      	adds	r7, r4, #1
  401d42:	9b04      	ldr	r3, [sp, #16]
  401d44:	b9d8      	cbnz	r0, 401d7e <_svfiprintf_r+0xd6>
  401d46:	06d9      	lsls	r1, r3, #27
  401d48:	bf44      	itt	mi
  401d4a:	2220      	movmi	r2, #32
  401d4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  401d50:	071a      	lsls	r2, r3, #28
  401d52:	bf44      	itt	mi
  401d54:	222b      	movmi	r2, #43	; 0x2b
  401d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  401d5a:	7822      	ldrb	r2, [r4, #0]
  401d5c:	2a2a      	cmp	r2, #42	; 0x2a
  401d5e:	d016      	beq.n	401d8e <_svfiprintf_r+0xe6>
  401d60:	9a07      	ldr	r2, [sp, #28]
  401d62:	2100      	movs	r1, #0
  401d64:	200a      	movs	r0, #10
  401d66:	4627      	mov	r7, r4
  401d68:	3401      	adds	r4, #1
  401d6a:	783b      	ldrb	r3, [r7, #0]
  401d6c:	3b30      	subs	r3, #48	; 0x30
  401d6e:	2b09      	cmp	r3, #9
  401d70:	d951      	bls.n	401e16 <_svfiprintf_r+0x16e>
  401d72:	b1c9      	cbz	r1, 401da8 <_svfiprintf_r+0x100>
  401d74:	e011      	b.n	401d9a <_svfiprintf_r+0xf2>
  401d76:	2b25      	cmp	r3, #37	; 0x25
  401d78:	d0c0      	beq.n	401cfc <_svfiprintf_r+0x54>
  401d7a:	4627      	mov	r7, r4
  401d7c:	e7b9      	b.n	401cf2 <_svfiprintf_r+0x4a>
  401d7e:	4a3f      	ldr	r2, [pc, #252]	; (401e7c <_svfiprintf_r+0x1d4>)
  401d80:	1a80      	subs	r0, r0, r2
  401d82:	fa0b f000 	lsl.w	r0, fp, r0
  401d86:	4318      	orrs	r0, r3
  401d88:	9004      	str	r0, [sp, #16]
  401d8a:	463c      	mov	r4, r7
  401d8c:	e7d3      	b.n	401d36 <_svfiprintf_r+0x8e>
  401d8e:	9a03      	ldr	r2, [sp, #12]
  401d90:	1d11      	adds	r1, r2, #4
  401d92:	6812      	ldr	r2, [r2, #0]
  401d94:	9103      	str	r1, [sp, #12]
  401d96:	2a00      	cmp	r2, #0
  401d98:	db01      	blt.n	401d9e <_svfiprintf_r+0xf6>
  401d9a:	9207      	str	r2, [sp, #28]
  401d9c:	e004      	b.n	401da8 <_svfiprintf_r+0x100>
  401d9e:	4252      	negs	r2, r2
  401da0:	f043 0302 	orr.w	r3, r3, #2
  401da4:	9207      	str	r2, [sp, #28]
  401da6:	9304      	str	r3, [sp, #16]
  401da8:	783b      	ldrb	r3, [r7, #0]
  401daa:	2b2e      	cmp	r3, #46	; 0x2e
  401dac:	d10e      	bne.n	401dcc <_svfiprintf_r+0x124>
  401dae:	787b      	ldrb	r3, [r7, #1]
  401db0:	2b2a      	cmp	r3, #42	; 0x2a
  401db2:	f107 0101 	add.w	r1, r7, #1
  401db6:	d132      	bne.n	401e1e <_svfiprintf_r+0x176>
  401db8:	9b03      	ldr	r3, [sp, #12]
  401dba:	1d1a      	adds	r2, r3, #4
  401dbc:	681b      	ldr	r3, [r3, #0]
  401dbe:	9203      	str	r2, [sp, #12]
  401dc0:	2b00      	cmp	r3, #0
  401dc2:	bfb8      	it	lt
  401dc4:	f04f 33ff 	movlt.w	r3, #4294967295
  401dc8:	3702      	adds	r7, #2
  401dca:	9305      	str	r3, [sp, #20]
  401dcc:	4c2c      	ldr	r4, [pc, #176]	; (401e80 <_svfiprintf_r+0x1d8>)
  401dce:	7839      	ldrb	r1, [r7, #0]
  401dd0:	2203      	movs	r2, #3
  401dd2:	4620      	mov	r0, r4
  401dd4:	f000 febc 	bl	402b50 <memchr>
  401dd8:	b138      	cbz	r0, 401dea <_svfiprintf_r+0x142>
  401dda:	2340      	movs	r3, #64	; 0x40
  401ddc:	1b00      	subs	r0, r0, r4
  401dde:	fa03 f000 	lsl.w	r0, r3, r0
  401de2:	9b04      	ldr	r3, [sp, #16]
  401de4:	4303      	orrs	r3, r0
  401de6:	9304      	str	r3, [sp, #16]
  401de8:	3701      	adds	r7, #1
  401dea:	7839      	ldrb	r1, [r7, #0]
  401dec:	4825      	ldr	r0, [pc, #148]	; (401e84 <_svfiprintf_r+0x1dc>)
  401dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  401df2:	2206      	movs	r2, #6
  401df4:	1c7e      	adds	r6, r7, #1
  401df6:	f000 feab 	bl	402b50 <memchr>
  401dfa:	2800      	cmp	r0, #0
  401dfc:	d035      	beq.n	401e6a <_svfiprintf_r+0x1c2>
  401dfe:	4b22      	ldr	r3, [pc, #136]	; (401e88 <_svfiprintf_r+0x1e0>)
  401e00:	b9fb      	cbnz	r3, 401e42 <_svfiprintf_r+0x19a>
  401e02:	9b03      	ldr	r3, [sp, #12]
  401e04:	3307      	adds	r3, #7
  401e06:	f023 0307 	bic.w	r3, r3, #7
  401e0a:	3308      	adds	r3, #8
  401e0c:	9303      	str	r3, [sp, #12]
  401e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e10:	444b      	add	r3, r9
  401e12:	9309      	str	r3, [sp, #36]	; 0x24
  401e14:	e76c      	b.n	401cf0 <_svfiprintf_r+0x48>
  401e16:	fb00 3202 	mla	r2, r0, r2, r3
  401e1a:	2101      	movs	r1, #1
  401e1c:	e7a3      	b.n	401d66 <_svfiprintf_r+0xbe>
  401e1e:	2300      	movs	r3, #0
  401e20:	9305      	str	r3, [sp, #20]
  401e22:	4618      	mov	r0, r3
  401e24:	240a      	movs	r4, #10
  401e26:	460f      	mov	r7, r1
  401e28:	3101      	adds	r1, #1
  401e2a:	783a      	ldrb	r2, [r7, #0]
  401e2c:	3a30      	subs	r2, #48	; 0x30
  401e2e:	2a09      	cmp	r2, #9
  401e30:	d903      	bls.n	401e3a <_svfiprintf_r+0x192>
  401e32:	2b00      	cmp	r3, #0
  401e34:	d0ca      	beq.n	401dcc <_svfiprintf_r+0x124>
  401e36:	9005      	str	r0, [sp, #20]
  401e38:	e7c8      	b.n	401dcc <_svfiprintf_r+0x124>
  401e3a:	fb04 2000 	mla	r0, r4, r0, r2
  401e3e:	2301      	movs	r3, #1
  401e40:	e7f1      	b.n	401e26 <_svfiprintf_r+0x17e>
  401e42:	ab03      	add	r3, sp, #12
  401e44:	9300      	str	r3, [sp, #0]
  401e46:	462a      	mov	r2, r5
  401e48:	4b10      	ldr	r3, [pc, #64]	; (401e8c <_svfiprintf_r+0x1e4>)
  401e4a:	a904      	add	r1, sp, #16
  401e4c:	4640      	mov	r0, r8
  401e4e:	f3af 8000 	nop.w
  401e52:	f1b0 3fff 	cmp.w	r0, #4294967295
  401e56:	4681      	mov	r9, r0
  401e58:	d1d9      	bne.n	401e0e <_svfiprintf_r+0x166>
  401e5a:	89ab      	ldrh	r3, [r5, #12]
  401e5c:	065b      	lsls	r3, r3, #25
  401e5e:	f53f af38 	bmi.w	401cd2 <_svfiprintf_r+0x2a>
  401e62:	9809      	ldr	r0, [sp, #36]	; 0x24
  401e64:	b01d      	add	sp, #116	; 0x74
  401e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e6a:	ab03      	add	r3, sp, #12
  401e6c:	9300      	str	r3, [sp, #0]
  401e6e:	462a      	mov	r2, r5
  401e70:	4b06      	ldr	r3, [pc, #24]	; (401e8c <_svfiprintf_r+0x1e4>)
  401e72:	a904      	add	r1, sp, #16
  401e74:	4640      	mov	r0, r8
  401e76:	f000 fa2f 	bl	4022d8 <_printf_i>
  401e7a:	e7ea      	b.n	401e52 <_svfiprintf_r+0x1aa>
  401e7c:	0040304c 	.word	0x0040304c
  401e80:	00403052 	.word	0x00403052
  401e84:	00403056 	.word	0x00403056
  401e88:	00000000 	.word	0x00000000
  401e8c:	00401bf1 	.word	0x00401bf1

00401e90 <_sungetc_r>:
  401e90:	b538      	push	{r3, r4, r5, lr}
  401e92:	1c4b      	adds	r3, r1, #1
  401e94:	4614      	mov	r4, r2
  401e96:	d103      	bne.n	401ea0 <_sungetc_r+0x10>
  401e98:	f04f 35ff 	mov.w	r5, #4294967295
  401e9c:	4628      	mov	r0, r5
  401e9e:	bd38      	pop	{r3, r4, r5, pc}
  401ea0:	8993      	ldrh	r3, [r2, #12]
  401ea2:	f023 0320 	bic.w	r3, r3, #32
  401ea6:	8193      	strh	r3, [r2, #12]
  401ea8:	6b53      	ldr	r3, [r2, #52]	; 0x34
  401eaa:	6852      	ldr	r2, [r2, #4]
  401eac:	b2cd      	uxtb	r5, r1
  401eae:	b18b      	cbz	r3, 401ed4 <_sungetc_r+0x44>
  401eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401eb2:	429a      	cmp	r2, r3
  401eb4:	da08      	bge.n	401ec8 <_sungetc_r+0x38>
  401eb6:	6823      	ldr	r3, [r4, #0]
  401eb8:	1e5a      	subs	r2, r3, #1
  401eba:	6022      	str	r2, [r4, #0]
  401ebc:	f803 5c01 	strb.w	r5, [r3, #-1]
  401ec0:	6863      	ldr	r3, [r4, #4]
  401ec2:	3301      	adds	r3, #1
  401ec4:	6063      	str	r3, [r4, #4]
  401ec6:	e7e9      	b.n	401e9c <_sungetc_r+0xc>
  401ec8:	4621      	mov	r1, r4
  401eca:	f000 fddf 	bl	402a8c <__submore>
  401ece:	2800      	cmp	r0, #0
  401ed0:	d0f1      	beq.n	401eb6 <_sungetc_r+0x26>
  401ed2:	e7e1      	b.n	401e98 <_sungetc_r+0x8>
  401ed4:	6921      	ldr	r1, [r4, #16]
  401ed6:	6823      	ldr	r3, [r4, #0]
  401ed8:	b151      	cbz	r1, 401ef0 <_sungetc_r+0x60>
  401eda:	4299      	cmp	r1, r3
  401edc:	d208      	bcs.n	401ef0 <_sungetc_r+0x60>
  401ede:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401ee2:	428d      	cmp	r5, r1
  401ee4:	d104      	bne.n	401ef0 <_sungetc_r+0x60>
  401ee6:	3b01      	subs	r3, #1
  401ee8:	3201      	adds	r2, #1
  401eea:	6023      	str	r3, [r4, #0]
  401eec:	6062      	str	r2, [r4, #4]
  401eee:	e7d5      	b.n	401e9c <_sungetc_r+0xc>
  401ef0:	63e3      	str	r3, [r4, #60]	; 0x3c
  401ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401ef6:	6363      	str	r3, [r4, #52]	; 0x34
  401ef8:	2303      	movs	r3, #3
  401efa:	63a3      	str	r3, [r4, #56]	; 0x38
  401efc:	4623      	mov	r3, r4
  401efe:	6422      	str	r2, [r4, #64]	; 0x40
  401f00:	f803 5f46 	strb.w	r5, [r3, #70]!
  401f04:	6023      	str	r3, [r4, #0]
  401f06:	2301      	movs	r3, #1
  401f08:	e7dc      	b.n	401ec4 <_sungetc_r+0x34>

00401f0a <__ssrefill_r>:
  401f0a:	b510      	push	{r4, lr}
  401f0c:	460c      	mov	r4, r1
  401f0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  401f10:	b169      	cbz	r1, 401f2e <__ssrefill_r+0x24>
  401f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401f16:	4299      	cmp	r1, r3
  401f18:	d001      	beq.n	401f1e <__ssrefill_r+0x14>
  401f1a:	f000 fe91 	bl	402c40 <_free_r>
  401f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401f20:	6063      	str	r3, [r4, #4]
  401f22:	2000      	movs	r0, #0
  401f24:	6360      	str	r0, [r4, #52]	; 0x34
  401f26:	b113      	cbz	r3, 401f2e <__ssrefill_r+0x24>
  401f28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f2a:	6023      	str	r3, [r4, #0]
  401f2c:	bd10      	pop	{r4, pc}
  401f2e:	6923      	ldr	r3, [r4, #16]
  401f30:	6023      	str	r3, [r4, #0]
  401f32:	2300      	movs	r3, #0
  401f34:	6063      	str	r3, [r4, #4]
  401f36:	89a3      	ldrh	r3, [r4, #12]
  401f38:	f043 0320 	orr.w	r3, r3, #32
  401f3c:	81a3      	strh	r3, [r4, #12]
  401f3e:	f04f 30ff 	mov.w	r0, #4294967295
  401f42:	bd10      	pop	{r4, pc}

00401f44 <__ssvfiscanf_r>:
  401f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f48:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
  401f4c:	f10d 080c 	add.w	r8, sp, #12
  401f50:	9301      	str	r3, [sp, #4]
  401f52:	2300      	movs	r3, #0
  401f54:	9346      	str	r3, [sp, #280]	; 0x118
  401f56:	9347      	str	r3, [sp, #284]	; 0x11c
  401f58:	4ba0      	ldr	r3, [pc, #640]	; (4021dc <__ssvfiscanf_r+0x298>)
  401f5a:	93a2      	str	r3, [sp, #648]	; 0x288
  401f5c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4021e4 <__ssvfiscanf_r+0x2a0>
  401f60:	4b9f      	ldr	r3, [pc, #636]	; (4021e0 <__ssvfiscanf_r+0x29c>)
  401f62:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
  401f66:	4606      	mov	r6, r0
  401f68:	460c      	mov	r4, r1
  401f6a:	93a3      	str	r3, [sp, #652]	; 0x28c
  401f6c:	4692      	mov	sl, r2
  401f6e:	270a      	movs	r7, #10
  401f70:	f89a 3000 	ldrb.w	r3, [sl]
  401f74:	2b00      	cmp	r3, #0
  401f76:	f000 812f 	beq.w	4021d8 <__ssvfiscanf_r+0x294>
  401f7a:	f000 fdc5 	bl	402b08 <__locale_ctype_ptr>
  401f7e:	f89a b000 	ldrb.w	fp, [sl]
  401f82:	4458      	add	r0, fp
  401f84:	7843      	ldrb	r3, [r0, #1]
  401f86:	f013 0308 	ands.w	r3, r3, #8
  401f8a:	d143      	bne.n	402014 <__ssvfiscanf_r+0xd0>
  401f8c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
  401f90:	f10a 0501 	add.w	r5, sl, #1
  401f94:	f040 8099 	bne.w	4020ca <__ssvfiscanf_r+0x186>
  401f98:	9345      	str	r3, [sp, #276]	; 0x114
  401f9a:	9343      	str	r3, [sp, #268]	; 0x10c
  401f9c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  401fa0:	2b2a      	cmp	r3, #42	; 0x2a
  401fa2:	d103      	bne.n	401fac <__ssvfiscanf_r+0x68>
  401fa4:	2310      	movs	r3, #16
  401fa6:	9343      	str	r3, [sp, #268]	; 0x10c
  401fa8:	f10a 0502 	add.w	r5, sl, #2
  401fac:	7829      	ldrb	r1, [r5, #0]
  401fae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
  401fb2:	2a09      	cmp	r2, #9
  401fb4:	46aa      	mov	sl, r5
  401fb6:	f105 0501 	add.w	r5, r5, #1
  401fba:	d941      	bls.n	402040 <__ssvfiscanf_r+0xfc>
  401fbc:	2203      	movs	r2, #3
  401fbe:	4889      	ldr	r0, [pc, #548]	; (4021e4 <__ssvfiscanf_r+0x2a0>)
  401fc0:	f000 fdc6 	bl	402b50 <memchr>
  401fc4:	b138      	cbz	r0, 401fd6 <__ssvfiscanf_r+0x92>
  401fc6:	eba0 0309 	sub.w	r3, r0, r9
  401fca:	2001      	movs	r0, #1
  401fcc:	4098      	lsls	r0, r3
  401fce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
  401fd0:	4318      	orrs	r0, r3
  401fd2:	9043      	str	r0, [sp, #268]	; 0x10c
  401fd4:	46aa      	mov	sl, r5
  401fd6:	f89a 3000 	ldrb.w	r3, [sl]
  401fda:	2b67      	cmp	r3, #103	; 0x67
  401fdc:	f10a 0501 	add.w	r5, sl, #1
  401fe0:	d84a      	bhi.n	402078 <__ssvfiscanf_r+0x134>
  401fe2:	2b65      	cmp	r3, #101	; 0x65
  401fe4:	f080 80b7 	bcs.w	402156 <__ssvfiscanf_r+0x212>
  401fe8:	2b47      	cmp	r3, #71	; 0x47
  401fea:	d82f      	bhi.n	40204c <__ssvfiscanf_r+0x108>
  401fec:	2b45      	cmp	r3, #69	; 0x45
  401fee:	f080 80b2 	bcs.w	402156 <__ssvfiscanf_r+0x212>
  401ff2:	2b00      	cmp	r3, #0
  401ff4:	f000 8082 	beq.w	4020fc <__ssvfiscanf_r+0x1b8>
  401ff8:	2b25      	cmp	r3, #37	; 0x25
  401ffa:	d066      	beq.n	4020ca <__ssvfiscanf_r+0x186>
  401ffc:	2303      	movs	r3, #3
  401ffe:	9349      	str	r3, [sp, #292]	; 0x124
  402000:	9744      	str	r7, [sp, #272]	; 0x110
  402002:	e045      	b.n	402090 <__ssvfiscanf_r+0x14c>
  402004:	9947      	ldr	r1, [sp, #284]	; 0x11c
  402006:	3101      	adds	r1, #1
  402008:	9147      	str	r1, [sp, #284]	; 0x11c
  40200a:	6861      	ldr	r1, [r4, #4]
  40200c:	3301      	adds	r3, #1
  40200e:	3901      	subs	r1, #1
  402010:	6061      	str	r1, [r4, #4]
  402012:	6023      	str	r3, [r4, #0]
  402014:	6863      	ldr	r3, [r4, #4]
  402016:	2b00      	cmp	r3, #0
  402018:	dd0b      	ble.n	402032 <__ssvfiscanf_r+0xee>
  40201a:	f000 fd75 	bl	402b08 <__locale_ctype_ptr>
  40201e:	6823      	ldr	r3, [r4, #0]
  402020:	7819      	ldrb	r1, [r3, #0]
  402022:	4408      	add	r0, r1
  402024:	7841      	ldrb	r1, [r0, #1]
  402026:	070d      	lsls	r5, r1, #28
  402028:	d4ec      	bmi.n	402004 <__ssvfiscanf_r+0xc0>
  40202a:	f10a 0501 	add.w	r5, sl, #1
  40202e:	46aa      	mov	sl, r5
  402030:	e79e      	b.n	401f70 <__ssvfiscanf_r+0x2c>
  402032:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
  402034:	4621      	mov	r1, r4
  402036:	4630      	mov	r0, r6
  402038:	4798      	blx	r3
  40203a:	2800      	cmp	r0, #0
  40203c:	d0ed      	beq.n	40201a <__ssvfiscanf_r+0xd6>
  40203e:	e7f4      	b.n	40202a <__ssvfiscanf_r+0xe6>
  402040:	9b45      	ldr	r3, [sp, #276]	; 0x114
  402042:	fb07 1303 	mla	r3, r7, r3, r1
  402046:	3b30      	subs	r3, #48	; 0x30
  402048:	9345      	str	r3, [sp, #276]	; 0x114
  40204a:	e7af      	b.n	401fac <__ssvfiscanf_r+0x68>
  40204c:	2b5b      	cmp	r3, #91	; 0x5b
  40204e:	d061      	beq.n	402114 <__ssvfiscanf_r+0x1d0>
  402050:	d80c      	bhi.n	40206c <__ssvfiscanf_r+0x128>
  402052:	2b58      	cmp	r3, #88	; 0x58
  402054:	d1d2      	bne.n	401ffc <__ssvfiscanf_r+0xb8>
  402056:	9a43      	ldr	r2, [sp, #268]	; 0x10c
  402058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  40205c:	9243      	str	r2, [sp, #268]	; 0x10c
  40205e:	2210      	movs	r2, #16
  402060:	9244      	str	r2, [sp, #272]	; 0x110
  402062:	2b6f      	cmp	r3, #111	; 0x6f
  402064:	bfb4      	ite	lt
  402066:	2303      	movlt	r3, #3
  402068:	2304      	movge	r3, #4
  40206a:	e010      	b.n	40208e <__ssvfiscanf_r+0x14a>
  40206c:	2b63      	cmp	r3, #99	; 0x63
  40206e:	d05c      	beq.n	40212a <__ssvfiscanf_r+0x1e6>
  402070:	2b64      	cmp	r3, #100	; 0x64
  402072:	d1c3      	bne.n	401ffc <__ssvfiscanf_r+0xb8>
  402074:	9744      	str	r7, [sp, #272]	; 0x110
  402076:	e7f4      	b.n	402062 <__ssvfiscanf_r+0x11e>
  402078:	2b70      	cmp	r3, #112	; 0x70
  40207a:	d042      	beq.n	402102 <__ssvfiscanf_r+0x1be>
  40207c:	d81d      	bhi.n	4020ba <__ssvfiscanf_r+0x176>
  40207e:	2b6e      	cmp	r3, #110	; 0x6e
  402080:	d059      	beq.n	402136 <__ssvfiscanf_r+0x1f2>
  402082:	d843      	bhi.n	40210c <__ssvfiscanf_r+0x1c8>
  402084:	2b69      	cmp	r3, #105	; 0x69
  402086:	d1b9      	bne.n	401ffc <__ssvfiscanf_r+0xb8>
  402088:	2300      	movs	r3, #0
  40208a:	9344      	str	r3, [sp, #272]	; 0x110
  40208c:	2303      	movs	r3, #3
  40208e:	9349      	str	r3, [sp, #292]	; 0x124
  402090:	6863      	ldr	r3, [r4, #4]
  402092:	2b00      	cmp	r3, #0
  402094:	dd61      	ble.n	40215a <__ssvfiscanf_r+0x216>
  402096:	9b43      	ldr	r3, [sp, #268]	; 0x10c
  402098:	0659      	lsls	r1, r3, #25
  40209a:	d56f      	bpl.n	40217c <__ssvfiscanf_r+0x238>
  40209c:	9b49      	ldr	r3, [sp, #292]	; 0x124
  40209e:	2b02      	cmp	r3, #2
  4020a0:	dc7c      	bgt.n	40219c <__ssvfiscanf_r+0x258>
  4020a2:	ab01      	add	r3, sp, #4
  4020a4:	4622      	mov	r2, r4
  4020a6:	a943      	add	r1, sp, #268	; 0x10c
  4020a8:	4630      	mov	r0, r6
  4020aa:	f000 fa35 	bl	402518 <_scanf_chars>
  4020ae:	2801      	cmp	r0, #1
  4020b0:	f000 8092 	beq.w	4021d8 <__ssvfiscanf_r+0x294>
  4020b4:	2802      	cmp	r0, #2
  4020b6:	d1ba      	bne.n	40202e <__ssvfiscanf_r+0xea>
  4020b8:	e01d      	b.n	4020f6 <__ssvfiscanf_r+0x1b2>
  4020ba:	2b75      	cmp	r3, #117	; 0x75
  4020bc:	d0da      	beq.n	402074 <__ssvfiscanf_r+0x130>
  4020be:	2b78      	cmp	r3, #120	; 0x78
  4020c0:	d0c9      	beq.n	402056 <__ssvfiscanf_r+0x112>
  4020c2:	2b73      	cmp	r3, #115	; 0x73
  4020c4:	d19a      	bne.n	401ffc <__ssvfiscanf_r+0xb8>
  4020c6:	2302      	movs	r3, #2
  4020c8:	e7e1      	b.n	40208e <__ssvfiscanf_r+0x14a>
  4020ca:	6863      	ldr	r3, [r4, #4]
  4020cc:	2b00      	cmp	r3, #0
  4020ce:	dd0c      	ble.n	4020ea <__ssvfiscanf_r+0x1a6>
  4020d0:	6823      	ldr	r3, [r4, #0]
  4020d2:	781a      	ldrb	r2, [r3, #0]
  4020d4:	4593      	cmp	fp, r2
  4020d6:	d17f      	bne.n	4021d8 <__ssvfiscanf_r+0x294>
  4020d8:	3301      	adds	r3, #1
  4020da:	6862      	ldr	r2, [r4, #4]
  4020dc:	6023      	str	r3, [r4, #0]
  4020de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
  4020e0:	3a01      	subs	r2, #1
  4020e2:	3301      	adds	r3, #1
  4020e4:	6062      	str	r2, [r4, #4]
  4020e6:	9347      	str	r3, [sp, #284]	; 0x11c
  4020e8:	e7a1      	b.n	40202e <__ssvfiscanf_r+0xea>
  4020ea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
  4020ec:	4621      	mov	r1, r4
  4020ee:	4630      	mov	r0, r6
  4020f0:	4798      	blx	r3
  4020f2:	2800      	cmp	r0, #0
  4020f4:	d0ec      	beq.n	4020d0 <__ssvfiscanf_r+0x18c>
  4020f6:	9846      	ldr	r0, [sp, #280]	; 0x118
  4020f8:	2800      	cmp	r0, #0
  4020fa:	d163      	bne.n	4021c4 <__ssvfiscanf_r+0x280>
  4020fc:	f04f 30ff 	mov.w	r0, #4294967295
  402100:	e066      	b.n	4021d0 <__ssvfiscanf_r+0x28c>
  402102:	9a43      	ldr	r2, [sp, #268]	; 0x10c
  402104:	f042 0220 	orr.w	r2, r2, #32
  402108:	9243      	str	r2, [sp, #268]	; 0x10c
  40210a:	e7a4      	b.n	402056 <__ssvfiscanf_r+0x112>
  40210c:	2308      	movs	r3, #8
  40210e:	9344      	str	r3, [sp, #272]	; 0x110
  402110:	2304      	movs	r3, #4
  402112:	e7bc      	b.n	40208e <__ssvfiscanf_r+0x14a>
  402114:	4629      	mov	r1, r5
  402116:	4640      	mov	r0, r8
  402118:	f000 fb66 	bl	4027e8 <__sccl>
  40211c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
  40211e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402122:	9343      	str	r3, [sp, #268]	; 0x10c
  402124:	4605      	mov	r5, r0
  402126:	2301      	movs	r3, #1
  402128:	e7b1      	b.n	40208e <__ssvfiscanf_r+0x14a>
  40212a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
  40212c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402130:	9343      	str	r3, [sp, #268]	; 0x10c
  402132:	2300      	movs	r3, #0
  402134:	e7ab      	b.n	40208e <__ssvfiscanf_r+0x14a>
  402136:	9a43      	ldr	r2, [sp, #268]	; 0x10c
  402138:	06d0      	lsls	r0, r2, #27
  40213a:	f53f af78 	bmi.w	40202e <__ssvfiscanf_r+0xea>
  40213e:	f012 0f01 	tst.w	r2, #1
  402142:	9a01      	ldr	r2, [sp, #4]
  402144:	9b47      	ldr	r3, [sp, #284]	; 0x11c
  402146:	f102 0104 	add.w	r1, r2, #4
  40214a:	9101      	str	r1, [sp, #4]
  40214c:	6812      	ldr	r2, [r2, #0]
  40214e:	bf14      	ite	ne
  402150:	8013      	strhne	r3, [r2, #0]
  402152:	6013      	streq	r3, [r2, #0]
  402154:	e76b      	b.n	40202e <__ssvfiscanf_r+0xea>
  402156:	2305      	movs	r3, #5
  402158:	e799      	b.n	40208e <__ssvfiscanf_r+0x14a>
  40215a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
  40215c:	4621      	mov	r1, r4
  40215e:	4630      	mov	r0, r6
  402160:	4798      	blx	r3
  402162:	2800      	cmp	r0, #0
  402164:	d097      	beq.n	402096 <__ssvfiscanf_r+0x152>
  402166:	e7c6      	b.n	4020f6 <__ssvfiscanf_r+0x1b2>
  402168:	9a47      	ldr	r2, [sp, #284]	; 0x11c
  40216a:	3201      	adds	r2, #1
  40216c:	9247      	str	r2, [sp, #284]	; 0x11c
  40216e:	6862      	ldr	r2, [r4, #4]
  402170:	3a01      	subs	r2, #1
  402172:	2a00      	cmp	r2, #0
  402174:	6062      	str	r2, [r4, #4]
  402176:	dd0a      	ble.n	40218e <__ssvfiscanf_r+0x24a>
  402178:	3301      	adds	r3, #1
  40217a:	6023      	str	r3, [r4, #0]
  40217c:	f000 fcc4 	bl	402b08 <__locale_ctype_ptr>
  402180:	6823      	ldr	r3, [r4, #0]
  402182:	781a      	ldrb	r2, [r3, #0]
  402184:	4410      	add	r0, r2
  402186:	7842      	ldrb	r2, [r0, #1]
  402188:	0712      	lsls	r2, r2, #28
  40218a:	d4ed      	bmi.n	402168 <__ssvfiscanf_r+0x224>
  40218c:	e786      	b.n	40209c <__ssvfiscanf_r+0x158>
  40218e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
  402190:	4621      	mov	r1, r4
  402192:	4630      	mov	r0, r6
  402194:	4798      	blx	r3
  402196:	2800      	cmp	r0, #0
  402198:	d0f0      	beq.n	40217c <__ssvfiscanf_r+0x238>
  40219a:	e7ac      	b.n	4020f6 <__ssvfiscanf_r+0x1b2>
  40219c:	2b04      	cmp	r3, #4
  40219e:	dc06      	bgt.n	4021ae <__ssvfiscanf_r+0x26a>
  4021a0:	ab01      	add	r3, sp, #4
  4021a2:	4622      	mov	r2, r4
  4021a4:	a943      	add	r1, sp, #268	; 0x10c
  4021a6:	4630      	mov	r0, r6
  4021a8:	f000 fa1a 	bl	4025e0 <_scanf_i>
  4021ac:	e77f      	b.n	4020ae <__ssvfiscanf_r+0x16a>
  4021ae:	4b0e      	ldr	r3, [pc, #56]	; (4021e8 <__ssvfiscanf_r+0x2a4>)
  4021b0:	2b00      	cmp	r3, #0
  4021b2:	f43f af3c 	beq.w	40202e <__ssvfiscanf_r+0xea>
  4021b6:	ab01      	add	r3, sp, #4
  4021b8:	4622      	mov	r2, r4
  4021ba:	a943      	add	r1, sp, #268	; 0x10c
  4021bc:	4630      	mov	r0, r6
  4021be:	f3af 8000 	nop.w
  4021c2:	e774      	b.n	4020ae <__ssvfiscanf_r+0x16a>
  4021c4:	89a3      	ldrh	r3, [r4, #12]
  4021c6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4021ca:	bf18      	it	ne
  4021cc:	f04f 30ff 	movne.w	r0, #4294967295
  4021d0:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
  4021d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021d8:	9846      	ldr	r0, [sp, #280]	; 0x118
  4021da:	e7f9      	b.n	4021d0 <__ssvfiscanf_r+0x28c>
  4021dc:	00401e91 	.word	0x00401e91
  4021e0:	00401f0b 	.word	0x00401f0b
  4021e4:	00403052 	.word	0x00403052
  4021e8:	00000000 	.word	0x00000000

004021ec <_printf_common>:
  4021ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4021f0:	4691      	mov	r9, r2
  4021f2:	461f      	mov	r7, r3
  4021f4:	688a      	ldr	r2, [r1, #8]
  4021f6:	690b      	ldr	r3, [r1, #16]
  4021f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4021fc:	4293      	cmp	r3, r2
  4021fe:	bfb8      	it	lt
  402200:	4613      	movlt	r3, r2
  402202:	f8c9 3000 	str.w	r3, [r9]
  402206:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  40220a:	4606      	mov	r6, r0
  40220c:	460c      	mov	r4, r1
  40220e:	b112      	cbz	r2, 402216 <_printf_common+0x2a>
  402210:	3301      	adds	r3, #1
  402212:	f8c9 3000 	str.w	r3, [r9]
  402216:	6823      	ldr	r3, [r4, #0]
  402218:	0699      	lsls	r1, r3, #26
  40221a:	bf42      	ittt	mi
  40221c:	f8d9 3000 	ldrmi.w	r3, [r9]
  402220:	3302      	addmi	r3, #2
  402222:	f8c9 3000 	strmi.w	r3, [r9]
  402226:	6825      	ldr	r5, [r4, #0]
  402228:	f015 0506 	ands.w	r5, r5, #6
  40222c:	d107      	bne.n	40223e <_printf_common+0x52>
  40222e:	f104 0a19 	add.w	sl, r4, #25
  402232:	68e3      	ldr	r3, [r4, #12]
  402234:	f8d9 2000 	ldr.w	r2, [r9]
  402238:	1a9b      	subs	r3, r3, r2
  40223a:	429d      	cmp	r5, r3
  40223c:	db29      	blt.n	402292 <_printf_common+0xa6>
  40223e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402242:	6822      	ldr	r2, [r4, #0]
  402244:	3300      	adds	r3, #0
  402246:	bf18      	it	ne
  402248:	2301      	movne	r3, #1
  40224a:	0692      	lsls	r2, r2, #26
  40224c:	d42e      	bmi.n	4022ac <_printf_common+0xc0>
  40224e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402252:	4639      	mov	r1, r7
  402254:	4630      	mov	r0, r6
  402256:	47c0      	blx	r8
  402258:	3001      	adds	r0, #1
  40225a:	d021      	beq.n	4022a0 <_printf_common+0xb4>
  40225c:	6823      	ldr	r3, [r4, #0]
  40225e:	68e5      	ldr	r5, [r4, #12]
  402260:	f8d9 2000 	ldr.w	r2, [r9]
  402264:	f003 0306 	and.w	r3, r3, #6
  402268:	2b04      	cmp	r3, #4
  40226a:	bf08      	it	eq
  40226c:	1aad      	subeq	r5, r5, r2
  40226e:	68a3      	ldr	r3, [r4, #8]
  402270:	6922      	ldr	r2, [r4, #16]
  402272:	bf0c      	ite	eq
  402274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402278:	2500      	movne	r5, #0
  40227a:	4293      	cmp	r3, r2
  40227c:	bfc4      	itt	gt
  40227e:	1a9b      	subgt	r3, r3, r2
  402280:	18ed      	addgt	r5, r5, r3
  402282:	f04f 0900 	mov.w	r9, #0
  402286:	341a      	adds	r4, #26
  402288:	454d      	cmp	r5, r9
  40228a:	d11b      	bne.n	4022c4 <_printf_common+0xd8>
  40228c:	2000      	movs	r0, #0
  40228e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402292:	2301      	movs	r3, #1
  402294:	4652      	mov	r2, sl
  402296:	4639      	mov	r1, r7
  402298:	4630      	mov	r0, r6
  40229a:	47c0      	blx	r8
  40229c:	3001      	adds	r0, #1
  40229e:	d103      	bne.n	4022a8 <_printf_common+0xbc>
  4022a0:	f04f 30ff 	mov.w	r0, #4294967295
  4022a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022a8:	3501      	adds	r5, #1
  4022aa:	e7c2      	b.n	402232 <_printf_common+0x46>
  4022ac:	18e1      	adds	r1, r4, r3
  4022ae:	1c5a      	adds	r2, r3, #1
  4022b0:	2030      	movs	r0, #48	; 0x30
  4022b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4022b6:	4422      	add	r2, r4
  4022b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4022bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4022c0:	3302      	adds	r3, #2
  4022c2:	e7c4      	b.n	40224e <_printf_common+0x62>
  4022c4:	2301      	movs	r3, #1
  4022c6:	4622      	mov	r2, r4
  4022c8:	4639      	mov	r1, r7
  4022ca:	4630      	mov	r0, r6
  4022cc:	47c0      	blx	r8
  4022ce:	3001      	adds	r0, #1
  4022d0:	d0e6      	beq.n	4022a0 <_printf_common+0xb4>
  4022d2:	f109 0901 	add.w	r9, r9, #1
  4022d6:	e7d7      	b.n	402288 <_printf_common+0x9c>

004022d8 <_printf_i>:
  4022d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4022dc:	4617      	mov	r7, r2
  4022de:	7e0a      	ldrb	r2, [r1, #24]
  4022e0:	b085      	sub	sp, #20
  4022e2:	2a6e      	cmp	r2, #110	; 0x6e
  4022e4:	4698      	mov	r8, r3
  4022e6:	4606      	mov	r6, r0
  4022e8:	460c      	mov	r4, r1
  4022ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4022ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4022f0:	f000 80bc 	beq.w	40246c <_printf_i+0x194>
  4022f4:	d81a      	bhi.n	40232c <_printf_i+0x54>
  4022f6:	2a63      	cmp	r2, #99	; 0x63
  4022f8:	d02e      	beq.n	402358 <_printf_i+0x80>
  4022fa:	d80a      	bhi.n	402312 <_printf_i+0x3a>
  4022fc:	2a00      	cmp	r2, #0
  4022fe:	f000 80c8 	beq.w	402492 <_printf_i+0x1ba>
  402302:	2a58      	cmp	r2, #88	; 0x58
  402304:	f000 808a 	beq.w	40241c <_printf_i+0x144>
  402308:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40230c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402310:	e02a      	b.n	402368 <_printf_i+0x90>
  402312:	2a64      	cmp	r2, #100	; 0x64
  402314:	d001      	beq.n	40231a <_printf_i+0x42>
  402316:	2a69      	cmp	r2, #105	; 0x69
  402318:	d1f6      	bne.n	402308 <_printf_i+0x30>
  40231a:	6821      	ldr	r1, [r4, #0]
  40231c:	681a      	ldr	r2, [r3, #0]
  40231e:	f011 0f80 	tst.w	r1, #128	; 0x80
  402322:	d023      	beq.n	40236c <_printf_i+0x94>
  402324:	1d11      	adds	r1, r2, #4
  402326:	6019      	str	r1, [r3, #0]
  402328:	6813      	ldr	r3, [r2, #0]
  40232a:	e027      	b.n	40237c <_printf_i+0xa4>
  40232c:	2a73      	cmp	r2, #115	; 0x73
  40232e:	f000 80b4 	beq.w	40249a <_printf_i+0x1c2>
  402332:	d808      	bhi.n	402346 <_printf_i+0x6e>
  402334:	2a6f      	cmp	r2, #111	; 0x6f
  402336:	d02a      	beq.n	40238e <_printf_i+0xb6>
  402338:	2a70      	cmp	r2, #112	; 0x70
  40233a:	d1e5      	bne.n	402308 <_printf_i+0x30>
  40233c:	680a      	ldr	r2, [r1, #0]
  40233e:	f042 0220 	orr.w	r2, r2, #32
  402342:	600a      	str	r2, [r1, #0]
  402344:	e003      	b.n	40234e <_printf_i+0x76>
  402346:	2a75      	cmp	r2, #117	; 0x75
  402348:	d021      	beq.n	40238e <_printf_i+0xb6>
  40234a:	2a78      	cmp	r2, #120	; 0x78
  40234c:	d1dc      	bne.n	402308 <_printf_i+0x30>
  40234e:	2278      	movs	r2, #120	; 0x78
  402350:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402354:	496e      	ldr	r1, [pc, #440]	; (402510 <_printf_i+0x238>)
  402356:	e064      	b.n	402422 <_printf_i+0x14a>
  402358:	681a      	ldr	r2, [r3, #0]
  40235a:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40235e:	1d11      	adds	r1, r2, #4
  402360:	6019      	str	r1, [r3, #0]
  402362:	6813      	ldr	r3, [r2, #0]
  402364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402368:	2301      	movs	r3, #1
  40236a:	e0a3      	b.n	4024b4 <_printf_i+0x1dc>
  40236c:	f011 0f40 	tst.w	r1, #64	; 0x40
  402370:	f102 0104 	add.w	r1, r2, #4
  402374:	6019      	str	r1, [r3, #0]
  402376:	d0d7      	beq.n	402328 <_printf_i+0x50>
  402378:	f9b2 3000 	ldrsh.w	r3, [r2]
  40237c:	2b00      	cmp	r3, #0
  40237e:	da03      	bge.n	402388 <_printf_i+0xb0>
  402380:	222d      	movs	r2, #45	; 0x2d
  402382:	425b      	negs	r3, r3
  402384:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402388:	4962      	ldr	r1, [pc, #392]	; (402514 <_printf_i+0x23c>)
  40238a:	220a      	movs	r2, #10
  40238c:	e017      	b.n	4023be <_printf_i+0xe6>
  40238e:	6820      	ldr	r0, [r4, #0]
  402390:	6819      	ldr	r1, [r3, #0]
  402392:	f010 0f80 	tst.w	r0, #128	; 0x80
  402396:	d003      	beq.n	4023a0 <_printf_i+0xc8>
  402398:	1d08      	adds	r0, r1, #4
  40239a:	6018      	str	r0, [r3, #0]
  40239c:	680b      	ldr	r3, [r1, #0]
  40239e:	e006      	b.n	4023ae <_printf_i+0xd6>
  4023a0:	f010 0f40 	tst.w	r0, #64	; 0x40
  4023a4:	f101 0004 	add.w	r0, r1, #4
  4023a8:	6018      	str	r0, [r3, #0]
  4023aa:	d0f7      	beq.n	40239c <_printf_i+0xc4>
  4023ac:	880b      	ldrh	r3, [r1, #0]
  4023ae:	4959      	ldr	r1, [pc, #356]	; (402514 <_printf_i+0x23c>)
  4023b0:	2a6f      	cmp	r2, #111	; 0x6f
  4023b2:	bf14      	ite	ne
  4023b4:	220a      	movne	r2, #10
  4023b6:	2208      	moveq	r2, #8
  4023b8:	2000      	movs	r0, #0
  4023ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4023be:	6865      	ldr	r5, [r4, #4]
  4023c0:	60a5      	str	r5, [r4, #8]
  4023c2:	2d00      	cmp	r5, #0
  4023c4:	f2c0 809c 	blt.w	402500 <_printf_i+0x228>
  4023c8:	6820      	ldr	r0, [r4, #0]
  4023ca:	f020 0004 	bic.w	r0, r0, #4
  4023ce:	6020      	str	r0, [r4, #0]
  4023d0:	2b00      	cmp	r3, #0
  4023d2:	d13f      	bne.n	402454 <_printf_i+0x17c>
  4023d4:	2d00      	cmp	r5, #0
  4023d6:	f040 8095 	bne.w	402504 <_printf_i+0x22c>
  4023da:	4675      	mov	r5, lr
  4023dc:	2a08      	cmp	r2, #8
  4023de:	d10b      	bne.n	4023f8 <_printf_i+0x120>
  4023e0:	6823      	ldr	r3, [r4, #0]
  4023e2:	07da      	lsls	r2, r3, #31
  4023e4:	d508      	bpl.n	4023f8 <_printf_i+0x120>
  4023e6:	6923      	ldr	r3, [r4, #16]
  4023e8:	6862      	ldr	r2, [r4, #4]
  4023ea:	429a      	cmp	r2, r3
  4023ec:	bfde      	ittt	le
  4023ee:	2330      	movle	r3, #48	; 0x30
  4023f0:	f805 3c01 	strble.w	r3, [r5, #-1]
  4023f4:	f105 35ff 	addle.w	r5, r5, #4294967295
  4023f8:	ebae 0305 	sub.w	r3, lr, r5
  4023fc:	6123      	str	r3, [r4, #16]
  4023fe:	f8cd 8000 	str.w	r8, [sp]
  402402:	463b      	mov	r3, r7
  402404:	aa03      	add	r2, sp, #12
  402406:	4621      	mov	r1, r4
  402408:	4630      	mov	r0, r6
  40240a:	f7ff feef 	bl	4021ec <_printf_common>
  40240e:	3001      	adds	r0, #1
  402410:	d155      	bne.n	4024be <_printf_i+0x1e6>
  402412:	f04f 30ff 	mov.w	r0, #4294967295
  402416:	b005      	add	sp, #20
  402418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40241c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402420:	493c      	ldr	r1, [pc, #240]	; (402514 <_printf_i+0x23c>)
  402422:	6822      	ldr	r2, [r4, #0]
  402424:	6818      	ldr	r0, [r3, #0]
  402426:	f012 0f80 	tst.w	r2, #128	; 0x80
  40242a:	f100 0504 	add.w	r5, r0, #4
  40242e:	601d      	str	r5, [r3, #0]
  402430:	d001      	beq.n	402436 <_printf_i+0x15e>
  402432:	6803      	ldr	r3, [r0, #0]
  402434:	e002      	b.n	40243c <_printf_i+0x164>
  402436:	0655      	lsls	r5, r2, #25
  402438:	d5fb      	bpl.n	402432 <_printf_i+0x15a>
  40243a:	8803      	ldrh	r3, [r0, #0]
  40243c:	07d0      	lsls	r0, r2, #31
  40243e:	bf44      	itt	mi
  402440:	f042 0220 	orrmi.w	r2, r2, #32
  402444:	6022      	strmi	r2, [r4, #0]
  402446:	b91b      	cbnz	r3, 402450 <_printf_i+0x178>
  402448:	6822      	ldr	r2, [r4, #0]
  40244a:	f022 0220 	bic.w	r2, r2, #32
  40244e:	6022      	str	r2, [r4, #0]
  402450:	2210      	movs	r2, #16
  402452:	e7b1      	b.n	4023b8 <_printf_i+0xe0>
  402454:	4675      	mov	r5, lr
  402456:	fbb3 f0f2 	udiv	r0, r3, r2
  40245a:	fb02 3310 	mls	r3, r2, r0, r3
  40245e:	5ccb      	ldrb	r3, [r1, r3]
  402460:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402464:	4603      	mov	r3, r0
  402466:	2800      	cmp	r0, #0
  402468:	d1f5      	bne.n	402456 <_printf_i+0x17e>
  40246a:	e7b7      	b.n	4023dc <_printf_i+0x104>
  40246c:	6808      	ldr	r0, [r1, #0]
  40246e:	681a      	ldr	r2, [r3, #0]
  402470:	6949      	ldr	r1, [r1, #20]
  402472:	f010 0f80 	tst.w	r0, #128	; 0x80
  402476:	d004      	beq.n	402482 <_printf_i+0x1aa>
  402478:	1d10      	adds	r0, r2, #4
  40247a:	6018      	str	r0, [r3, #0]
  40247c:	6813      	ldr	r3, [r2, #0]
  40247e:	6019      	str	r1, [r3, #0]
  402480:	e007      	b.n	402492 <_printf_i+0x1ba>
  402482:	f010 0f40 	tst.w	r0, #64	; 0x40
  402486:	f102 0004 	add.w	r0, r2, #4
  40248a:	6018      	str	r0, [r3, #0]
  40248c:	6813      	ldr	r3, [r2, #0]
  40248e:	d0f6      	beq.n	40247e <_printf_i+0x1a6>
  402490:	8019      	strh	r1, [r3, #0]
  402492:	2300      	movs	r3, #0
  402494:	6123      	str	r3, [r4, #16]
  402496:	4675      	mov	r5, lr
  402498:	e7b1      	b.n	4023fe <_printf_i+0x126>
  40249a:	681a      	ldr	r2, [r3, #0]
  40249c:	1d11      	adds	r1, r2, #4
  40249e:	6019      	str	r1, [r3, #0]
  4024a0:	6815      	ldr	r5, [r2, #0]
  4024a2:	6862      	ldr	r2, [r4, #4]
  4024a4:	2100      	movs	r1, #0
  4024a6:	4628      	mov	r0, r5
  4024a8:	f000 fb52 	bl	402b50 <memchr>
  4024ac:	b108      	cbz	r0, 4024b2 <_printf_i+0x1da>
  4024ae:	1b40      	subs	r0, r0, r5
  4024b0:	6060      	str	r0, [r4, #4]
  4024b2:	6863      	ldr	r3, [r4, #4]
  4024b4:	6123      	str	r3, [r4, #16]
  4024b6:	2300      	movs	r3, #0
  4024b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4024bc:	e79f      	b.n	4023fe <_printf_i+0x126>
  4024be:	6923      	ldr	r3, [r4, #16]
  4024c0:	462a      	mov	r2, r5
  4024c2:	4639      	mov	r1, r7
  4024c4:	4630      	mov	r0, r6
  4024c6:	47c0      	blx	r8
  4024c8:	3001      	adds	r0, #1
  4024ca:	d0a2      	beq.n	402412 <_printf_i+0x13a>
  4024cc:	6823      	ldr	r3, [r4, #0]
  4024ce:	079b      	lsls	r3, r3, #30
  4024d0:	d507      	bpl.n	4024e2 <_printf_i+0x20a>
  4024d2:	2500      	movs	r5, #0
  4024d4:	f104 0919 	add.w	r9, r4, #25
  4024d8:	68e3      	ldr	r3, [r4, #12]
  4024da:	9a03      	ldr	r2, [sp, #12]
  4024dc:	1a9b      	subs	r3, r3, r2
  4024de:	429d      	cmp	r5, r3
  4024e0:	db05      	blt.n	4024ee <_printf_i+0x216>
  4024e2:	68e0      	ldr	r0, [r4, #12]
  4024e4:	9b03      	ldr	r3, [sp, #12]
  4024e6:	4298      	cmp	r0, r3
  4024e8:	bfb8      	it	lt
  4024ea:	4618      	movlt	r0, r3
  4024ec:	e793      	b.n	402416 <_printf_i+0x13e>
  4024ee:	2301      	movs	r3, #1
  4024f0:	464a      	mov	r2, r9
  4024f2:	4639      	mov	r1, r7
  4024f4:	4630      	mov	r0, r6
  4024f6:	47c0      	blx	r8
  4024f8:	3001      	adds	r0, #1
  4024fa:	d08a      	beq.n	402412 <_printf_i+0x13a>
  4024fc:	3501      	adds	r5, #1
  4024fe:	e7eb      	b.n	4024d8 <_printf_i+0x200>
  402500:	2b00      	cmp	r3, #0
  402502:	d1a7      	bne.n	402454 <_printf_i+0x17c>
  402504:	780b      	ldrb	r3, [r1, #0]
  402506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  40250a:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40250e:	e765      	b.n	4023dc <_printf_i+0x104>
  402510:	0040306e 	.word	0x0040306e
  402514:	0040305d 	.word	0x0040305d

00402518 <_scanf_chars>:
  402518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40251c:	4615      	mov	r5, r2
  40251e:	688a      	ldr	r2, [r1, #8]
  402520:	4680      	mov	r8, r0
  402522:	460c      	mov	r4, r1
  402524:	b932      	cbnz	r2, 402534 <_scanf_chars+0x1c>
  402526:	698a      	ldr	r2, [r1, #24]
  402528:	2a00      	cmp	r2, #0
  40252a:	bf0c      	ite	eq
  40252c:	2201      	moveq	r2, #1
  40252e:	f04f 32ff 	movne.w	r2, #4294967295
  402532:	608a      	str	r2, [r1, #8]
  402534:	6822      	ldr	r2, [r4, #0]
  402536:	06d1      	lsls	r1, r2, #27
  402538:	bf5f      	itttt	pl
  40253a:	681a      	ldrpl	r2, [r3, #0]
  40253c:	1d11      	addpl	r1, r2, #4
  40253e:	6019      	strpl	r1, [r3, #0]
  402540:	6817      	ldrpl	r7, [r2, #0]
  402542:	2600      	movs	r6, #0
  402544:	69a3      	ldr	r3, [r4, #24]
  402546:	b1db      	cbz	r3, 402580 <_scanf_chars+0x68>
  402548:	2b01      	cmp	r3, #1
  40254a:	d107      	bne.n	40255c <_scanf_chars+0x44>
  40254c:	682b      	ldr	r3, [r5, #0]
  40254e:	6962      	ldr	r2, [r4, #20]
  402550:	781b      	ldrb	r3, [r3, #0]
  402552:	5cd3      	ldrb	r3, [r2, r3]
  402554:	b9a3      	cbnz	r3, 402580 <_scanf_chars+0x68>
  402556:	2e00      	cmp	r6, #0
  402558:	d132      	bne.n	4025c0 <_scanf_chars+0xa8>
  40255a:	e006      	b.n	40256a <_scanf_chars+0x52>
  40255c:	2b02      	cmp	r3, #2
  40255e:	d007      	beq.n	402570 <_scanf_chars+0x58>
  402560:	2e00      	cmp	r6, #0
  402562:	d12d      	bne.n	4025c0 <_scanf_chars+0xa8>
  402564:	69a3      	ldr	r3, [r4, #24]
  402566:	2b01      	cmp	r3, #1
  402568:	d12a      	bne.n	4025c0 <_scanf_chars+0xa8>
  40256a:	2001      	movs	r0, #1
  40256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402570:	f000 faca 	bl	402b08 <__locale_ctype_ptr>
  402574:	682b      	ldr	r3, [r5, #0]
  402576:	781b      	ldrb	r3, [r3, #0]
  402578:	4418      	add	r0, r3
  40257a:	7843      	ldrb	r3, [r0, #1]
  40257c:	071b      	lsls	r3, r3, #28
  40257e:	d4ef      	bmi.n	402560 <_scanf_chars+0x48>
  402580:	6823      	ldr	r3, [r4, #0]
  402582:	06da      	lsls	r2, r3, #27
  402584:	bf5e      	ittt	pl
  402586:	682b      	ldrpl	r3, [r5, #0]
  402588:	781b      	ldrbpl	r3, [r3, #0]
  40258a:	703b      	strbpl	r3, [r7, #0]
  40258c:	682a      	ldr	r2, [r5, #0]
  40258e:	686b      	ldr	r3, [r5, #4]
  402590:	f102 0201 	add.w	r2, r2, #1
  402594:	602a      	str	r2, [r5, #0]
  402596:	68a2      	ldr	r2, [r4, #8]
  402598:	f103 33ff 	add.w	r3, r3, #4294967295
  40259c:	f102 32ff 	add.w	r2, r2, #4294967295
  4025a0:	606b      	str	r3, [r5, #4]
  4025a2:	f106 0601 	add.w	r6, r6, #1
  4025a6:	bf58      	it	pl
  4025a8:	3701      	addpl	r7, #1
  4025aa:	60a2      	str	r2, [r4, #8]
  4025ac:	b142      	cbz	r2, 4025c0 <_scanf_chars+0xa8>
  4025ae:	2b00      	cmp	r3, #0
  4025b0:	dcc8      	bgt.n	402544 <_scanf_chars+0x2c>
  4025b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
  4025b6:	4629      	mov	r1, r5
  4025b8:	4640      	mov	r0, r8
  4025ba:	4798      	blx	r3
  4025bc:	2800      	cmp	r0, #0
  4025be:	d0c1      	beq.n	402544 <_scanf_chars+0x2c>
  4025c0:	6823      	ldr	r3, [r4, #0]
  4025c2:	f013 0310 	ands.w	r3, r3, #16
  4025c6:	d105      	bne.n	4025d4 <_scanf_chars+0xbc>
  4025c8:	68e2      	ldr	r2, [r4, #12]
  4025ca:	3201      	adds	r2, #1
  4025cc:	60e2      	str	r2, [r4, #12]
  4025ce:	69a2      	ldr	r2, [r4, #24]
  4025d0:	b102      	cbz	r2, 4025d4 <_scanf_chars+0xbc>
  4025d2:	703b      	strb	r3, [r7, #0]
  4025d4:	6923      	ldr	r3, [r4, #16]
  4025d6:	441e      	add	r6, r3
  4025d8:	6126      	str	r6, [r4, #16]
  4025da:	2000      	movs	r0, #0
  4025dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004025e0 <_scanf_i>:
  4025e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025e4:	469a      	mov	sl, r3
  4025e6:	4b74      	ldr	r3, [pc, #464]	; (4027b8 <_scanf_i+0x1d8>)
  4025e8:	460c      	mov	r4, r1
  4025ea:	4683      	mov	fp, r0
  4025ec:	4616      	mov	r6, r2
  4025ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4025f2:	b087      	sub	sp, #28
  4025f4:	ab03      	add	r3, sp, #12
  4025f6:	68a7      	ldr	r7, [r4, #8]
  4025f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  4025fc:	4b6f      	ldr	r3, [pc, #444]	; (4027bc <_scanf_i+0x1dc>)
  4025fe:	69a1      	ldr	r1, [r4, #24]
  402600:	4a6f      	ldr	r2, [pc, #444]	; (4027c0 <_scanf_i+0x1e0>)
  402602:	2903      	cmp	r1, #3
  402604:	bf18      	it	ne
  402606:	461a      	movne	r2, r3
  402608:	1e7b      	subs	r3, r7, #1
  40260a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40260e:	bf84      	itt	hi
  402610:	f240 135d 	movwhi	r3, #349	; 0x15d
  402614:	60a3      	strhi	r3, [r4, #8]
  402616:	6823      	ldr	r3, [r4, #0]
  402618:	9200      	str	r2, [sp, #0]
  40261a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
  40261e:	bf88      	it	hi
  402620:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
  402624:	f104 091c 	add.w	r9, r4, #28
  402628:	6023      	str	r3, [r4, #0]
  40262a:	bf8c      	ite	hi
  40262c:	197f      	addhi	r7, r7, r5
  40262e:	2700      	movls	r7, #0
  402630:	464b      	mov	r3, r9
  402632:	f04f 0800 	mov.w	r8, #0
  402636:	9301      	str	r3, [sp, #4]
  402638:	6831      	ldr	r1, [r6, #0]
  40263a:	ab03      	add	r3, sp, #12
  40263c:	2202      	movs	r2, #2
  40263e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
  402642:	7809      	ldrb	r1, [r1, #0]
  402644:	f000 fa84 	bl	402b50 <memchr>
  402648:	9b01      	ldr	r3, [sp, #4]
  40264a:	b328      	cbz	r0, 402698 <_scanf_i+0xb8>
  40264c:	f1b8 0f01 	cmp.w	r8, #1
  402650:	d156      	bne.n	402700 <_scanf_i+0x120>
  402652:	6862      	ldr	r2, [r4, #4]
  402654:	b92a      	cbnz	r2, 402662 <_scanf_i+0x82>
  402656:	2208      	movs	r2, #8
  402658:	6062      	str	r2, [r4, #4]
  40265a:	6822      	ldr	r2, [r4, #0]
  40265c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  402660:	6022      	str	r2, [r4, #0]
  402662:	6822      	ldr	r2, [r4, #0]
  402664:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
  402668:	6022      	str	r2, [r4, #0]
  40266a:	68a2      	ldr	r2, [r4, #8]
  40266c:	1e51      	subs	r1, r2, #1
  40266e:	60a1      	str	r1, [r4, #8]
  402670:	b192      	cbz	r2, 402698 <_scanf_i+0xb8>
  402672:	6832      	ldr	r2, [r6, #0]
  402674:	1c51      	adds	r1, r2, #1
  402676:	6031      	str	r1, [r6, #0]
  402678:	7812      	ldrb	r2, [r2, #0]
  40267a:	701a      	strb	r2, [r3, #0]
  40267c:	1c5d      	adds	r5, r3, #1
  40267e:	6873      	ldr	r3, [r6, #4]
  402680:	3b01      	subs	r3, #1
  402682:	2b00      	cmp	r3, #0
  402684:	6073      	str	r3, [r6, #4]
  402686:	dc06      	bgt.n	402696 <_scanf_i+0xb6>
  402688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
  40268c:	4631      	mov	r1, r6
  40268e:	4658      	mov	r0, fp
  402690:	4798      	blx	r3
  402692:	2800      	cmp	r0, #0
  402694:	d176      	bne.n	402784 <_scanf_i+0x1a4>
  402696:	462b      	mov	r3, r5
  402698:	f108 0801 	add.w	r8, r8, #1
  40269c:	f1b8 0f03 	cmp.w	r8, #3
  4026a0:	d1c9      	bne.n	402636 <_scanf_i+0x56>
  4026a2:	6862      	ldr	r2, [r4, #4]
  4026a4:	b90a      	cbnz	r2, 4026aa <_scanf_i+0xca>
  4026a6:	220a      	movs	r2, #10
  4026a8:	6062      	str	r2, [r4, #4]
  4026aa:	6862      	ldr	r2, [r4, #4]
  4026ac:	4945      	ldr	r1, [pc, #276]	; (4027c4 <_scanf_i+0x1e4>)
  4026ae:	6960      	ldr	r0, [r4, #20]
  4026b0:	9301      	str	r3, [sp, #4]
  4026b2:	1a89      	subs	r1, r1, r2
  4026b4:	f000 f898 	bl	4027e8 <__sccl>
  4026b8:	9b01      	ldr	r3, [sp, #4]
  4026ba:	f04f 0800 	mov.w	r8, #0
  4026be:	461d      	mov	r5, r3
  4026c0:	68a3      	ldr	r3, [r4, #8]
  4026c2:	2b00      	cmp	r3, #0
  4026c4:	d038      	beq.n	402738 <_scanf_i+0x158>
  4026c6:	6831      	ldr	r1, [r6, #0]
  4026c8:	6960      	ldr	r0, [r4, #20]
  4026ca:	780a      	ldrb	r2, [r1, #0]
  4026cc:	5c80      	ldrb	r0, [r0, r2]
  4026ce:	2800      	cmp	r0, #0
  4026d0:	d032      	beq.n	402738 <_scanf_i+0x158>
  4026d2:	2a30      	cmp	r2, #48	; 0x30
  4026d4:	6822      	ldr	r2, [r4, #0]
  4026d6:	d121      	bne.n	40271c <_scanf_i+0x13c>
  4026d8:	0510      	lsls	r0, r2, #20
  4026da:	d51f      	bpl.n	40271c <_scanf_i+0x13c>
  4026dc:	f108 0801 	add.w	r8, r8, #1
  4026e0:	b117      	cbz	r7, 4026e8 <_scanf_i+0x108>
  4026e2:	3301      	adds	r3, #1
  4026e4:	3f01      	subs	r7, #1
  4026e6:	60a3      	str	r3, [r4, #8]
  4026e8:	6873      	ldr	r3, [r6, #4]
  4026ea:	3b01      	subs	r3, #1
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	6073      	str	r3, [r6, #4]
  4026f0:	dd1b      	ble.n	40272a <_scanf_i+0x14a>
  4026f2:	6833      	ldr	r3, [r6, #0]
  4026f4:	3301      	adds	r3, #1
  4026f6:	6033      	str	r3, [r6, #0]
  4026f8:	68a3      	ldr	r3, [r4, #8]
  4026fa:	3b01      	subs	r3, #1
  4026fc:	60a3      	str	r3, [r4, #8]
  4026fe:	e7df      	b.n	4026c0 <_scanf_i+0xe0>
  402700:	f1b8 0f02 	cmp.w	r8, #2
  402704:	d1b1      	bne.n	40266a <_scanf_i+0x8a>
  402706:	6822      	ldr	r2, [r4, #0]
  402708:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
  40270c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  402710:	d1c2      	bne.n	402698 <_scanf_i+0xb8>
  402712:	2110      	movs	r1, #16
  402714:	6061      	str	r1, [r4, #4]
  402716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40271a:	e7a5      	b.n	402668 <_scanf_i+0x88>
  40271c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
  402720:	6022      	str	r2, [r4, #0]
  402722:	780b      	ldrb	r3, [r1, #0]
  402724:	702b      	strb	r3, [r5, #0]
  402726:	3501      	adds	r5, #1
  402728:	e7de      	b.n	4026e8 <_scanf_i+0x108>
  40272a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
  40272e:	4631      	mov	r1, r6
  402730:	4658      	mov	r0, fp
  402732:	4798      	blx	r3
  402734:	2800      	cmp	r0, #0
  402736:	d0df      	beq.n	4026f8 <_scanf_i+0x118>
  402738:	6823      	ldr	r3, [r4, #0]
  40273a:	05d9      	lsls	r1, r3, #23
  40273c:	d50c      	bpl.n	402758 <_scanf_i+0x178>
  40273e:	454d      	cmp	r5, r9
  402740:	d908      	bls.n	402754 <_scanf_i+0x174>
  402742:	f815 1c01 	ldrb.w	r1, [r5, #-1]
  402746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
  40274a:	4632      	mov	r2, r6
  40274c:	4658      	mov	r0, fp
  40274e:	4798      	blx	r3
  402750:	1e6f      	subs	r7, r5, #1
  402752:	463d      	mov	r5, r7
  402754:	454d      	cmp	r5, r9
  402756:	d02c      	beq.n	4027b2 <_scanf_i+0x1d2>
  402758:	6822      	ldr	r2, [r4, #0]
  40275a:	f012 0210 	ands.w	r2, r2, #16
  40275e:	d11e      	bne.n	40279e <_scanf_i+0x1be>
  402760:	702a      	strb	r2, [r5, #0]
  402762:	6863      	ldr	r3, [r4, #4]
  402764:	9e00      	ldr	r6, [sp, #0]
  402766:	4649      	mov	r1, r9
  402768:	4658      	mov	r0, fp
  40276a:	47b0      	blx	r6
  40276c:	6822      	ldr	r2, [r4, #0]
  40276e:	f8da 3000 	ldr.w	r3, [sl]
  402772:	f012 0f20 	tst.w	r2, #32
  402776:	d008      	beq.n	40278a <_scanf_i+0x1aa>
  402778:	1d1a      	adds	r2, r3, #4
  40277a:	f8ca 2000 	str.w	r2, [sl]
  40277e:	681b      	ldr	r3, [r3, #0]
  402780:	6018      	str	r0, [r3, #0]
  402782:	e009      	b.n	402798 <_scanf_i+0x1b8>
  402784:	f04f 0800 	mov.w	r8, #0
  402788:	e7d6      	b.n	402738 <_scanf_i+0x158>
  40278a:	07d2      	lsls	r2, r2, #31
  40278c:	d5f4      	bpl.n	402778 <_scanf_i+0x198>
  40278e:	1d1a      	adds	r2, r3, #4
  402790:	f8ca 2000 	str.w	r2, [sl]
  402794:	681b      	ldr	r3, [r3, #0]
  402796:	8018      	strh	r0, [r3, #0]
  402798:	68e3      	ldr	r3, [r4, #12]
  40279a:	3301      	adds	r3, #1
  40279c:	60e3      	str	r3, [r4, #12]
  40279e:	eba5 0509 	sub.w	r5, r5, r9
  4027a2:	44a8      	add	r8, r5
  4027a4:	6925      	ldr	r5, [r4, #16]
  4027a6:	4445      	add	r5, r8
  4027a8:	6125      	str	r5, [r4, #16]
  4027aa:	2000      	movs	r0, #0
  4027ac:	b007      	add	sp, #28
  4027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027b2:	2001      	movs	r0, #1
  4027b4:	e7fa      	b.n	4027ac <_scanf_i+0x1cc>
  4027b6:	bf00      	nop
  4027b8:	00403080 	.word	0x00403080
  4027bc:	00402a69 	.word	0x00402a69
  4027c0:	00402949 	.word	0x00402949
  4027c4:	0040309c 	.word	0x0040309c

004027c8 <_sbrk_r>:
  4027c8:	b538      	push	{r3, r4, r5, lr}
  4027ca:	4c06      	ldr	r4, [pc, #24]	; (4027e4 <_sbrk_r+0x1c>)
  4027cc:	2300      	movs	r3, #0
  4027ce:	4605      	mov	r5, r0
  4027d0:	4608      	mov	r0, r1
  4027d2:	6023      	str	r3, [r4, #0]
  4027d4:	f7fe fc70 	bl	4010b8 <_sbrk>
  4027d8:	1c43      	adds	r3, r0, #1
  4027da:	d102      	bne.n	4027e2 <_sbrk_r+0x1a>
  4027dc:	6823      	ldr	r3, [r4, #0]
  4027de:	b103      	cbz	r3, 4027e2 <_sbrk_r+0x1a>
  4027e0:	602b      	str	r3, [r5, #0]
  4027e2:	bd38      	pop	{r3, r4, r5, pc}
  4027e4:	204022a4 	.word	0x204022a4

004027e8 <__sccl>:
  4027e8:	b570      	push	{r4, r5, r6, lr}
  4027ea:	780b      	ldrb	r3, [r1, #0]
  4027ec:	2b5e      	cmp	r3, #94	; 0x5e
  4027ee:	bf13      	iteet	ne
  4027f0:	1c4a      	addne	r2, r1, #1
  4027f2:	1c8a      	addeq	r2, r1, #2
  4027f4:	784b      	ldrbeq	r3, [r1, #1]
  4027f6:	2100      	movne	r1, #0
  4027f8:	bf08      	it	eq
  4027fa:	2101      	moveq	r1, #1
  4027fc:	1e44      	subs	r4, r0, #1
  4027fe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
  402802:	f804 1f01 	strb.w	r1, [r4, #1]!
  402806:	42a5      	cmp	r5, r4
  402808:	d1fb      	bne.n	402802 <__sccl+0x1a>
  40280a:	b913      	cbnz	r3, 402812 <__sccl+0x2a>
  40280c:	3a01      	subs	r2, #1
  40280e:	4610      	mov	r0, r2
  402810:	bd70      	pop	{r4, r5, r6, pc}
  402812:	f081 0401 	eor.w	r4, r1, #1
  402816:	54c4      	strb	r4, [r0, r3]
  402818:	4611      	mov	r1, r2
  40281a:	780d      	ldrb	r5, [r1, #0]
  40281c:	2d2d      	cmp	r5, #45	; 0x2d
  40281e:	f101 0201 	add.w	r2, r1, #1
  402822:	d006      	beq.n	402832 <__sccl+0x4a>
  402824:	2d5d      	cmp	r5, #93	; 0x5d
  402826:	d0f2      	beq.n	40280e <__sccl+0x26>
  402828:	b90d      	cbnz	r5, 40282e <__sccl+0x46>
  40282a:	460a      	mov	r2, r1
  40282c:	e7ef      	b.n	40280e <__sccl+0x26>
  40282e:	462b      	mov	r3, r5
  402830:	e7f1      	b.n	402816 <__sccl+0x2e>
  402832:	784e      	ldrb	r6, [r1, #1]
  402834:	2e5d      	cmp	r6, #93	; 0x5d
  402836:	d0fa      	beq.n	40282e <__sccl+0x46>
  402838:	42b3      	cmp	r3, r6
  40283a:	dcf8      	bgt.n	40282e <__sccl+0x46>
  40283c:	3102      	adds	r1, #2
  40283e:	3301      	adds	r3, #1
  402840:	429e      	cmp	r6, r3
  402842:	54c4      	strb	r4, [r0, r3]
  402844:	dcfb      	bgt.n	40283e <__sccl+0x56>
  402846:	e7e8      	b.n	40281a <__sccl+0x32>

00402848 <_strtol_l.isra.0>:
  402848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40284c:	4680      	mov	r8, r0
  40284e:	4689      	mov	r9, r1
  402850:	4692      	mov	sl, r2
  402852:	461f      	mov	r7, r3
  402854:	468b      	mov	fp, r1
  402856:	465d      	mov	r5, fp
  402858:	980a      	ldr	r0, [sp, #40]	; 0x28
  40285a:	f815 4b01 	ldrb.w	r4, [r5], #1
  40285e:	f000 f950 	bl	402b02 <__locale_ctype_ptr_l>
  402862:	4420      	add	r0, r4
  402864:	7846      	ldrb	r6, [r0, #1]
  402866:	f016 0608 	ands.w	r6, r6, #8
  40286a:	d10b      	bne.n	402884 <_strtol_l.isra.0+0x3c>
  40286c:	2c2d      	cmp	r4, #45	; 0x2d
  40286e:	d10b      	bne.n	402888 <_strtol_l.isra.0+0x40>
  402870:	782c      	ldrb	r4, [r5, #0]
  402872:	2601      	movs	r6, #1
  402874:	f10b 0502 	add.w	r5, fp, #2
  402878:	b167      	cbz	r7, 402894 <_strtol_l.isra.0+0x4c>
  40287a:	2f10      	cmp	r7, #16
  40287c:	d114      	bne.n	4028a8 <_strtol_l.isra.0+0x60>
  40287e:	2c30      	cmp	r4, #48	; 0x30
  402880:	d00a      	beq.n	402898 <_strtol_l.isra.0+0x50>
  402882:	e011      	b.n	4028a8 <_strtol_l.isra.0+0x60>
  402884:	46ab      	mov	fp, r5
  402886:	e7e6      	b.n	402856 <_strtol_l.isra.0+0xe>
  402888:	2c2b      	cmp	r4, #43	; 0x2b
  40288a:	bf04      	itt	eq
  40288c:	782c      	ldrbeq	r4, [r5, #0]
  40288e:	f10b 0502 	addeq.w	r5, fp, #2
  402892:	e7f1      	b.n	402878 <_strtol_l.isra.0+0x30>
  402894:	2c30      	cmp	r4, #48	; 0x30
  402896:	d127      	bne.n	4028e8 <_strtol_l.isra.0+0xa0>
  402898:	782b      	ldrb	r3, [r5, #0]
  40289a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40289e:	2b58      	cmp	r3, #88	; 0x58
  4028a0:	d14b      	bne.n	40293a <_strtol_l.isra.0+0xf2>
  4028a2:	786c      	ldrb	r4, [r5, #1]
  4028a4:	2710      	movs	r7, #16
  4028a6:	3502      	adds	r5, #2
  4028a8:	2e00      	cmp	r6, #0
  4028aa:	bf0c      	ite	eq
  4028ac:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
  4028b0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
  4028b4:	2200      	movs	r2, #0
  4028b6:	fbb1 fef7 	udiv	lr, r1, r7
  4028ba:	4610      	mov	r0, r2
  4028bc:	fb07 1c1e 	mls	ip, r7, lr, r1
  4028c0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  4028c4:	2b09      	cmp	r3, #9
  4028c6:	d811      	bhi.n	4028ec <_strtol_l.isra.0+0xa4>
  4028c8:	461c      	mov	r4, r3
  4028ca:	42a7      	cmp	r7, r4
  4028cc:	dd1d      	ble.n	40290a <_strtol_l.isra.0+0xc2>
  4028ce:	1c53      	adds	r3, r2, #1
  4028d0:	d007      	beq.n	4028e2 <_strtol_l.isra.0+0x9a>
  4028d2:	4586      	cmp	lr, r0
  4028d4:	d316      	bcc.n	402904 <_strtol_l.isra.0+0xbc>
  4028d6:	d101      	bne.n	4028dc <_strtol_l.isra.0+0x94>
  4028d8:	45a4      	cmp	ip, r4
  4028da:	db13      	blt.n	402904 <_strtol_l.isra.0+0xbc>
  4028dc:	fb00 4007 	mla	r0, r0, r7, r4
  4028e0:	2201      	movs	r2, #1
  4028e2:	f815 4b01 	ldrb.w	r4, [r5], #1
  4028e6:	e7eb      	b.n	4028c0 <_strtol_l.isra.0+0x78>
  4028e8:	270a      	movs	r7, #10
  4028ea:	e7dd      	b.n	4028a8 <_strtol_l.isra.0+0x60>
  4028ec:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  4028f0:	2b19      	cmp	r3, #25
  4028f2:	d801      	bhi.n	4028f8 <_strtol_l.isra.0+0xb0>
  4028f4:	3c37      	subs	r4, #55	; 0x37
  4028f6:	e7e8      	b.n	4028ca <_strtol_l.isra.0+0x82>
  4028f8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
  4028fc:	2b19      	cmp	r3, #25
  4028fe:	d804      	bhi.n	40290a <_strtol_l.isra.0+0xc2>
  402900:	3c57      	subs	r4, #87	; 0x57
  402902:	e7e2      	b.n	4028ca <_strtol_l.isra.0+0x82>
  402904:	f04f 32ff 	mov.w	r2, #4294967295
  402908:	e7eb      	b.n	4028e2 <_strtol_l.isra.0+0x9a>
  40290a:	1c53      	adds	r3, r2, #1
  40290c:	d108      	bne.n	402920 <_strtol_l.isra.0+0xd8>
  40290e:	2322      	movs	r3, #34	; 0x22
  402910:	f8c8 3000 	str.w	r3, [r8]
  402914:	4608      	mov	r0, r1
  402916:	f1ba 0f00 	cmp.w	sl, #0
  40291a:	d107      	bne.n	40292c <_strtol_l.isra.0+0xe4>
  40291c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402920:	b106      	cbz	r6, 402924 <_strtol_l.isra.0+0xdc>
  402922:	4240      	negs	r0, r0
  402924:	f1ba 0f00 	cmp.w	sl, #0
  402928:	d00c      	beq.n	402944 <_strtol_l.isra.0+0xfc>
  40292a:	b122      	cbz	r2, 402936 <_strtol_l.isra.0+0xee>
  40292c:	3d01      	subs	r5, #1
  40292e:	f8ca 5000 	str.w	r5, [sl]
  402932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402936:	464d      	mov	r5, r9
  402938:	e7f9      	b.n	40292e <_strtol_l.isra.0+0xe6>
  40293a:	2430      	movs	r4, #48	; 0x30
  40293c:	2f00      	cmp	r7, #0
  40293e:	d1b3      	bne.n	4028a8 <_strtol_l.isra.0+0x60>
  402940:	2708      	movs	r7, #8
  402942:	e7b1      	b.n	4028a8 <_strtol_l.isra.0+0x60>
  402944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402948 <_strtol_r>:
  402948:	b537      	push	{r0, r1, r2, r4, r5, lr}
  40294a:	4c06      	ldr	r4, [pc, #24]	; (402964 <_strtol_r+0x1c>)
  40294c:	4d06      	ldr	r5, [pc, #24]	; (402968 <_strtol_r+0x20>)
  40294e:	6824      	ldr	r4, [r4, #0]
  402950:	6a24      	ldr	r4, [r4, #32]
  402952:	2c00      	cmp	r4, #0
  402954:	bf08      	it	eq
  402956:	462c      	moveq	r4, r5
  402958:	9400      	str	r4, [sp, #0]
  40295a:	f7ff ff75 	bl	402848 <_strtol_l.isra.0>
  40295e:	b003      	add	sp, #12
  402960:	bd30      	pop	{r4, r5, pc}
  402962:	bf00      	nop
  402964:	2040000c 	.word	0x2040000c
  402968:	20400070 	.word	0x20400070

0040296c <_strtoul_l.isra.0>:
  40296c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402970:	4680      	mov	r8, r0
  402972:	4689      	mov	r9, r1
  402974:	4692      	mov	sl, r2
  402976:	461e      	mov	r6, r3
  402978:	460f      	mov	r7, r1
  40297a:	463d      	mov	r5, r7
  40297c:	9808      	ldr	r0, [sp, #32]
  40297e:	f815 4b01 	ldrb.w	r4, [r5], #1
  402982:	f000 f8be 	bl	402b02 <__locale_ctype_ptr_l>
  402986:	4420      	add	r0, r4
  402988:	7843      	ldrb	r3, [r0, #1]
  40298a:	f013 0308 	ands.w	r3, r3, #8
  40298e:	d10a      	bne.n	4029a6 <_strtoul_l.isra.0+0x3a>
  402990:	2c2d      	cmp	r4, #45	; 0x2d
  402992:	d10a      	bne.n	4029aa <_strtoul_l.isra.0+0x3e>
  402994:	782c      	ldrb	r4, [r5, #0]
  402996:	2301      	movs	r3, #1
  402998:	1cbd      	adds	r5, r7, #2
  40299a:	b15e      	cbz	r6, 4029b4 <_strtoul_l.isra.0+0x48>
  40299c:	2e10      	cmp	r6, #16
  40299e:	d113      	bne.n	4029c8 <_strtoul_l.isra.0+0x5c>
  4029a0:	2c30      	cmp	r4, #48	; 0x30
  4029a2:	d009      	beq.n	4029b8 <_strtoul_l.isra.0+0x4c>
  4029a4:	e010      	b.n	4029c8 <_strtoul_l.isra.0+0x5c>
  4029a6:	462f      	mov	r7, r5
  4029a8:	e7e7      	b.n	40297a <_strtoul_l.isra.0+0xe>
  4029aa:	2c2b      	cmp	r4, #43	; 0x2b
  4029ac:	bf04      	itt	eq
  4029ae:	782c      	ldrbeq	r4, [r5, #0]
  4029b0:	1cbd      	addeq	r5, r7, #2
  4029b2:	e7f2      	b.n	40299a <_strtoul_l.isra.0+0x2e>
  4029b4:	2c30      	cmp	r4, #48	; 0x30
  4029b6:	d125      	bne.n	402a04 <_strtoul_l.isra.0+0x98>
  4029b8:	782a      	ldrb	r2, [r5, #0]
  4029ba:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  4029be:	2a58      	cmp	r2, #88	; 0x58
  4029c0:	d14a      	bne.n	402a58 <_strtoul_l.isra.0+0xec>
  4029c2:	786c      	ldrb	r4, [r5, #1]
  4029c4:	2610      	movs	r6, #16
  4029c6:	3502      	adds	r5, #2
  4029c8:	f04f 31ff 	mov.w	r1, #4294967295
  4029cc:	2700      	movs	r7, #0
  4029ce:	fbb1 f1f6 	udiv	r1, r1, r6
  4029d2:	fb06 fe01 	mul.w	lr, r6, r1
  4029d6:	ea6f 0e0e 	mvn.w	lr, lr
  4029da:	4638      	mov	r0, r7
  4029dc:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4029e0:	2a09      	cmp	r2, #9
  4029e2:	d811      	bhi.n	402a08 <_strtoul_l.isra.0+0x9c>
  4029e4:	4614      	mov	r4, r2
  4029e6:	42a6      	cmp	r6, r4
  4029e8:	dd1d      	ble.n	402a26 <_strtoul_l.isra.0+0xba>
  4029ea:	2f00      	cmp	r7, #0
  4029ec:	db18      	blt.n	402a20 <_strtoul_l.isra.0+0xb4>
  4029ee:	4281      	cmp	r1, r0
  4029f0:	d316      	bcc.n	402a20 <_strtoul_l.isra.0+0xb4>
  4029f2:	d101      	bne.n	4029f8 <_strtoul_l.isra.0+0x8c>
  4029f4:	45a6      	cmp	lr, r4
  4029f6:	db13      	blt.n	402a20 <_strtoul_l.isra.0+0xb4>
  4029f8:	fb00 4006 	mla	r0, r0, r6, r4
  4029fc:	2701      	movs	r7, #1
  4029fe:	f815 4b01 	ldrb.w	r4, [r5], #1
  402a02:	e7eb      	b.n	4029dc <_strtoul_l.isra.0+0x70>
  402a04:	260a      	movs	r6, #10
  402a06:	e7df      	b.n	4029c8 <_strtoul_l.isra.0+0x5c>
  402a08:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
  402a0c:	2a19      	cmp	r2, #25
  402a0e:	d801      	bhi.n	402a14 <_strtoul_l.isra.0+0xa8>
  402a10:	3c37      	subs	r4, #55	; 0x37
  402a12:	e7e8      	b.n	4029e6 <_strtoul_l.isra.0+0x7a>
  402a14:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
  402a18:	2a19      	cmp	r2, #25
  402a1a:	d804      	bhi.n	402a26 <_strtoul_l.isra.0+0xba>
  402a1c:	3c57      	subs	r4, #87	; 0x57
  402a1e:	e7e2      	b.n	4029e6 <_strtoul_l.isra.0+0x7a>
  402a20:	f04f 37ff 	mov.w	r7, #4294967295
  402a24:	e7eb      	b.n	4029fe <_strtoul_l.isra.0+0x92>
  402a26:	2f00      	cmp	r7, #0
  402a28:	da09      	bge.n	402a3e <_strtoul_l.isra.0+0xd2>
  402a2a:	2322      	movs	r3, #34	; 0x22
  402a2c:	f8c8 3000 	str.w	r3, [r8]
  402a30:	f04f 30ff 	mov.w	r0, #4294967295
  402a34:	f1ba 0f00 	cmp.w	sl, #0
  402a38:	d107      	bne.n	402a4a <_strtoul_l.isra.0+0xde>
  402a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a3e:	b103      	cbz	r3, 402a42 <_strtoul_l.isra.0+0xd6>
  402a40:	4240      	negs	r0, r0
  402a42:	f1ba 0f00 	cmp.w	sl, #0
  402a46:	d00c      	beq.n	402a62 <_strtoul_l.isra.0+0xf6>
  402a48:	b127      	cbz	r7, 402a54 <_strtoul_l.isra.0+0xe8>
  402a4a:	3d01      	subs	r5, #1
  402a4c:	f8ca 5000 	str.w	r5, [sl]
  402a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a54:	464d      	mov	r5, r9
  402a56:	e7f9      	b.n	402a4c <_strtoul_l.isra.0+0xe0>
  402a58:	2430      	movs	r4, #48	; 0x30
  402a5a:	2e00      	cmp	r6, #0
  402a5c:	d1b4      	bne.n	4029c8 <_strtoul_l.isra.0+0x5c>
  402a5e:	2608      	movs	r6, #8
  402a60:	e7b2      	b.n	4029c8 <_strtoul_l.isra.0+0x5c>
  402a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00402a68 <_strtoul_r>:
  402a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  402a6a:	4c06      	ldr	r4, [pc, #24]	; (402a84 <_strtoul_r+0x1c>)
  402a6c:	4d06      	ldr	r5, [pc, #24]	; (402a88 <_strtoul_r+0x20>)
  402a6e:	6824      	ldr	r4, [r4, #0]
  402a70:	6a24      	ldr	r4, [r4, #32]
  402a72:	2c00      	cmp	r4, #0
  402a74:	bf08      	it	eq
  402a76:	462c      	moveq	r4, r5
  402a78:	9400      	str	r4, [sp, #0]
  402a7a:	f7ff ff77 	bl	40296c <_strtoul_l.isra.0>
  402a7e:	b003      	add	sp, #12
  402a80:	bd30      	pop	{r4, r5, pc}
  402a82:	bf00      	nop
  402a84:	2040000c 	.word	0x2040000c
  402a88:	20400070 	.word	0x20400070

00402a8c <__submore>:
  402a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a90:	460c      	mov	r4, r1
  402a92:	6b49      	ldr	r1, [r1, #52]	; 0x34
  402a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402a98:	4299      	cmp	r1, r3
  402a9a:	d11e      	bne.n	402ada <__submore+0x4e>
  402a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402aa0:	f7ff f848 	bl	401b34 <_malloc_r>
  402aa4:	b918      	cbnz	r0, 402aae <__submore+0x22>
  402aa6:	f04f 30ff 	mov.w	r0, #4294967295
  402aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402ab2:	63a3      	str	r3, [r4, #56]	; 0x38
  402ab4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  402ab8:	6360      	str	r0, [r4, #52]	; 0x34
  402aba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  402abe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  402ac2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  402ac6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  402aca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  402ace:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  402ad2:	6020      	str	r0, [r4, #0]
  402ad4:	2000      	movs	r0, #0
  402ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ada:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  402adc:	0077      	lsls	r7, r6, #1
  402ade:	463a      	mov	r2, r7
  402ae0:	f000 f8fc 	bl	402cdc <_realloc_r>
  402ae4:	4605      	mov	r5, r0
  402ae6:	2800      	cmp	r0, #0
  402ae8:	d0dd      	beq.n	402aa6 <__submore+0x1a>
  402aea:	eb00 0806 	add.w	r8, r0, r6
  402aee:	4601      	mov	r1, r0
  402af0:	4632      	mov	r2, r6
  402af2:	4640      	mov	r0, r8
  402af4:	f000 f87c 	bl	402bf0 <memcpy>
  402af8:	f8c4 8000 	str.w	r8, [r4]
  402afc:	6365      	str	r5, [r4, #52]	; 0x34
  402afe:	63a7      	str	r7, [r4, #56]	; 0x38
  402b00:	e7e8      	b.n	402ad4 <__submore+0x48>

00402b02 <__locale_ctype_ptr_l>:
  402b02:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  402b06:	4770      	bx	lr

00402b08 <__locale_ctype_ptr>:
  402b08:	4b04      	ldr	r3, [pc, #16]	; (402b1c <__locale_ctype_ptr+0x14>)
  402b0a:	4a05      	ldr	r2, [pc, #20]	; (402b20 <__locale_ctype_ptr+0x18>)
  402b0c:	681b      	ldr	r3, [r3, #0]
  402b0e:	6a1b      	ldr	r3, [r3, #32]
  402b10:	2b00      	cmp	r3, #0
  402b12:	bf08      	it	eq
  402b14:	4613      	moveq	r3, r2
  402b16:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  402b1a:	4770      	bx	lr
  402b1c:	2040000c 	.word	0x2040000c
  402b20:	20400070 	.word	0x20400070

00402b24 <__ascii_mbtowc>:
  402b24:	b082      	sub	sp, #8
  402b26:	b901      	cbnz	r1, 402b2a <__ascii_mbtowc+0x6>
  402b28:	a901      	add	r1, sp, #4
  402b2a:	b142      	cbz	r2, 402b3e <__ascii_mbtowc+0x1a>
  402b2c:	b14b      	cbz	r3, 402b42 <__ascii_mbtowc+0x1e>
  402b2e:	7813      	ldrb	r3, [r2, #0]
  402b30:	600b      	str	r3, [r1, #0]
  402b32:	7812      	ldrb	r2, [r2, #0]
  402b34:	1c10      	adds	r0, r2, #0
  402b36:	bf18      	it	ne
  402b38:	2001      	movne	r0, #1
  402b3a:	b002      	add	sp, #8
  402b3c:	4770      	bx	lr
  402b3e:	4610      	mov	r0, r2
  402b40:	e7fb      	b.n	402b3a <__ascii_mbtowc+0x16>
  402b42:	f06f 0001 	mvn.w	r0, #1
  402b46:	e7f8      	b.n	402b3a <__ascii_mbtowc+0x16>
	...

00402b50 <memchr>:
  402b50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402b54:	2a10      	cmp	r2, #16
  402b56:	db2b      	blt.n	402bb0 <memchr+0x60>
  402b58:	f010 0f07 	tst.w	r0, #7
  402b5c:	d008      	beq.n	402b70 <memchr+0x20>
  402b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402b62:	3a01      	subs	r2, #1
  402b64:	428b      	cmp	r3, r1
  402b66:	d02d      	beq.n	402bc4 <memchr+0x74>
  402b68:	f010 0f07 	tst.w	r0, #7
  402b6c:	b342      	cbz	r2, 402bc0 <memchr+0x70>
  402b6e:	d1f6      	bne.n	402b5e <memchr+0xe>
  402b70:	b4f0      	push	{r4, r5, r6, r7}
  402b72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402b76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402b7a:	f022 0407 	bic.w	r4, r2, #7
  402b7e:	f07f 0700 	mvns.w	r7, #0
  402b82:	2300      	movs	r3, #0
  402b84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402b88:	3c08      	subs	r4, #8
  402b8a:	ea85 0501 	eor.w	r5, r5, r1
  402b8e:	ea86 0601 	eor.w	r6, r6, r1
  402b92:	fa85 f547 	uadd8	r5, r5, r7
  402b96:	faa3 f587 	sel	r5, r3, r7
  402b9a:	fa86 f647 	uadd8	r6, r6, r7
  402b9e:	faa5 f687 	sel	r6, r5, r7
  402ba2:	b98e      	cbnz	r6, 402bc8 <memchr+0x78>
  402ba4:	d1ee      	bne.n	402b84 <memchr+0x34>
  402ba6:	bcf0      	pop	{r4, r5, r6, r7}
  402ba8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402bac:	f002 0207 	and.w	r2, r2, #7
  402bb0:	b132      	cbz	r2, 402bc0 <memchr+0x70>
  402bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
  402bb6:	3a01      	subs	r2, #1
  402bb8:	ea83 0301 	eor.w	r3, r3, r1
  402bbc:	b113      	cbz	r3, 402bc4 <memchr+0x74>
  402bbe:	d1f8      	bne.n	402bb2 <memchr+0x62>
  402bc0:	2000      	movs	r0, #0
  402bc2:	4770      	bx	lr
  402bc4:	3801      	subs	r0, #1
  402bc6:	4770      	bx	lr
  402bc8:	2d00      	cmp	r5, #0
  402bca:	bf06      	itte	eq
  402bcc:	4635      	moveq	r5, r6
  402bce:	3803      	subeq	r0, #3
  402bd0:	3807      	subne	r0, #7
  402bd2:	f015 0f01 	tst.w	r5, #1
  402bd6:	d107      	bne.n	402be8 <memchr+0x98>
  402bd8:	3001      	adds	r0, #1
  402bda:	f415 7f80 	tst.w	r5, #256	; 0x100
  402bde:	bf02      	ittt	eq
  402be0:	3001      	addeq	r0, #1
  402be2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402be6:	3001      	addeq	r0, #1
  402be8:	bcf0      	pop	{r4, r5, r6, r7}
  402bea:	3801      	subs	r0, #1
  402bec:	4770      	bx	lr
  402bee:	bf00      	nop

00402bf0 <memcpy>:
  402bf0:	b510      	push	{r4, lr}
  402bf2:	1e43      	subs	r3, r0, #1
  402bf4:	440a      	add	r2, r1
  402bf6:	4291      	cmp	r1, r2
  402bf8:	d100      	bne.n	402bfc <memcpy+0xc>
  402bfa:	bd10      	pop	{r4, pc}
  402bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
  402c00:	f803 4f01 	strb.w	r4, [r3, #1]!
  402c04:	e7f7      	b.n	402bf6 <memcpy+0x6>

00402c06 <memmove>:
  402c06:	4288      	cmp	r0, r1
  402c08:	b510      	push	{r4, lr}
  402c0a:	eb01 0302 	add.w	r3, r1, r2
  402c0e:	d803      	bhi.n	402c18 <memmove+0x12>
  402c10:	1e42      	subs	r2, r0, #1
  402c12:	4299      	cmp	r1, r3
  402c14:	d10c      	bne.n	402c30 <memmove+0x2a>
  402c16:	bd10      	pop	{r4, pc}
  402c18:	4298      	cmp	r0, r3
  402c1a:	d2f9      	bcs.n	402c10 <memmove+0xa>
  402c1c:	1881      	adds	r1, r0, r2
  402c1e:	1ad2      	subs	r2, r2, r3
  402c20:	42d3      	cmn	r3, r2
  402c22:	d100      	bne.n	402c26 <memmove+0x20>
  402c24:	bd10      	pop	{r4, pc}
  402c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402c2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
  402c2e:	e7f7      	b.n	402c20 <memmove+0x1a>
  402c30:	f811 4b01 	ldrb.w	r4, [r1], #1
  402c34:	f802 4f01 	strb.w	r4, [r2, #1]!
  402c38:	e7eb      	b.n	402c12 <memmove+0xc>

00402c3a <__malloc_lock>:
  402c3a:	4770      	bx	lr

00402c3c <__malloc_unlock>:
  402c3c:	4770      	bx	lr
	...

00402c40 <_free_r>:
  402c40:	b538      	push	{r3, r4, r5, lr}
  402c42:	4605      	mov	r5, r0
  402c44:	2900      	cmp	r1, #0
  402c46:	d045      	beq.n	402cd4 <_free_r+0x94>
  402c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
  402c4c:	1f0c      	subs	r4, r1, #4
  402c4e:	2b00      	cmp	r3, #0
  402c50:	bfb8      	it	lt
  402c52:	18e4      	addlt	r4, r4, r3
  402c54:	f7ff fff1 	bl	402c3a <__malloc_lock>
  402c58:	4a1f      	ldr	r2, [pc, #124]	; (402cd8 <_free_r+0x98>)
  402c5a:	6813      	ldr	r3, [r2, #0]
  402c5c:	4610      	mov	r0, r2
  402c5e:	b933      	cbnz	r3, 402c6e <_free_r+0x2e>
  402c60:	6063      	str	r3, [r4, #4]
  402c62:	6014      	str	r4, [r2, #0]
  402c64:	4628      	mov	r0, r5
  402c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402c6a:	f7ff bfe7 	b.w	402c3c <__malloc_unlock>
  402c6e:	42a3      	cmp	r3, r4
  402c70:	d90c      	bls.n	402c8c <_free_r+0x4c>
  402c72:	6821      	ldr	r1, [r4, #0]
  402c74:	1862      	adds	r2, r4, r1
  402c76:	4293      	cmp	r3, r2
  402c78:	bf04      	itt	eq
  402c7a:	681a      	ldreq	r2, [r3, #0]
  402c7c:	685b      	ldreq	r3, [r3, #4]
  402c7e:	6063      	str	r3, [r4, #4]
  402c80:	bf04      	itt	eq
  402c82:	1852      	addeq	r2, r2, r1
  402c84:	6022      	streq	r2, [r4, #0]
  402c86:	6004      	str	r4, [r0, #0]
  402c88:	e7ec      	b.n	402c64 <_free_r+0x24>
  402c8a:	4613      	mov	r3, r2
  402c8c:	685a      	ldr	r2, [r3, #4]
  402c8e:	b10a      	cbz	r2, 402c94 <_free_r+0x54>
  402c90:	42a2      	cmp	r2, r4
  402c92:	d9fa      	bls.n	402c8a <_free_r+0x4a>
  402c94:	6819      	ldr	r1, [r3, #0]
  402c96:	1858      	adds	r0, r3, r1
  402c98:	42a0      	cmp	r0, r4
  402c9a:	d10b      	bne.n	402cb4 <_free_r+0x74>
  402c9c:	6820      	ldr	r0, [r4, #0]
  402c9e:	4401      	add	r1, r0
  402ca0:	1858      	adds	r0, r3, r1
  402ca2:	4282      	cmp	r2, r0
  402ca4:	6019      	str	r1, [r3, #0]
  402ca6:	d1dd      	bne.n	402c64 <_free_r+0x24>
  402ca8:	6810      	ldr	r0, [r2, #0]
  402caa:	6852      	ldr	r2, [r2, #4]
  402cac:	605a      	str	r2, [r3, #4]
  402cae:	4401      	add	r1, r0
  402cb0:	6019      	str	r1, [r3, #0]
  402cb2:	e7d7      	b.n	402c64 <_free_r+0x24>
  402cb4:	d902      	bls.n	402cbc <_free_r+0x7c>
  402cb6:	230c      	movs	r3, #12
  402cb8:	602b      	str	r3, [r5, #0]
  402cba:	e7d3      	b.n	402c64 <_free_r+0x24>
  402cbc:	6820      	ldr	r0, [r4, #0]
  402cbe:	1821      	adds	r1, r4, r0
  402cc0:	428a      	cmp	r2, r1
  402cc2:	bf04      	itt	eq
  402cc4:	6811      	ldreq	r1, [r2, #0]
  402cc6:	6852      	ldreq	r2, [r2, #4]
  402cc8:	6062      	str	r2, [r4, #4]
  402cca:	bf04      	itt	eq
  402ccc:	1809      	addeq	r1, r1, r0
  402cce:	6021      	streq	r1, [r4, #0]
  402cd0:	605c      	str	r4, [r3, #4]
  402cd2:	e7c7      	b.n	402c64 <_free_r+0x24>
  402cd4:	bd38      	pop	{r3, r4, r5, pc}
  402cd6:	bf00      	nop
  402cd8:	20402234 	.word	0x20402234

00402cdc <_realloc_r>:
  402cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402cde:	4607      	mov	r7, r0
  402ce0:	4614      	mov	r4, r2
  402ce2:	460e      	mov	r6, r1
  402ce4:	b921      	cbnz	r1, 402cf0 <_realloc_r+0x14>
  402ce6:	4611      	mov	r1, r2
  402ce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  402cec:	f7fe bf22 	b.w	401b34 <_malloc_r>
  402cf0:	b922      	cbnz	r2, 402cfc <_realloc_r+0x20>
  402cf2:	f7ff ffa5 	bl	402c40 <_free_r>
  402cf6:	4625      	mov	r5, r4
  402cf8:	4628      	mov	r0, r5
  402cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cfc:	f000 f821 	bl	402d42 <_malloc_usable_size_r>
  402d00:	4284      	cmp	r4, r0
  402d02:	d90f      	bls.n	402d24 <_realloc_r+0x48>
  402d04:	4621      	mov	r1, r4
  402d06:	4638      	mov	r0, r7
  402d08:	f7fe ff14 	bl	401b34 <_malloc_r>
  402d0c:	4605      	mov	r5, r0
  402d0e:	2800      	cmp	r0, #0
  402d10:	d0f2      	beq.n	402cf8 <_realloc_r+0x1c>
  402d12:	4631      	mov	r1, r6
  402d14:	4622      	mov	r2, r4
  402d16:	f7ff ff6b 	bl	402bf0 <memcpy>
  402d1a:	4631      	mov	r1, r6
  402d1c:	4638      	mov	r0, r7
  402d1e:	f7ff ff8f 	bl	402c40 <_free_r>
  402d22:	e7e9      	b.n	402cf8 <_realloc_r+0x1c>
  402d24:	4635      	mov	r5, r6
  402d26:	e7e7      	b.n	402cf8 <_realloc_r+0x1c>

00402d28 <__ascii_wctomb>:
  402d28:	b149      	cbz	r1, 402d3e <__ascii_wctomb+0x16>
  402d2a:	2aff      	cmp	r2, #255	; 0xff
  402d2c:	bf85      	ittet	hi
  402d2e:	238a      	movhi	r3, #138	; 0x8a
  402d30:	6003      	strhi	r3, [r0, #0]
  402d32:	700a      	strbls	r2, [r1, #0]
  402d34:	f04f 30ff 	movhi.w	r0, #4294967295
  402d38:	bf98      	it	ls
  402d3a:	2001      	movls	r0, #1
  402d3c:	4770      	bx	lr
  402d3e:	4608      	mov	r0, r1
  402d40:	4770      	bx	lr

00402d42 <_malloc_usable_size_r>:
  402d42:	f851 0c04 	ldr.w	r0, [r1, #-4]
  402d46:	2800      	cmp	r0, #0
  402d48:	f1a0 0004 	sub.w	r0, r0, #4
  402d4c:	bfbc      	itt	lt
  402d4e:	580b      	ldrlt	r3, [r1, r0]
  402d50:	18c0      	addlt	r0, r0, r3
  402d52:	4770      	bx	lr
  402d54:	00082008 	.word	0x00082008
  402d58:	20434441 	.word	0x20434441
  402d5c:	4e554f43 	.word	0x4e554f43
  402d60:	203d2054 	.word	0x203d2054
  402d64:	0a0d6425 	.word	0x0a0d6425
  402d68:	00000000 	.word	0x00000000
  402d6c:	20434441 	.word	0x20434441
  402d70:	41544144 	.word	0x41544144
  402d74:	0a0d3a20 	.word	0x0a0d3a20
  402d78:	00000000 	.word	0x00000000
  402d7c:	58343025 	.word	0x58343025
  402d80:	00000020 	.word	0x00000020
  402d84:	65776f4c 	.word	0x65776f4c
  402d88:	69442072 	.word	0x69442072
  402d8c:	69726373 	.word	0x69726373
  402d90:	756f4320 	.word	0x756f4320
  402d94:	3d20746e 	.word	0x3d20746e
  402d98:	0d642520 	.word	0x0d642520
  402d9c:	0000000a 	.word	0x0000000a
  402da0:	6f72655a 	.word	0x6f72655a
  402da4:	6f724320 	.word	0x6f724320
  402da8:	43207373 	.word	0x43207373
  402dac:	746e756f 	.word	0x746e756f
  402db0:	25203d20 	.word	0x25203d20
  402db4:	000a0d64 	.word	0x000a0d64
  402db8:	65707055 	.word	0x65707055
  402dbc:	69442072 	.word	0x69442072
  402dc0:	69726373 	.word	0x69726373
  402dc4:	756f4320 	.word	0x756f4320
  402dc8:	3d20746e 	.word	0x3d20746e
  402dcc:	0d642520 	.word	0x0d642520
  402dd0:	0000000a 	.word	0x0000000a
  402dd4:	65707055 	.word	0x65707055
  402dd8:	69442072 	.word	0x69442072
  402ddc:	69726373 	.word	0x69726373
  402de0:	6d695420 	.word	0x6d695420
  402de4:	736d2865 	.word	0x736d2865
  402de8:	20296365 	.word	0x20296365
  402dec:	000a0d3a 	.word	0x000a0d3a
  402df0:	20643425 	.word	0x20643425
  402df4:	00000000 	.word	0x00000000
  402df8:	5f434441 	.word	0x5f434441
  402dfc:	756c6156 	.word	0x756c6156
  402e00:	203d2065 	.word	0x203d2065
  402e04:	58343025 	.word	0x58343025
  402e08:	0000000a 	.word	0x0000000a
  402e0c:	0a0d0a0d 	.word	0x0a0d0a0d
  402e10:	2d2d2d2d 	.word	0x2d2d2d2d
  402e14:	6364612d 	.word	0x6364612d
  402e18:	6e6f635f 	.word	0x6e6f635f
  402e1c:	6c6f7274 	.word	0x6c6f7274
  402e20:	6e656d20 	.word	0x6e656d20
  402e24:	2d2d2d75 	.word	0x2d2d2d75
  402e28:	00000a0d 	.word	0x00000a0d
  402e2c:	65733a31 	.word	0x65733a31
  402e30:	41442074 	.word	0x41442074
  402e34:	554f2043 	.word	0x554f2043
  402e38:	5a283054 	.word	0x5a283054
  402e3c:	436f7265 	.word	0x436f7265
  402e40:	73736f72 	.word	0x73736f72
  402e44:	20203a29 	.word	0x20203a29
  402e48:	30257830 	.word	0x30257830
  402e4c:	0a0d5834 	.word	0x0a0d5834
  402e50:	00000000 	.word	0x00000000
  402e54:	65733a32 	.word	0x65733a32
  402e58:	41442074 	.word	0x41442074
  402e5c:	554f2043 	.word	0x554f2043
  402e60:	4c283154 	.word	0x4c283154
  402e64:	7265776f 	.word	0x7265776f
  402e68:	63736544 	.word	0x63736544
  402e6c:	3a296972 	.word	0x3a296972
  402e70:	30257830 	.word	0x30257830
  402e74:	0a0d5834 	.word	0x0a0d5834
  402e78:	00000000 	.word	0x00000000
  402e7c:	65733a33 	.word	0x65733a33
  402e80:	41442074 	.word	0x41442074
  402e84:	554f2043 	.word	0x554f2043
  402e88:	55283254 	.word	0x55283254
  402e8c:	72657070 	.word	0x72657070
  402e90:	63736544 	.word	0x63736544
  402e94:	3a296972 	.word	0x3a296972
  402e98:	30257830 	.word	0x30257830
  402e9c:	0a0d5834 	.word	0x0a0d5834
  402ea0:	00000000 	.word	0x00000000
  402ea4:	74733a34 	.word	0x74733a34
  402ea8:	0d747261 	.word	0x0d747261
  402eac:	0000000a 	.word	0x0000000a
  402eb0:	732a3a35 	.word	0x732a3a35
  402eb4:	0d706f74 	.word	0x0d706f74
  402eb8:	0000000a 	.word	0x0000000a
  402ebc:	61443a36 	.word	0x61443a36
  402ec0:	52206174 	.word	0x52206174
  402ec4:	0d646165 	.word	0x0d646165
  402ec8:	0000000a 	.word	0x0000000a
  402ecc:	65523a37 	.word	0x65523a37
  402ed0:	0d746573 	.word	0x0d746573
  402ed4:	0000000a 	.word	0x0000000a
  402ed8:	0000203e 	.word	0x0000203e
  402edc:	25206425 	.word	0x25206425
  402ee0:	00000078 	.word	0x00000078
  402ee4:	682f2e2e 	.word	0x682f2e2e
  402ee8:	732f6c61 	.word	0x732f6c61
  402eec:	682f6372 	.word	0x682f6372
  402ef0:	695f6c61 	.word	0x695f6c61
  402ef4:	00632e6f 	.word	0x00632e6f
  402ef8:	682f2e2e 	.word	0x682f2e2e
  402efc:	732f6c61 	.word	0x732f6c61
  402f00:	682f6372 	.word	0x682f6372
  402f04:	735f6c61 	.word	0x735f6c61
  402f08:	6d5f6970 	.word	0x6d5f6970
  402f0c:	6e79735f 	.word	0x6e79735f
  402f10:	00632e63 	.word	0x00632e63
  402f14:	682f2e2e 	.word	0x682f2e2e
  402f18:	732f6c61 	.word	0x732f6c61
  402f1c:	682f6372 	.word	0x682f6372
  402f20:	755f6c61 	.word	0x755f6c61
  402f24:	74726173 	.word	0x74726173
  402f28:	7973615f 	.word	0x7973615f
  402f2c:	632e636e 	.word	0x632e636e
  402f30:	00000000 	.word	0x00000000
  402f34:	682f2e2e 	.word	0x682f2e2e
  402f38:	752f6c61 	.word	0x752f6c61
  402f3c:	736c6974 	.word	0x736c6974
  402f40:	6372732f 	.word	0x6372732f
  402f44:	6974752f 	.word	0x6974752f
  402f48:	725f736c 	.word	0x725f736c
  402f4c:	62676e69 	.word	0x62676e69
  402f50:	65666675 	.word	0x65666675
  402f54:	00632e72 	.word	0x00632e72

00402f58 <_ext_irq>:
  402f58:	00000001 00000004 00000004 00000004     ................
  402f68:	00000000 00000004 00000000              ............

00402f74 <_pio_irq_n>:
  402f74:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  402f84:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  402f94:	00000000                                ....

00402f98 <spi_regs>:
  402f98:	00000000 80000000 00000001 0496dc02     ................
  402fa8:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  402fb8:	735f6c70 632e6970 00000000              pl_spi.c....

00402fc4 <_usarts>:
  402fc4:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  402fd4:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  402fe4:	632e7472 00000000                       rt.c....

00402fec <__sf_fake_stderr>:
	...

0040300c <__sf_fake_stdin>:
	...

0040302c <__sf_fake_stdout>:
	...
  40304c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  40305c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  40306c:	31300046 35343332 39383736 64636261     F.0123456789abcd
  40307c:	00006665 0040309e 004030a1 004030a4     ef...0@..0@..0@.
  40308c:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
  40309c:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
  4030ac:	2e005849 20200000                                IX...

004030b1 <_ctype_>:
  4030b1:	20202000 20202020 28282020 20282828     .         ((((( 
  4030c1:	20202020 20202020 20202020 20202020                     
  4030d1:	10108820 10101010 10101010 10101010      ...............
  4030e1:	04040410 04040404 10040404 10101010     ................
  4030f1:	41411010 41414141 01010101 01010101     ..AAAAAA........
  403101:	01010101 01010101 01010101 10101010     ................
  403111:	42421010 42424242 02020202 02020202     ..BBBBBB........
  403121:	02020202 02020202 02020202 10101010     ................
  403131:	00000020 00000000 00000000 00000000      ...............
	...

004031b4 <_init>:
  4031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4031b6:	bf00      	nop
  4031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4031ba:	bc08      	pop	{r3}
  4031bc:	469e      	mov	lr, r3
  4031be:	4770      	bx	lr

004031c0 <__init_array_start>:
  4031c0:	0040018d 	.word	0x0040018d

004031c4 <_fini>:
  4031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4031c6:	bf00      	nop
  4031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4031ca:	bc08      	pop	{r3}
  4031cc:	469e      	mov	lr, r3
  4031ce:	4770      	bx	lr

004031d0 <__fini_array_start>:
  4031d0:	00400169 	.word	0x00400169
